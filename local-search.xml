<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringBoot定时任务</title>
    <link href="/2022/12/05/SpringBoot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <url>/2022/12/05/SpringBoot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>在很多应用程序中，经常需要执行定时任务。例如，每天或每月给用户发送账户汇总报表，定期检查并发送系统状态报告，等等</p><h4 id="在spring的配置文件上，加上-EnableScheduling就开启了定时任务的支持"><a href="#在spring的配置文件上，加上-EnableScheduling就开启了定时任务的支持" class="headerlink" title="在spring的配置文件上，加上@EnableScheduling就开启了定时任务的支持"></a>在spring的配置文件上，加上<code>@EnableScheduling</code>就开启了定时任务的支持</h4><p>接下来，我们可以直接在一个Bean中编写一个<code>public void</code>无参数方法，然后加上<code>@Scheduled</code>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu.service;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.Scheduled;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@EnableScheduling</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskService</span> &#123;<br><br>    <span class="hljs-meta">@Scheduled(cron = &quot;0/5 * * * * *&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkSystemStatusEveryMinute</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Start check system status...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述注解指定了每隔5秒执行一次。现在，我们直接运行应用程序，就可以在控制台看到定时任务打印的日志：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Start check system status...<br>Start check system status...<br></code></pre></td></tr></table></figure><h4 id="cron-表达式"><a href="#cron-表达式" class="headerlink" title="cron 表达式"></a>cron 表达式</h4><blockquote><p>Cron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义</p></blockquote><p><strong>corn从左到右（用空格隔开）：秒 分 小时 月份中的日期 月份 星期中的日期 年份</strong></p><p>各字段的含义</p><table><thead><tr><th>字段</th><th>允许值</th><th>允许的特殊字符</th></tr></thead><tbody><tr><td>秒（<code>Seconds</code>）</td><td>0~59的整数</td><td>, - * &#x2F;   四个字符</td></tr><tr><td>分（<em>Minutes</em>）</td><td>0~59的整数</td><td>, - * &#x2F;   四个字符</td></tr><tr><td>小时（<em>Hours</em>）</td><td>0~23的整数</td><td>, - * &#x2F;   四个字符</td></tr><tr><td>日期（<em>DayofMonth</em>）</td><td>1~31的整数（但是你需要考虑你月的天数）</td><td>,- * ? &#x2F; L W C   八个字符</td></tr><tr><td>月份（<em>Month</em>）</td><td>1~12的整数或者 JAN-DEC</td><td>, - * &#x2F;   四个字符</td></tr><tr><td>星期（<em>DayofWeek</em>）</td><td>1~7的整数或者 SUN-SAT （1&#x3D;SUN）</td><td>, - * ? &#x2F; L C #   八个字符</td></tr><tr><td>年(可选，留空)（<em>Year</em>）</td><td>1970~2099</td><td>, - * &#x2F;   四个字符</td></tr></tbody></table><p>每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是：</p><p>　　（1）<code>*</code>：表示匹配该域的任意值。假如在Minutes域使用, 即表示每分钟都会触发事件。</p><p>　　（2）<code>?</code>：只能用在DayofMonth和DayofWeek两个域。它也匹配域的任意值，但实际不会。因为DayofMonth和DayofWeek会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?, 其中最后一位只能用？，而不能使用<em>，如果使用</em>表示不管星期几都会触发，实际上并不是这样。</p><p>　　（3）<code>-</code>：表示范围。例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次 </p><p>　　（4）<code>/</code>：表示起始时间开始触发，然后每隔固定时间触发一次。例如在Minutes域使用5&#x2F;20,则意味着5分钟触发一次，而25，45等分别触发一次. </p><p>　　（5）<code>,</code>：表示列出枚举值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。 </p><p>　　（6）<code>L</code>：表示最后，只能出现在DayofWeek和DayofMonth域。如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。 </p><p>　　（7）<code>W</code>:表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份 。</p><p>　　（8）<code>LW</code>:这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。 </p><p>　　（9）<code>#</code>:用于确定每个月第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。</p><h3 id="常用表达式例子"><a href="#常用表达式例子" class="headerlink" title="常用表达式例子"></a>常用表达式例子</h3><p>​  （1）<strong>0 0 2 1 * ? *</strong>  表示在每月的1日的凌晨2点执行任务</p><p>　　（2）<strong>0 15 10 ? * MON-FRI</strong>  表示周一到周五每天上午10:15执行作业</p><p>　　（3）<strong>0 15 10 ? 6L 2002-2006</strong>  表示2002-2006年的每个月的最后一个星期五上午10:15执行作</p><p>　　（4）<strong>0 0 10,14,16 * * ?</strong>  每天上午10点，下午2点，4点 </p><p>　　（5）<strong>0 0&#x2F;30 9-17 * * ?</strong>  朝九晚五工作时间内每半小时 </p><p>　　（6）<strong>0 0 12 ? * WED</strong>   表示每个星期三中午12点 </p><p>　　（7）<strong>0 0 12 * * ?</strong>  每天中午12点触发 </p><p>　　（8）<strong>0 15 10 ? * *</strong>   每天上午10:15触发 </p><p>　　（9）<strong>0 15 10 * * ?</strong>   每天上午10:15触发 </p><p>　　（10）<strong>0 15 10 * * ? *</strong>   每天上午10:15触发 </p><p>　　（11）<strong>0 15 10 * * ? 2005</strong>   2005年的每天上午10:15触发 </p><p>　　（12）<strong>0 * 14 * * ?</strong>   在每天下午2点到下午2:59期间的每1分钟触发 </p><p>　　（13）<strong>0 0&#x2F;5 14 * * ?</strong>   在每天下午2点到下午2:55期间的每5分钟触发 </p><p>　　（14）<strong>0 0&#x2F;5 14,18 * * ?</strong>   在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发 </p><p>　　（15）<strong>0 0-5 14 * * ?</strong>   在每天下午2点到下午2:05期间的每1分钟触发 </p><p>　　（16）<strong>0 10,44 14 ? 3 WED</strong>   每年三月的星期三的下午2:10和2:44触发 </p><p>　　（17）<strong>0 15 10 ? * MON-FRI</strong>   周一至周五的上午10:15触发 </p><p>　　（18）<strong>0 15 10 15 * ?</strong>   每月15日上午10:15触发 </p><p>　　（19）<strong>0 15 10 L * ?</strong>   每月最后一日的上午10:15触发 </p><p>　　（20）<strong>0 15 10 ? * 6L</strong>   每月的最后一个星期五上午10:15触发 </p><p>　　（21）<strong>0 15 10 ? * 6L 2002-2005</strong>  2002年至2005年的每月的最后一个星期五上午10:15触发 </p><p>　　（22）<strong>0 15 10 ? * 6#3</strong>  每月的第三个星期五上午10:15触发</p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot統一异常处理</title>
    <link href="/2022/12/05/SpringBoot%E7%B5%B1%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <url>/2022/12/05/SpringBoot%E7%B5%B1%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h2><blockquote><p>统一异常要用到@ControllerAdvice和@ExceptionHandler这两个注解，从名字上可以得出，@ControllerAdvice是对加了@Controller注解的类进行切面处理</p></blockquote><p><strong>为什么要有统一异常呢？</strong></p><ol><li>如果是编码过程中没有预料到的异常，比如bug，内存不足，硬件错误等等造成的，会提示给用户一些不友好的信息，如果在controller中处理，那么每个controller都要try catch，又过于繁琐</li><li>异常的种类很多，有自定义的业务异常，有系统异常，有空指针异常，有数组越界等，每种异常处理的方式都不一致，比如业务异常，需要提示用户准确信息，系统异常需要提示用户友好信息（系统繁忙，请稍候再试）并且记录错误，空指针异常遇到发送错误日志短信给开发人员等</li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu.handler;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-comment">//统一结果返回</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> success;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br><br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-keyword">private</span> Object data;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu.handler;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BusinessException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BusinessException</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">super</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BusinessException</span><span class="hljs-params">(Integer code,String message)</span>&#123;<br>        <span class="hljs-built_in">super</span>(message);<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu.handler;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyExceptionHandler</span> &#123;<br><br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">doException</span><span class="hljs-params">(Exception e)</span>&#123;<br>        <span class="hljs-comment">//记录异常</span><br>        e.printStackTrace();<br>        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>();<br>        result.setCode(-<span class="hljs-number">999</span>);<br>        result.setMessage(<span class="hljs-string">&quot;未知的异常，提示友好信息&quot;</span>);<br>        result.setSuccess(<span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@ExceptionHandler(IndexOutOfBoundsException.class)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">doStack</span><span class="hljs-params">(IndexOutOfBoundsException e)</span>&#123;<br>        <span class="hljs-comment">//记录异常</span><br>        e.printStackTrace();<br>        <span class="hljs-comment">//发送短信给开发人员</span><br>    <span class="hljs-comment">//        send()</span><br>        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>();<br>        result.setCode(-<span class="hljs-number">999</span>);<br>        result.setMessage(<span class="hljs-string">&quot;数组越界异常&quot;</span>);<br>        result.setSuccess(<span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@ExceptionHandler(BusinessException.class)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">doBusiness</span><span class="hljs-params">(BusinessException e)</span>&#123;<br>        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>();<br>        result.setCode(e.getCode());<br>        result.setMessage(e.getMessage());<br>        result.setSuccess(<span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;getUser/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;getUser方法调用...&quot;</span>);<br>        <span class="hljs-keyword">if</span> (id == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(-<span class="hljs-number">999</span>,<span class="hljs-string">&quot;对不起，参数不能为2&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (id == <span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexOutOfBoundsException</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (id == <span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>/<span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> userService.getUser(id);<br>    &#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot-Aop注解</title>
    <link href="/2022/12/05/SpringBoot-Aop%E6%B3%A8%E8%A7%A3/"/>
    <url>/2022/12/05/SpringBoot-Aop%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="Aop注解"><a href="#Aop注解" class="headerlink" title="Aop注解"></a>Aop注解</h2><h3 id="AOP概念"><a href="#AOP概念" class="headerlink" title="AOP概念"></a>AOP概念</h3><ul><li>Aspect：切面，即一个横跨多个核心逻辑的功能，或者称之为系统关注点；</li><li>Joinpoint：连接点，即定义在应用程序流程的何处插入切面的执行；</li><li>Pointcut：切入点，即一组连接点的集合；</li><li>Advice：通知，指特定连接点上执行的动作；</li><li>Introduction：引介，指为一个已有的Java对象动态地增加新的接口；</li><li>Weaving：织入，指将切面整合到程序的执行流程中；</li><li>Interceptor：拦截器，是一种实现增强的方式；</li><li>Target Object：目标对象，即真正执行业务的核心逻辑对象；</li><li>AOP Proxy：AOP代理，是客户端持有的增强后的对象引用。</li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.16.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>场景需求：</p><p>​为之前实现的注册用户服务，添加日志功能。</p><p>要求：</p><ol><li>打印执行的类和方法</li><li>打印执行方法的参数</li><li>计算方法执行的时间</li><li>如果有异常，记录异常</li></ol><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>1、定义切面类</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Aspect</span><br><span class="hljs-variable">@Component</span><br>public class LogAspect &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>2、定义切点</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Aspect</span><br><span class="hljs-variable">@Component</span><br>public class LogAspect &#123;<br>    <span class="hljs-comment">// 定义切点 在执行UserService的每个方法前执行:</span><br>    <span class="hljs-variable">@Pointcut</span>(<span class="hljs-string">&quot;execution(public * com.mszlu.service.UserService.*(..))&quot;</span>)<br>    public void <span class="hljs-built_in">pt</span>() &#123;&#125;<br>    <br><br>&#125;<br></code></pre></td></tr></table></figure><p>3、定义通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br>    <span class="hljs-comment">// 定义切点 在执行UserService的每个方法前执行:</span><br>    <span class="hljs-meta">@PointCut(&quot;execution(public * com.mszlu.service.UserService.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span> &#123;&#125;<br>    <br>  <span class="hljs-comment">//定义通知</span><br>    <span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">doLogging</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable&#123;<br>        <span class="hljs-comment">//方法调用</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> pjp.proceed();<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4、需求实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.78<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu.aop;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.Signature;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br><br>    <span class="hljs-comment">// 定义切点 在执行UserService的每个方法前执行:</span><br>    <span class="hljs-meta">@Pointcut(&quot;execution(public * com.mszlu.service.UserService.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-comment">//定义通知</span><br>    <span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">doLogging</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            log.info(<span class="hljs-string">&quot;----------------log start--------------------&quot;</span>);<br>            <span class="hljs-comment">//1. 打印执行的类和方法</span><br>            <span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> pjp.getSignature();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> signature.getName();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">interfaceName</span> <span class="hljs-operator">=</span> signature.getDeclaringTypeName();<br>            log.info(<span class="hljs-string">&quot;接口名称:&#123;&#125;&quot;</span>,interfaceName);<br>            log.info(<span class="hljs-string">&quot;方法名称:&#123;&#125;&quot;</span>,methodName);<br>            <span class="hljs-comment">//2. 打印执行方法的参数</span><br>            log.info(<span class="hljs-string">&quot;方法参数:&#123;&#125;&quot;</span>, JSON.toJSONString(pjp.getArgs()));<br>            <span class="hljs-comment">//3. 计算方法执行的时间</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>            <span class="hljs-comment">//方法调用</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> pjp.proceed();<br>            <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>            log.info(<span class="hljs-string">&quot;方法执行时间:&#123;&#125;ms&quot;</span>, endTime-startTime);<br>            log.info(<span class="hljs-string">&quot;----------------log end--------------------&quot;</span>);<br>            <span class="hljs-keyword">return</span> ret;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            <span class="hljs-comment">//4. 如果有异常，记录异常</span><br>            log.error(<span class="hljs-string">&quot;异常信息&quot;</span>,e);<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu;<br><br><span class="hljs-keyword">import</span> com.mszlu.config.SpringConfig;<br><span class="hljs-keyword">import</span> com.mszlu.proxy.JDKProxy;<br><span class="hljs-keyword">import</span> com.mszlu.service.BookService;<br><span class="hljs-keyword">import</span> com.mszlu.service.BookServiceImpl;<br><span class="hljs-keyword">import</span> com.mszlu.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> context.getBean(UserService.class);<br>        bean.registerUser(<span class="hljs-string">&quot;ddd@mszlu.com&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-string">&quot;ddd&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu.config;<br><br><span class="hljs-keyword">import</span> com.mszlu.domain.MyImportBeanDefinitionRegistrar;<br><span class="hljs-keyword">import</span> com.mszlu.domain.MyImportSelector;<br><span class="hljs-keyword">import</span> com.mszlu.domain.User;<br><span class="hljs-keyword">import</span> com.mszlu.domain.UserRegistrar;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Import;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.mszlu&quot;)</span><br><span class="hljs-comment">//注意开启AOP的支持，并且代理设置为cglib动态代理，因为UserService没有接口</span><br><span class="hljs-meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h3><p>AOP通知共分为5种类型</p><ol><li>前置通知</li><li>后置通知</li><li>环绕通知（重点）</li><li>返回后通知（了解）</li><li>抛出异常后通知（了解）</li></ol><h4 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h4><ul><li>名称：@Before</li><li>类型：<strong>方法注解</strong></li><li>位置：通知方法定义上方</li><li>作用：设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法前运行</li><li>范例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;pt()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;before advice ...&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>相关属性：value（默认）：切点标识</p><h4 id="后置通知"><a href="#后置通知" class="headerlink" title="后置通知"></a>后置通知</h4><ul><li>名称：@Before</li><li>类型：<strong>方法注解</strong></li><li>位置：通知方法定义上方</li><li>作用：设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法前运行</li><li>范例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;pt()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;before advice ...&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>相关属性：value（默认）：切点标识</p><h4 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h4><ul><li>名称：@Around（重点，常用）</li><li>类型：<strong>方法注解</strong></li><li>位置：通知方法定义上方</li><li>作用：设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法前后运行</li><li>范例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    System.out.println(<span class="hljs-string">&quot;around before advice ...&quot;</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> pjp.proceed();<br>    System.out.println(<span class="hljs-string">&quot;around after advice ...&quot;</span>);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>@Around注意事项</p></blockquote><ol><li><p>环绕通知必须依赖形参ProceedingJoinPoint才能实现对原始方法的调用，进而实现原始方法调用前后同时添加通知</p></li><li><p>通知中如果未使用ProceedingJoinPoint对原始方法进行调用将跳过原始方法的执行</p></li><li><p>对原始方法的调用可以不接收返回值，通知方法设置成void即可，如果接收返回值，必须设定为Object类型</p></li><li><p>原始方法的返回值如果是void类型，通知方法的返回值类型可以设置成void，也可以设置成Object</p></li><li><p>由于无法预知原始方法运行后是否会抛出异常，因此环绕通知方法必须抛出Throwable对象</p></li></ol><h4 id="返回后通知"><a href="#返回后通知" class="headerlink" title="返回后通知"></a>返回后通知</h4><ul><li><p>名称：@AfterReturning（了解）</p></li><li><p>类型：<strong>方法注解</strong></p></li><li><p>位置：通知方法定义上方</p></li><li><p>作用：设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法正常执行完毕后运行</p></li><li><p>范例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterReturning(&quot;pt()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;afterReturning advice ...&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="抛出异常后通知"><a href="#抛出异常后通知" class="headerlink" title="抛出异常后通知"></a>抛出异常后通知</h4><ul><li><p>名称：@AfterThrowing（了解）</p></li><li><p>类型：<strong>方法注解</strong></p></li><li><p>位置：通知方法定义上方</p></li><li><p>作用：设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法运行抛出异常后执行</p></li><li><p>范例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterThrowing(&quot;pt()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;afterThrowing advice ...&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="切点表达式"><a href="#切点表达式" class="headerlink" title="切点表达式"></a>切点表达式</h4><blockquote><p>切入点表达式标准格式：动作关键字（访问修饰符 返回值 包名.类&#x2F;接口名.方法名（参数）异常名）</p></blockquote><p><strong>execution（public User com.mszlu.service.UserService.findById（int））</strong></p><ul><li>动作关键字：描述切入点的行为动作，例如execution表示执行到指定切入点</li><li>访问修饰符：public，private等，可以省略</li><li>返回值</li><li>包名</li><li>类&#x2F;接口名</li><li>方法名</li><li>参数</li><li>异常名：方法定义中抛出指定异常，可以省略</li></ul><blockquote><p>可以使用通配符描述切入点，快速描述</p></blockquote><ul><li><code>*</code> ：单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的匹配符出现</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">execution（<span class="hljs-keyword">public</span> * com.mszlu.*.UserService.find*（*））<br></code></pre></td></tr></table></figure><p>匹配com.mszlu包下的任意包中的UserService类或接口中所有find开头的带有一个参数的方法</p><ul><li><code>.. </code>：多个连续的任意符号，可以独立出现，常用于简化包名与参数的书写</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">execution（public <span class="hljs-keyword">User</span> <span class="hljs-title">com</span>..UserService.findById（..））<br></code></pre></td></tr></table></figure><p>匹配com包下的任意包中的UserService类或接口中所有名称为findById的方法</p><ul><li><code>+</code>：专用于匹配子类类型</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">execution</span><span class="hljs-params">(* *..*Service+.*(..)</span></span>)<br></code></pre></td></tr></table></figure><h4 id="execution"><a href="#execution" class="headerlink" title="execution"></a>execution</h4><blockquote><p>execution在实际工作中，很少被使用，因为匹配的打击面非常大或者非常小，不能灵活应用</p></blockquote><p><code>execution(public * com.mszlu.service.*.*(..))</code> 基本能实现无差别全覆盖，即某个包下面的所有Bean的所有方法都会被拦截。</p><p><code>execution(public * update*(..))</code>从方法的前缀来区分，这种误伤的概率非常大，你不可能要求所有的程序员都按照这种书写习惯来。</p><p><strong>使用AOP，可以将指定的方法装配到指定Bean的指定方法前后，如果自动装配时，因为不恰当的范围，容易导致意想不到的结果，特别是新入职的开发人员，不懂得规则的时候，非常容易出现生产事故</strong></p><h3 id="annotation"><a href="#annotation" class="headerlink" title="annotation"></a>annotation</h3><blockquote><p>我们使用AOP的时候，常常使用annotation的形式</p></blockquote><p>场景：</p><p>比如我们实现一个性能监控的需求，使用AOP实现</p><ol><li>定义注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu.aop;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MsMetric &#123;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>在需要监控的方法上，加上注解</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@MsMetric</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">registerUser</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> mail,<span class="hljs-built_in">String</span> password,<span class="hljs-built_in">String</span> nickname</span>)&#123;<br>        <span class="hljs-comment">//...</span><br>    &#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>实现性能监控AOP，切点使用annotation</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu.aop;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MetricAspect</span> &#123;<br><br>    <span class="hljs-comment">// 定义切点 注解所在的方法 即是切点</span><br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(MsMetric)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-comment">//定义通知</span><br>    <span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">doLogging</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            log.info(<span class="hljs-string">&quot;----------------metric start--------------------&quot;</span>);<br>            <span class="hljs-comment">//计算方法执行的时间</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>            <span class="hljs-comment">//方法调用</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> pjp.proceed();<br>            <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>            log.info(<span class="hljs-string">&quot;方法执行时间:&#123;&#125;ms&quot;</span>, endTime-startTime);<br>            log.info(<span class="hljs-string">&quot;----------------metric end--------------------&quot;</span>);<br>            <span class="hljs-keyword">return</span> ret;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            log.error(<span class="hljs-string">&quot;异常信息&quot;</span>,e);<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="AOP使用注意事项"><a href="#AOP使用注意事项" class="headerlink" title="AOP使用注意事项"></a>AOP使用注意事项</h3><ol><li>访问被注入的Bean时，总是调用方法而非直接访问字段。</li><li>编写Bean时，如果可能会被代理，就不要编写<code>public final</code>方法。</li></ol><p>示例：</p><p>在MailService：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.mszlu.service;<br><br><span class="hljs-keyword">import</span> com.mszlu.aop.MsMetric;<br><span class="hljs-keyword">import</span> com.mszlu.<span class="hljs-keyword">domain</span>.<span class="hljs-keyword">User</span>;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br>@Component<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> MailService &#123;<br><br>    <span class="hljs-built_in">public</span> final <span class="hljs-keyword">User</span> aaa = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();<br><br>    <span class="hljs-built_in">public</span> <span class="hljs-keyword">User</span> getUser()&#123;<br>        <span class="hljs-keyword">return</span> aaa;<br>    &#125;<br><br>    <span class="hljs-built_in">public</span> final <span class="hljs-keyword">User</span> getFinalUser()&#123;<br>        <span class="hljs-keyword">return</span> aaa;<br>    &#125;<br><br>    @MsMetric<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">boolean</span> sendRegisterMail(<span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span>)&#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(String.format(&quot;%s 正在注册码神之路，您可以点击以下的链接完成注册 %s,如果不是你注册的，请忽略本邮件&quot;,<span class="hljs-keyword">user</span>.getNickname(),&quot;http://www.mszlu.com&quot;));<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="UserService中："><a href="#UserService中：" class="headerlink" title="UserService中："></a>UserService中：</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> registerUser(String mail,String <span class="hljs-keyword">password</span>,String nickname)&#123;<br>        users.<span class="hljs-keyword">forEach</span>(<span class="hljs-keyword">user</span> -&gt; &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">user</span>.getMail().equalsIgnoreCase(mail))&#123;<br>                throw <span class="hljs-built_in">new</span> RuntimeException(&quot;已经注册&quot;);<br>            &#125;<br>        &#125;);<br>     //输出<span class="hljs-keyword">null</span><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(mailService.aaa);<br>     //输出<span class="hljs-keyword">null</span><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(mailService.getFinalUser());<br>     //正常输出<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(mailService.getUser());<br>        <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>(<span class="hljs-keyword">null</span>,mail,<span class="hljs-keyword">password</span>,nickname);<br>        mailService.sendRegisterMail(<span class="hljs-keyword">user</span>);<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot后端代码生成器</title>
    <link href="/2022/11/20/SpringBoot%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <url>/2022/11/20/SpringBoot%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Springboot-代码生成器"><a href="#Springboot-代码生成器" class="headerlink" title="Springboot 代码生成器"></a>Springboot 代码生成器</h2><h3 id="pom-文件依赖"><a href="#pom-文件依赖" class="headerlink" title="pom 文件依赖"></a>pom 文件依赖</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"> &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;<br>            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">3.4</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;mysql&lt;/groupId&gt;<br>            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>            &lt;scope&gt;runtime&lt;/scope&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>            &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>            &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>            &lt;exclusions&gt;<br>                &lt;exclusion&gt;<br>                    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;<br>                    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;<br>                &lt;/exclusion&gt;<br>            &lt;/exclusions&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;junit&lt;/groupId&gt;<br>            &lt;artifactId&gt;junit&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>        &lt;/dependency&gt;<br><br><br>&lt;!--        mp 代码生成器--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;<br>            &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">3.2</span><span class="hljs-number">.0</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;<br>            &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">2.2</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h3 id="propertis文件配置"><a href="#propertis文件配置" class="headerlink" title="propertis文件配置"></a>propertis文件配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"># 应用名称<br>spring.application.name=demo<br># 应用服务 WEB 访问端口<br>server.port=<span class="hljs-number">8080</span><br># 数据库驱动：<br>spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver <br># 数据源名称<br>spring.datasource.name=defaultDataSource<br># 数据库连接地址<br>spring.datasource.url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/mybatis_plus_db?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span><br><br># 数据库用户名&amp;密码：<br>spring.datasource.username=root<br>spring.datasource.password=admin123<br><br><br># 配置日志<br>mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl<br><br># 配置逻辑删除<br>mybatis-plus.global-config.db-config.logic-delete-value=<span class="hljs-number">1</span><br>mybatis-plus.global-config.db-config.logic-not-delete-value=<span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><h3 id="CodeGenerator-java-文件"><a href="#CodeGenerator-java-文件" class="headerlink" title="CodeGenerator.java 文件"></a>CodeGenerator.java 文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.common;<br><br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableFill;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodeGenerator</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">scanner</span><span class="hljs-params">(String tip)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">help</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        help.append(<span class="hljs-string">&quot;请输入&quot;</span> + tip + <span class="hljs-string">&quot;：&quot;</span>);<br>        System.out.println(help.toString());<br>        <span class="hljs-keyword">if</span> (scanner.hasNext()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">ipt</span> <span class="hljs-operator">=</span> scanner.next();<br>            <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(ipt)) &#123;<br>                <span class="hljs-keyword">return</span> ipt;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusException</span>(<span class="hljs-string">&quot;请输入正确的&quot;</span> + tip + <span class="hljs-string">&quot;！&quot;</span>);<br>    &#125;<br><br><br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 代码生成器</span><br>        <span class="hljs-type">AutoGenerator</span> <span class="hljs-variable">mpg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AutoGenerator</span>();<br><br>        <span class="hljs-comment">// 全局配置</span><br>        <span class="hljs-type">GlobalConfig</span> <span class="hljs-variable">gc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GlobalConfig</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">projectPath</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>);<br>        gc.setOutputDir(projectPath + <span class="hljs-string">&quot;/src/main/java&quot;</span>);<span class="hljs-comment">//设置代码生成路径</span><br>        gc.setFileOverride(<span class="hljs-literal">true</span>);<span class="hljs-comment">//是否覆盖以前文件</span><br>        gc.setOpen(<span class="hljs-literal">false</span>);<span class="hljs-comment">//是否打开生成目录</span><br>        gc.setAuthor(<span class="hljs-string">&quot;胡诗羊&quot;</span>);<span class="hljs-comment">//设置项目作者名称</span><br>        gc.setIdType(IdType.AUTO);<span class="hljs-comment">//设置主键策略</span><br>        gc.setBaseResultMap(<span class="hljs-literal">true</span>);<span class="hljs-comment">//生成基本ResultMap</span><br>        gc.setBaseColumnList(<span class="hljs-literal">true</span>);<span class="hljs-comment">//生成基本ColumnList</span><br>        gc.setServiceName(<span class="hljs-string">&quot;%sService&quot;</span>);<span class="hljs-comment">//去掉服务默认前缀</span><br>        gc.setDateType(DateType.ONLY_DATE);<span class="hljs-comment">//设置时间类型</span><br>        mpg.setGlobalConfig(gc);<br><br>        <span class="hljs-comment">// 数据源配置</span><br>        <span class="hljs-type">DataSourceConfig</span> <span class="hljs-variable">dsc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceConfig</span>();<br>        dsc.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis_plus_db?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8&quot;</span>);<br>        dsc.setDriverName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        dsc.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dsc.setPassword(<span class="hljs-string">&quot;admin123&quot;</span>);<br>        mpg.setDataSource(dsc);<br><br>        <span class="hljs-comment">// 包配置</span><br>        <span class="hljs-type">PackageConfig</span> <span class="hljs-variable">pc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PackageConfig</span>();<br>        pc.setParent(<span class="hljs-string">&quot;com.example.demo&quot;</span>);<br>        pc.setMapper(<span class="hljs-string">&quot;mapper&quot;</span>);<br>        pc.setXml(<span class="hljs-string">&quot;mapper.xml&quot;</span>);<br>        pc.setEntity(<span class="hljs-string">&quot;pojo&quot;</span>);<br>        pc.setService(<span class="hljs-string">&quot;service&quot;</span>);<br>        pc.setServiceImpl(<span class="hljs-string">&quot;service.impl&quot;</span>);<br>        pc.setController(<span class="hljs-string">&quot;controller&quot;</span>);<br>        mpg.setPackageInfo(pc);<br><br>        <span class="hljs-comment">// 策略配置</span><br>        <span class="hljs-type">StrategyConfig</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StrategyConfig</span>();<br>        sc.setNaming(NamingStrategy.underline_to_camel);<br>        sc.setColumnNaming(NamingStrategy.underline_to_camel);<br>        sc.setEntityLombokModel(<span class="hljs-literal">true</span>);<span class="hljs-comment">//自动lombok</span><br>        sc.setRestControllerStyle(<span class="hljs-literal">true</span>);<br>        sc.setControllerMappingHyphenStyle(<span class="hljs-literal">true</span>);<br><br>        sc.setLogicDeleteFieldName(<span class="hljs-string">&quot;deleted&quot;</span>);<span class="hljs-comment">//设置逻辑删除</span><br><br>        <span class="hljs-comment">//设置自动填充配置</span><br>        <span class="hljs-type">TableFill</span> <span class="hljs-variable">gmt_create</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TableFill</span>(<span class="hljs-string">&quot;create_time&quot;</span>, FieldFill.INSERT);<br>        <span class="hljs-type">TableFill</span> <span class="hljs-variable">gmt_modified</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TableFill</span>(<span class="hljs-string">&quot;update_time&quot;</span>, FieldFill.INSERT_UPDATE);<br>        ArrayList&lt;TableFill&gt; tableFills=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        tableFills.add(gmt_create);<br>        tableFills.add(gmt_modified);<br>        sc.setTableFillList(tableFills);<br><br>        <span class="hljs-comment">//乐观锁</span><br>        sc.setVersionFieldName(<span class="hljs-string">&quot;version&quot;</span>);<br>        sc.setRestControllerStyle(<span class="hljs-literal">true</span>);<span class="hljs-comment">//驼峰命名</span><br><br><br><br>        <span class="hljs-comment">//  sc.setTablePrefix(&quot;tbl_&quot;); 设置表名前缀</span><br>        sc.setInclude(scanner(<span class="hljs-string">&quot;表名，多个英文逗号分割&quot;</span>).split(<span class="hljs-string">&quot;,&quot;</span>));<br>        mpg.setStrategy(sc);<br><br>        <span class="hljs-comment">// 生成代码</span><br>        mpg.execute();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>在输入框内输入表的名称</code></p><p><img src="/2022/11/20/SpringBoot%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/image-20221120215157858.png" alt="image-20221120215157858"></p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MybatisPlus配置</title>
    <link href="/2022/11/19/MybatisPlus%E9%85%8D%E7%BD%AE%C2%B71%C2%B7/"/>
    <url>/2022/11/19/MybatisPlus%E9%85%8D%E7%BD%AE%C2%B71%C2%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="MybatisPlusConfig"><a href="#MybatisPlusConfig" class="headerlink" title="MybatisPlusConfig"></a>MybatisPlusConfig</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu.blog.config;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;<br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(&quot;com.mszlu.blog.dao.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlusConfig</span> &#123;<br><br>    <span class="hljs-comment">//分页插件</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>        interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>());<br>        <span class="hljs-keyword">return</span> interceptor;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot Aop接口和缓存接口配置</title>
    <link href="/2022/11/19/SpringBoot-Aop%E6%8E%A5%E5%8F%A3%E5%92%8C%E7%BC%93%E5%AD%98%E6%8E%A5%E5%8F%A3%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/11/19/SpringBoot-Aop%E6%8E%A5%E5%8F%A3%E5%92%8C%E7%BC%93%E5%AD%98%E6%8E%A5%E5%8F%A3%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="Aop接口"><a href="#Aop接口" class="headerlink" title="Aop接口"></a>Aop接口</h2><h3 id="LogAnnotation"><a href="#LogAnnotation" class="headerlink" title="LogAnnotation"></a>LogAnnotation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu.blog.common.aop;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><span class="hljs-comment">//Type 代表可以放在类上面 Method 代表可以放在方法上</span><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> LogAnnotation &#123;<br><br>    String <span class="hljs-title function_">module</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    String <span class="hljs-title function_">operator</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="LogAspect"><a href="#LogAspect" class="headerlink" title="LogAspect"></a>LogAspect</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu.blog.common.aop;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.mszlu.blog.utils.HttpContextUtils;<br><span class="hljs-keyword">import</span> com.mszlu.blog.utils.IpUtils;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">//切面 定义了通知和切点的关系</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br><br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(com.mszlu.blog.common.aop.LogAnnotation)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-comment">//环绕通知</span><br>    <span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">log</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">beginTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-comment">//执行方法</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> joinPoint.proceed();<br>        <span class="hljs-comment">//执行时长(毫秒)</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> System.currentTimeMillis() - beginTime;<br>        <span class="hljs-comment">//保存日志</span><br>        recordLog(joinPoint, time);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">recordLog</span><span class="hljs-params">(ProceedingJoinPoint joinPoint, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> (MethodSignature) joinPoint.getSignature();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> signature.getMethod();<br>        <span class="hljs-type">LogAnnotation</span> <span class="hljs-variable">logAnnotation</span> <span class="hljs-operator">=</span> method.getAnnotation(LogAnnotation.class);<br>        log.info(<span class="hljs-string">&quot;=====================log start================================&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;module:&#123;&#125;&quot;</span>,logAnnotation.<span class="hljs-keyword">module</span>());<br>        log.info(<span class="hljs-string">&quot;operation:&#123;&#125;&quot;</span>,logAnnotation.operator());<br><br>        <span class="hljs-comment">//请求的方法名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> joinPoint.getTarget().getClass().getName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> signature.getName();<br>        log.info(<span class="hljs-string">&quot;request method:&#123;&#125;&quot;</span>,className + <span class="hljs-string">&quot;.&quot;</span> + methodName + <span class="hljs-string">&quot;()&quot;</span>);<br><br><span class="hljs-comment">//        //请求的参数</span><br>        Object[] args = joinPoint.getArgs();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> JSON.toJSONString(args[<span class="hljs-number">0</span>]);<br>        log.info(<span class="hljs-string">&quot;params:&#123;&#125;&quot;</span>,params);<br><br>        <span class="hljs-comment">//获取request 设置IP地址</span><br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> HttpContextUtils.getHttpServletRequest();<br>        log.info(<span class="hljs-string">&quot;ip:&#123;&#125;&quot;</span>, IpUtils.getIpAddr(request));<br><br><br>        log.info(<span class="hljs-string">&quot;excute time : &#123;&#125; ms&quot;</span>,time);<br>        log.info(<span class="hljs-string">&quot;=====================log end================================&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Cache接口"><a href="#Cache接口" class="headerlink" title="Cache接口"></a>Cache接口</h2><h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu.blog.common.cache;<br><br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Cache &#123;<br><br>    <span class="hljs-type">long</span> <span class="hljs-title function_">expire</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">1</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>;<br>    <span class="hljs-comment">//缓存标识 key</span><br>    String <span class="hljs-title function_">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="CacheAspect"><a href="#CacheAspect" class="headerlink" title="CacheAspect"></a>CacheAspect</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu.blog.common.cache;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.type.TypeReference;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.mszlu.blog.vo.Result;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.codec.digest.DigestUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.Signature;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.core.annotation.AliasFor;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.time.Duration;<br><span class="hljs-comment">//aop 定义一个切面，切面定义了切点和通知的关系</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheAspect</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;<br><br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(com.mszlu.blog.common.cache.Cache)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> pjp.getSignature();<br>            <span class="hljs-comment">//类名</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> pjp.getTarget().getClass().getSimpleName();<br>            <span class="hljs-comment">//调用的方法名</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> signature.getName();<br><br><br>            Class[] parameterTypes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[pjp.getArgs().length];<br>            Object[] args = pjp.getArgs();<br>            <span class="hljs-comment">//参数</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;args.length; i++) &#123;<br>                <span class="hljs-keyword">if</span>(args[i] != <span class="hljs-literal">null</span>) &#123;<br>                    params += JSON.toJSONString(args[i]);<br>                    parameterTypes[i] = args[i].getClass();<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    parameterTypes[i] = <span class="hljs-literal">null</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(params)) &#123;<br>                <span class="hljs-comment">//加密 以防出现key过长以及字符转义获取不到的情况</span><br>                params = DigestUtils.md5Hex(params);<br>            &#125;<br>            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> pjp.getSignature().getDeclaringType().getMethod(methodName, parameterTypes);<br>            <span class="hljs-comment">//获取Cache注解</span><br>            <span class="hljs-type">Cache</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> method.getAnnotation(Cache.class);<br>            <span class="hljs-comment">//缓存过期时间</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">expire</span> <span class="hljs-operator">=</span> annotation.expire();<br>            <span class="hljs-comment">//缓存名称</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> annotation.name();<br>            <span class="hljs-comment">//先从redis获取</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">redisKey</span> <span class="hljs-operator">=</span> name + <span class="hljs-string">&quot;::&quot;</span> + className+<span class="hljs-string">&quot;::&quot;</span>+methodName+<span class="hljs-string">&quot;::&quot;</span>+params;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">redisValue</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().get(redisKey);<br>            <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(redisValue))&#123;<br>                log.info(<span class="hljs-string">&quot;走了缓存~~~,&#123;&#125;&quot;</span>,redisKey);<br>                <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> JSON.parseObject(redisValue, Result.class);<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">proceed</span> <span class="hljs-operator">=</span> pjp.proceed();<br>            redisTemplate.opsForValue().set(redisKey,JSON.toJSONString(proceed), Duration.ofMillis(expire));<br>            log.info(<span class="hljs-string">&quot;存入缓存~~~ &#123;&#125;,&#123;&#125;&quot;</span>,className,methodName);<br>            <span class="hljs-keyword">return</span> proceed;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>            throwable.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> Result.fail(-<span class="hljs-number">999</span>,<span class="hljs-string">&quot;系统错误&quot;</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot 常用工具类</title>
    <link href="/2022/11/19/SpringBoot-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2022/11/19/SpringBoot-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="用户线程-UserThreadLocal"><a href="#用户线程-UserThreadLocal" class="headerlink" title="用户线程 UserThreadLocal"></a>用户线程 UserThreadLocal</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu.blog.utils;<br><br><span class="hljs-keyword">import</span> com.mszlu.blog.dao.pojo.SysUser;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserThreadLocal</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">UserThreadLocal</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-comment">//线程变量隔离</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;SysUser&gt; LOCAL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(SysUser sysUser)</span>&#123;<br>        LOCAL.set(sysUser);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SysUser <span class="hljs-title function_">get</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> LOCAL.get();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span>&#123;<br>        LOCAL.remove();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2022/11/19/SpringBoot-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20221119095558064.png" alt="image-20221119095558064"></p><p><img src="/2022/11/19/SpringBoot-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20221119095704687.png" alt="image-20221119095704687"></p><h2 id="七牛云-QiniuUtils"><a href="#七牛云-QiniuUtils" class="headerlink" title="七牛云 QiniuUtils"></a>七牛云 QiniuUtils</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu.blog.utils;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.qiniu.common.QiniuException;<br><span class="hljs-keyword">import</span> com.qiniu.http.Response;<br><span class="hljs-keyword">import</span> com.qiniu.storage.BucketManager;<br><span class="hljs-keyword">import</span> com.qiniu.storage.Configuration;<br><span class="hljs-keyword">import</span> com.qiniu.storage.Region;<br><span class="hljs-keyword">import</span> com.qiniu.storage.UploadManager;<br><span class="hljs-keyword">import</span> com.qiniu.storage.model.DefaultPutRet;<br><span class="hljs-keyword">import</span> com.qiniu.storage.model.FileInfo;<br><span class="hljs-keyword">import</span> com.qiniu.storage.model.FileListing;<br><span class="hljs-keyword">import</span> com.qiniu.util.Auth;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QiniuUtils</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://static.mszlu.com/&quot;</span>;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;qiniu.accessKey&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span>  String accessKey;<br>    <span class="hljs-meta">@Value(&quot;$&#123;qiniu.accessSecretKey&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span>  String accessSecretKey;<br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile file,String fileName)</span>&#123;<br><br>        <span class="hljs-comment">//构造一个带指定 Region 对象的配置类</span><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">cfg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(Region.huabei());<br>        <span class="hljs-comment">//...其他参数参考类注释</span><br>        <span class="hljs-type">UploadManager</span> <span class="hljs-variable">uploadManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UploadManager</span>(cfg);<br>        <span class="hljs-comment">//...生成上传凭证，然后准备上传</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">bucket</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mszlu&quot;</span>;<br>        <span class="hljs-comment">//默认不指定key的情况下，以文件内容的hash值作为文件名</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">byte</span>[] uploadBytes = file.getBytes();<br>            <span class="hljs-type">Auth</span> <span class="hljs-variable">auth</span> <span class="hljs-operator">=</span> Auth.create(accessKey, accessSecretKey);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">upToken</span> <span class="hljs-operator">=</span> auth.uploadToken(bucket);<br>                <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> uploadManager.put(uploadBytes, fileName, upToken);<br>                <span class="hljs-comment">//解析上传成功的结果</span><br>                <span class="hljs-type">DefaultPutRet</span> <span class="hljs-variable">putRet</span> <span class="hljs-operator">=</span> JSON.parseObject(response.bodyString(), DefaultPutRet.class);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>                ex.printStackTrace();<br>            &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> QiniuException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">bucket</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;wwwmszlucom&quot;</span>;<br>        <span class="hljs-type">Auth</span> <span class="hljs-variable">auth</span> <span class="hljs-operator">=</span> Auth.create(accessKey, accessSecretKey);<br>        <span class="hljs-comment">//构造一个带指定 Region 对象的配置类</span><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">cfg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(Region.huabei());<br>        <span class="hljs-type">BucketManager</span> <span class="hljs-variable">bucketManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BucketManager</span>(auth,cfg);<br>        <span class="hljs-type">FileListing</span> <span class="hljs-variable">fileListing</span> <span class="hljs-operator">=</span> bucketManager.listFiles(bucket, <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">1000</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        FileInfo[] items = fileListing.items;<br>        <span class="hljs-keyword">for</span> (FileInfo info : items)&#123;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="上传文件-UploadController"><a href="#上传文件-UploadController" class="headerlink" title="上传文件 UploadController"></a>上传文件 UploadController</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu.blog.controller;<br><br><span class="hljs-keyword">import</span> com.mszlu.blog.utils.QiniuUtils;<br><span class="hljs-keyword">import</span> com.mszlu.blog.vo.Result;<br><span class="hljs-keyword">import</span> com.qiniu.common.QiniuException;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;upload&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> QiniuUtils qiniuUtils;<br><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">upload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;image&quot;)</span> MultipartFile file)</span>&#123;<br>        <span class="hljs-comment">//原始文件名称 比如 aa.png</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>        <span class="hljs-comment">//唯一的文件名称</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString() + <span class="hljs-string">&quot;.&quot;</span> + StringUtils.substringAfterLast(originalFilename, <span class="hljs-string">&quot;.&quot;</span>);<br>        <span class="hljs-comment">//上传文件 上传到哪呢？ 七牛云 云服务器 按量付费 速度快 把图片发放到离用户最近的服务器上</span><br>        <span class="hljs-comment">// 降低 我们自身应用服务器的带宽消耗</span><br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">upload</span> <span class="hljs-operator">=</span> qiniuUtils.upload(file, fileName);<br>        <span class="hljs-keyword">if</span> (upload)&#123;<br>            <span class="hljs-keyword">return</span> Result.success(QiniuUtils.url + fileName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;上传失败&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">deleteFile</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            qiniuUtils.deleteAll();<br>        &#125; <span class="hljs-keyword">catch</span> (QiniuException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> Result.success(<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="获取ip-IpUtils"><a href="#获取ip-IpUtils" class="headerlink" title="获取ip IpUtils"></a>获取ip IpUtils</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu.blog.utils;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取Ip</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IpUtils</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取IP地址</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 使用Nginx等反向代理软件， 则不能通过request.getRemoteAddr()获取IP地址</span><br><span class="hljs-comment">     * 如果使用了多级反向代理的话，X-Forwarded-For的值并不止一个，而是一串IP地址，X-Forwarded-For中第一个非unknown的有效IP字符串，则为真实IP地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getIpAddr</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>, unknown = <span class="hljs-string">&quot;unknown&quot;</span>, seperator = <span class="hljs-string">&quot;,&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxLength</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ip = request.getHeader(<span class="hljs-string">&quot;x-forwarded-for&quot;</span>);<br>            <span class="hljs-keyword">if</span> (StringUtils.isEmpty(ip) || unknown.equalsIgnoreCase(ip)) &#123;<br>                ip = request.getHeader(<span class="hljs-string">&quot;Proxy-Client-IP&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (StringUtils.isEmpty(ip) || ip.length() == <span class="hljs-number">0</span> || unknown.equalsIgnoreCase(ip)) &#123;<br>                ip = request.getHeader(<span class="hljs-string">&quot;WL-Proxy-Client-IP&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (StringUtils.isEmpty(ip) || unknown.equalsIgnoreCase(ip)) &#123;<br>                ip = request.getHeader(<span class="hljs-string">&quot;HTTP_CLIENT_IP&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (StringUtils.isEmpty(ip) || unknown.equalsIgnoreCase(ip)) &#123;<br>                ip = request.getHeader(<span class="hljs-string">&quot;HTTP_X_FORWARDED_FOR&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (StringUtils.isEmpty(ip) || unknown.equalsIgnoreCase(ip)) &#123;<br>                ip = request.getRemoteAddr();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;IpUtils ERROR &quot;</span>, e);<br>        &#125;<br><br>        <span class="hljs-comment">// 使用代理，则获取第一个IP地址</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(ip) &amp;&amp; ip.length() &gt; maxLength) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> ip.indexOf(seperator);<br>            <span class="hljs-keyword">if</span> (idx &gt; <span class="hljs-number">0</span>) &#123;<br>                ip = ip.substring(<span class="hljs-number">0</span>, idx);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ip;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取ip地址</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getIpAddr</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> HttpContextUtils.getHttpServletRequest();<br>        <span class="hljs-keyword">return</span> getIpAddr(request);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="加密-JWTUtils"><a href="#加密-JWTUtils" class="headerlink" title="加密 JWTUtils"></a>加密 JWTUtils</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu.blog.utils;<br><br><span class="hljs-keyword">import</span> io.jsonwebtoken.Jwt;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.JwtBuilder;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.Jwts;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;<br><span class="hljs-keyword">import</span> org.jasypt.util.text.BasicTextEncryptor;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JWTUtils</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">jwtToken</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456Mszlu!@#$$&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">createToken</span><span class="hljs-params">(Long userId)</span>&#123;<br>        Map&lt;String,Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        claims.put(<span class="hljs-string">&quot;userId&quot;</span>,userId);<br>        <span class="hljs-type">JwtBuilder</span> <span class="hljs-variable">jwtBuilder</span> <span class="hljs-operator">=</span> Jwts.builder()<br>                .signWith(SignatureAlgorithm.HS256, jwtToken) <span class="hljs-comment">// 签发算法，秘钥为jwtToken</span><br>                .setClaims(claims) <span class="hljs-comment">// body数据，要唯一，自行设置</span><br>                .setIssuedAt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()) <span class="hljs-comment">// 设置签发时间</span><br>                .setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>));<span class="hljs-comment">// 一天的有效时间</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> jwtBuilder.compact();<br>        <span class="hljs-keyword">return</span> token;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Object&gt; <span class="hljs-title function_">checkToken</span><span class="hljs-params">(String token)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Jwt</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> Jwts.parser().setSigningKey(jwtToken).parse(token);<br>            <span class="hljs-keyword">return</span> (Map&lt;String, Object&gt;) parse.getBody();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">BasicTextEncryptor</span> <span class="hljs-variable">textEncryptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicTextEncryptor</span>();<br>        <span class="hljs-comment">//加密所需的salt</span><br>        textEncryptor.setPassword(<span class="hljs-string">&quot;mszlu_blog_$#@wzb_&amp;^%$#&quot;</span>);<br>        <span class="hljs-comment">//要加密的数据（数据库的用户名或密码）</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> textEncryptor.encrypt(<span class="hljs-string">&quot;root&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> textEncryptor.encrypt(<span class="hljs-string">&quot;root&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username);<br>        System.out.println(<span class="hljs-string">&quot;password:&quot;</span>+password);<br>        System.out.println(textEncryptor.decrypt(<span class="hljs-string">&quot;29cZ+X9cNmECjbLXT2P/BBZWReVl30NS&quot;</span>));<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="LoginServiceImpl"><a href="#LoginServiceImpl" class="headerlink" title="LoginServiceImpl"></a>LoginServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu.blog.service.impl;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.mszlu.blog.dao.pojo.SysUser;<br><span class="hljs-keyword">import</span> com.mszlu.blog.service.LoginService;<br><span class="hljs-keyword">import</span> com.mszlu.blog.service.SysUserService;<br><span class="hljs-keyword">import</span> com.mszlu.blog.utils.JWTUtils;<br><span class="hljs-keyword">import</span> com.mszlu.blog.vo.ErrorCode;<br><span class="hljs-keyword">import</span> com.mszlu.blog.vo.Result;<br><span class="hljs-keyword">import</span> com.mszlu.blog.vo.params.LoginParam;<br><span class="hljs-keyword">import</span> org.apache.commons.codec.digest.DigestUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LoginService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SysUserService sysUserService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String,String&gt; redisTemplate;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">slat</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mszlu!@#&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(LoginParam loginParam)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 1. 检查参数是否合法</span><br><span class="hljs-comment">         * 2. 根据用户名和密码去user表中查询 是否存在</span><br><span class="hljs-comment">         * 3. 如果不存在 登录失败</span><br><span class="hljs-comment">         * 4. 如果存在 ，使用jwt 生成token 返回给前端</span><br><span class="hljs-comment">         * 5. token放入redis当中，redis  token：user信息 设置过期时间</span><br><span class="hljs-comment">         *  (登录认证的时候 先认证token字符串是否合法，去redis认证是否存在)</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> loginParam.getAccount();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> loginParam.getPassword();<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(account) || StringUtils.isBlank(password))&#123;<br>            <span class="hljs-keyword">return</span> Result.fail(ErrorCode.PARAMS_ERROR.getCode(),ErrorCode.PARAMS_ERROR.getMsg());<br>        &#125;<br>        password = DigestUtils.md5Hex(password + slat);<br>        <span class="hljs-type">SysUser</span> <span class="hljs-variable">sysUser</span> <span class="hljs-operator">=</span> sysUserService.findUser(account,password);<br>        <span class="hljs-keyword">if</span> (sysUser == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> Result.fail(ErrorCode.ACCOUNT_PWD_NOT_EXIST.getCode(),ErrorCode.ACCOUNT_PWD_NOT_EXIST.getMsg());<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> JWTUtils.createToken(sysUser.getId());<br><br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;TOKEN_&quot;</span>+token, JSON.toJSONString(sysUser),<span class="hljs-number">1</span>, TimeUnit.DAYS);<br>        <span class="hljs-keyword">return</span> Result.success(token);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> SysUser <span class="hljs-title function_">checkToken</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(token))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        Map&lt;String, Object&gt; stringObjectMap = JWTUtils.checkToken(token);<br>        <span class="hljs-keyword">if</span> (stringObjectMap == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userJson</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().get(<span class="hljs-string">&quot;TOKEN_&quot;</span> + token);<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(userJson))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">SysUser</span> <span class="hljs-variable">sysUser</span> <span class="hljs-operator">=</span> JSON.parseObject(userJson, SysUser.class);<br>        <span class="hljs-keyword">return</span> sysUser;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">logout</span><span class="hljs-params">(String token)</span> &#123;<br>        redisTemplate.delete(<span class="hljs-string">&quot;TOKEN_&quot;</span>+token);<br>        <span class="hljs-keyword">return</span> Result.success(<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">register</span><span class="hljs-params">(LoginParam loginParam)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 1. 判断参数 是否合法</span><br><span class="hljs-comment">         * 2. 判断账户是否存在，存在 返回账户已经被注册</span><br><span class="hljs-comment">         * 3. 不存在，注册用户</span><br><span class="hljs-comment">         * 4. 生成token</span><br><span class="hljs-comment">         * 5. 存入redis 并返回</span><br><span class="hljs-comment">         * 6. 注意 加上事务，一旦中间的任何过程出现问题，注册的用户 需要回滚</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> loginParam.getAccount();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> loginParam.getPassword();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">nickname</span> <span class="hljs-operator">=</span> loginParam.getNickname();<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(account)<br>                || StringUtils.isBlank(password)<br>                || StringUtils.isBlank(nickname)<br>        )&#123;<br>            <span class="hljs-keyword">return</span> Result.fail(ErrorCode.PARAMS_ERROR.getCode(),ErrorCode.PARAMS_ERROR.getMsg());<br>        &#125;<br>        <span class="hljs-type">SysUser</span> <span class="hljs-variable">sysUser</span> <span class="hljs-operator">=</span>  sysUserService.findUserByAccount(account);<br>        <span class="hljs-keyword">if</span> (sysUser != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> Result.fail(ErrorCode.ACCOUNT_EXIST.getCode(),<span class="hljs-string">&quot;账户已经被注册了&quot;</span>);<br>        &#125;<br>        sysUser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SysUser</span>();<br>        sysUser.setNickname(nickname);<br>        sysUser.setAccount(account);<br>        sysUser.setPassword(DigestUtils.md5Hex(password+slat));<br>        sysUser.setCreateDate(System.currentTimeMillis());<br>        sysUser.setLastLogin(System.currentTimeMillis());<br>        sysUser.setAvatar(<span class="hljs-string">&quot;/static/img/logo.b3a48c0.png&quot;</span>);<br>        sysUser.setAdmin(<span class="hljs-number">1</span>); <span class="hljs-comment">//1 为true</span><br>        sysUser.setDeleted(<span class="hljs-number">0</span>); <span class="hljs-comment">// 0 为false</span><br>        sysUser.setSalt(<span class="hljs-string">&quot;&quot;</span>);<br>        sysUser.setStatus(<span class="hljs-string">&quot;&quot;</span>);<br>        sysUser.setEmail(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-built_in">this</span>.sysUserService.save(sysUser);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> JWTUtils.createToken(sysUser.getId());<br><br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;TOKEN_&quot;</span>+token, JSON.toJSONString(sysUser),<span class="hljs-number">1</span>, TimeUnit.DAYS);<br>        <span class="hljs-keyword">return</span> Result.success(token);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpingBoot常用依赖</title>
    <link href="/2022/11/19/SpingBoot%E5%B8%B8%E7%94%A8%E4%BE%9D%E8%B5%96/"/>
    <url>/2022/11/19/SpingBoot%E5%B8%B8%E7%94%A8%E4%BE%9D%E8%B5%96/</url>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot-常用依赖"><a href="#SpringBoot-常用依赖" class="headerlink" title="SpringBoot 常用依赖"></a>SpringBoot 常用依赖</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependencies&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;<br>        &lt;!-- 排除 默认使用的logback  --&gt;<br>        &lt;exclusions&gt;<br>            &lt;exclusion&gt;<br>                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>                &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;<br>            &lt;/exclusion&gt;<br>        &lt;/exclusions&gt;<br>    &lt;/dependency&gt;<br><br>    &lt;!-- log4j2 --&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;<br>    &lt;/dependency&gt;<br><br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;<br>    &lt;/dependency&gt;<br><br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>    &lt;/dependency&gt;<br><br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>        &lt;scope&gt;test&lt;/scope&gt;<br>    &lt;/dependency&gt;<br><br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;<br>    &lt;/dependency&gt;<br><br><br>    &lt;dependency&gt;<br>        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>        &lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br>        &lt;version&gt;<span class="hljs-number">1.2</span><span class="hljs-number">.76</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br><br>    &lt;dependency&gt;<br>        &lt;groupId&gt;mysql&lt;/groupId&gt;<br>        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>    &lt;/dependency&gt;<br><br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;<br>        &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>    &lt;/dependency&gt;<br><br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;<br>        &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;<br>    &lt;/dependency&gt;<br><br>    &lt;dependency&gt;<br>        &lt;groupId&gt;commons-collections&lt;/groupId&gt;<br>        &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;<br>        &lt;version&gt;<span class="hljs-number">3.2</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;commons-codec&lt;/groupId&gt;<br>        &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;<br>    &lt;/dependency&gt;<br><br>    &lt;dependency&gt;<br>        &lt;groupId&gt;com.baomidou&lt;/groupId&gt;<br>        &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;<br>        &lt;version&gt;<span class="hljs-number">3.4</span><span class="hljs-number">.3</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>        &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;joda-time&lt;/groupId&gt;<br>        &lt;artifactId&gt;joda-time&lt;/artifactId&gt;<br>        &lt;version&gt;<span class="hljs-number">2.10</span><span class="hljs-number">.10</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;<br>        &lt;artifactId&gt;jjwt&lt;/artifactId&gt;<br>        &lt;version&gt;<span class="hljs-number">0.9</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br><br>    &lt;dependency&gt;<br>        &lt;groupId&gt;com.qiniu&lt;/groupId&gt;<br>        &lt;artifactId&gt;qiniu-java-sdk&lt;/artifactId&gt;<br>        &lt;version&gt;[<span class="hljs-number">7.7</span><span class="hljs-number">.0</span>, <span class="hljs-number">7.7</span><span class="hljs-number">.99</span>]&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;com.github.ulisesbocchio&lt;/groupId&gt;<br>        &lt;artifactId&gt;jasypt-spring-boot-starter&lt;/artifactId&gt;<br>        &lt;version&gt;<span class="hljs-number">2.1</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>&lt;!--    &lt;dependency&gt;--&gt;<br>&lt;!--        &lt;groupId&gt;org.apache.rocketmq&lt;/groupId&gt;--&gt;<br>&lt;!--        &lt;artifactId&gt;rocketmq-spring-boot-starter&lt;/artifactId&gt;--&gt;<br>&lt;!--        &lt;version&gt;<span class="hljs-number">2.2</span><span class="hljs-number">.0</span>&lt;/version&gt;--&gt;<br>&lt;!--    &lt;/dependency&gt;--&gt;<br>&lt;/dependencies&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot统一封装返回类型</title>
    <link href="/2022/11/19/SpringBoot%E7%BB%9F%E4%B8%80%E5%B0%81%E8%A3%85%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B/"/>
    <url>/2022/11/19/SpringBoot%E7%BB%9F%E4%B8%80%E5%B0%81%E8%A3%85%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="统一封装Result-类"><a href="#统一封装Result-类" class="headerlink" title="统一封装Result 类"></a>统一封装Result 类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu.blog.vo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> success;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br><br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-keyword">private</span> Object data;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">success</span><span class="hljs-params">(Object data)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-literal">true</span>,<span class="hljs-number">200</span>,<span class="hljs-string">&quot;success&quot;</span>,data);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">fail</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String msg)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-literal">false</span>,code,msg,<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="统一封装返回的错误"><a href="#统一封装返回的错误" class="headerlink" title="统一封装返回的错误"></a>统一封装返回的错误</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu.blog.vo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span>  <span class="hljs-title class_">ErrorCode</span> &#123;<br><br>    PARAMS_ERROR(<span class="hljs-number">10001</span>,<span class="hljs-string">&quot;参数有误&quot;</span>),<br>    ACCOUNT_PWD_NOT_EXIST(<span class="hljs-number">10002</span>,<span class="hljs-string">&quot;用户名或密码不存在&quot;</span>),<br>    TOKEN_ERROR(<span class="hljs-number">10003</span>,<span class="hljs-string">&quot;token不合法&quot;</span>),<br>    ACCOUNT_EXIST(<span class="hljs-number">10004</span>,<span class="hljs-string">&quot;账号已存在&quot;</span>),<br>    NO_PERMISSION(<span class="hljs-number">70001</span>,<span class="hljs-string">&quot;无访问权限&quot;</span>),<br>    SESSION_TIME_OUT(<span class="hljs-number">90001</span>,<span class="hljs-string">&quot;会话超时&quot;</span>),<br>    NO_LOGIN(<span class="hljs-number">90002</span>,<span class="hljs-string">&quot;未登录&quot;</span>),;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br>    <span class="hljs-keyword">private</span> String msg;<br><br>    ErrorCode(<span class="hljs-type">int</span> code, String msg)&#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMsg</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMsg</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot统一错误拦截器</title>
    <link href="/2022/11/19/SpringBoot%E7%BB%9F%E4%B8%80%E9%94%99%E8%AF%AF%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <url>/2022/11/19/SpringBoot%E7%BB%9F%E4%B8%80%E9%94%99%E8%AF%AF%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="统一拦截controller-层的错误"><a href="#统一拦截controller-层的错误" class="headerlink" title="统一拦截controller 层的错误"></a>统一拦截controller 层的错误</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu.blog.handler;<br><br><span class="hljs-keyword">import</span> com.mszlu.blog.vo.Result;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-comment">//对加了@Controller注解的方法进行拦截处理 AOP的实现</span><br><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AllExceptionHandler</span> &#123;<br>    <span class="hljs-comment">//进行异常处理，处理Exception.class的异常</span><br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-meta">@ResponseBody</span> <span class="hljs-comment">//返回json数据</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">doException</span><span class="hljs-params">(Exception ex)</span>&#123;<br>        ex.printStackTrace();<br>        <span class="hljs-keyword">return</span> Result.fail(-<span class="hljs-number">999</span>,<span class="hljs-string">&quot;系统异常&quot;</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot拦截器</title>
    <link href="/2022/11/19/SpringBoot%E4%BA%86%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <url>/2022/11/19/SpringBoot%E4%BA%86%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-创建WebMVCConfig-配置类"><a href="#1-创建WebMVCConfig-配置类" class="headerlink" title="1. 创建WebMVCConfig 配置类"></a>1. 创建WebMVCConfig 配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMVCConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LoginInterceptor loginInterceptor;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br><span class="hljs-comment">//        //跨域配置</span><br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>).allowedOrigins(<span class="hljs-string">&quot;https://blog.mszlu.com&quot;</span>,<span class="hljs-string">&quot;http://blog1.mszlu.com&quot;</span>,<span class="hljs-string">&quot;http://localhost:8080&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        <span class="hljs-comment">//拦截test接口，后续实际遇到需要拦截的接口时，在配置为真正的拦截接口</span><br>        registry.addInterceptor(loginInterceptor)<br>                .addPathPatterns(<span class="hljs-string">&quot;/test&quot;</span>)<br>                .addPathPatterns(<span class="hljs-string">&quot;/comments/create/change&quot;</span>)<br>                .addPathPatterns(<span class="hljs-string">&quot;/articles/publish&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-拦截器-LoginInterceptor"><a href="#2-拦截器-LoginInterceptor" class="headerlink" title="2.拦截器 LoginInterceptor"></a>2.拦截器 LoginInterceptor</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mszlu.blog.handler;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.mszlu.blog.dao.pojo.SysUser;<br><span class="hljs-keyword">import</span> com.mszlu.blog.service.LoginService;<br><span class="hljs-keyword">import</span> com.mszlu.blog.utils.UserThreadLocal;<br><span class="hljs-keyword">import</span> com.mszlu.blog.vo.ErrorCode;<br><span class="hljs-keyword">import</span> com.mszlu.blog.vo.Result;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.method.HandlerMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LoginService loginService;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//在执行controller方法(Handler)之前进行执行</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 1. 需要判断 请求的接口路径 是否为 HandlerMethod (controller方法)</span><br><span class="hljs-comment">         * 2. 判断 token是否为空，如果为空 未登录</span><br><span class="hljs-comment">         * 3. 如果token 不为空，登录验证 loginService checkToken</span><br><span class="hljs-comment">         * 4. 如果认证成功 放行即可</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span> (!(handler <span class="hljs-keyword">instanceof</span> HandlerMethod))&#123;<br>            <span class="hljs-comment">//handler 可能是 RequestResourceHandler springboot 程序 访问静态资源 默认去classpath下的static目录去查询</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;Authorization&quot;</span>);<br><br>        log.info(<span class="hljs-string">&quot;=================request start===========================&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">requestURI</span> <span class="hljs-operator">=</span> request.getRequestURI();<br>        log.info(<span class="hljs-string">&quot;request uri:&#123;&#125;&quot;</span>,requestURI);<br>        log.info(<span class="hljs-string">&quot;request method:&#123;&#125;&quot;</span>,request.getMethod());<br>        log.info(<span class="hljs-string">&quot;token:&#123;&#125;&quot;</span>, token);<br>        log.info(<span class="hljs-string">&quot;=================request end===========================&quot;</span>);<br><br><br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(token))&#123;<br>            <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> Result.fail(ErrorCode.NO_LOGIN.getCode(), <span class="hljs-string">&quot;未登录&quot;</span>);<br>            response.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>            response.getWriter().print(JSON.toJSONString(result));<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-type">SysUser</span> <span class="hljs-variable">sysUser</span> <span class="hljs-operator">=</span> loginService.checkToken(token);<br>        <span class="hljs-keyword">if</span> (sysUser == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> Result.fail(ErrorCode.NO_LOGIN.getCode(), <span class="hljs-string">&quot;未登录&quot;</span>);<br>            response.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>            response.getWriter().print(JSON.toJSONString(result));<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">//登录验证成功，放行</span><br>        <span class="hljs-comment">//我希望在controller中 直接获取用户的信息 怎么获取?</span><br>        UserThreadLocal.put(sysUser);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//如果不删除 ThreadLocal中用完的信息 会有内存泄漏的风险</span><br>        UserThreadLocal.remove();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Django基本使用</title>
    <link href="/2022/10/16/Django%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/10/16/Django%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Django-基本使用"><a href="#Django-基本使用" class="headerlink" title="Django 基本使用"></a>Django 基本使用</h1><h2 id="ORM框架"><a href="#ORM框架" class="headerlink" title="ORM框架"></a><strong>ORM框架</strong></h2><p>O是object，也就类对象的意思，R是relation，翻译成中文是关系，也就是关系数据库中数据表的意思，M是mapping，是映射的意思。在ORM框架中，它帮我们把类和数据表进行了一个映射，可以让我们通过类和类对象就能操作它所对应的表格中的数据。ORM框架还有一个功能，它可以根据我们设计的类自动帮我们生成数据库中的表格，省去了我们自己建表的过程。</p><p>django中内嵌了ORM框架，不需要直接面向数据库编程，而是定义模型类，通过模型类和对象完成数据表的增删改查操作。</p><p>使用django进行数据库开发的步骤如下：</p><ul><li>配置数据库连接信息</li><li>在models.py中定义模型类</li><li>迁移</li><li>通过类和对象完成数据增删改查操作</li></ul><p><em>创建应用</em></p><ul><li><p><em>‘DIRS’: [os.path.join(BASE_DIR,’templates’) ]  #把templates路径加到环境中</em></p></li><li><p><img src="/2022/10/16/Django%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20221016115902060.png" alt="image-20221016115902060"></p></li><li><ul><li></li></ul></li><li><p>&#96;&#96;&#96;python<br>STATIC_URL &#x3D; ‘&#x2F;static&#x2F;‘</p><h1 id="静态文件的路径"><a href="#静态文件的路径" class="headerlink" title="静态文件的路径"></a>静态文件的路径</h1><p>STATICFILES_DIR&#x3D;[<br>os.path.join(BASE_DIR,”static”)<br>]</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sas"><br>  ![image-20221016120013616](Django<span class="hljs-title function_">%E5</span>%9F<span class="hljs-title function_">%BA</span><span class="hljs-title function_">%E6</span>%9C<span class="hljs-title function_">%AC</span><span class="hljs-title function_">%E4</span><span class="hljs-title function_">%BD</span><span class="hljs-title function_">%BF</span><span class="hljs-title function_">%E7</span>%94<span class="hljs-title function_">%A8</span>/image-20221016120013616.png)<br><br>- <br><br>- ```python<br>  # 配置日志<br>  LOGGING = &#123;<br>      <span class="hljs-string">&#x27;version&#x27;</span>: 1,<br>      <span class="hljs-string">&#x27;disable_existing_loggers&#x27;</span>: False,<br>      <span class="hljs-string">&#x27;handlers&#x27;</span>: &#123;<br>          <span class="hljs-string">&#x27;console&#x27;</span>:&#123;<br>              <span class="hljs-string">&#x27;level&#x27;</span>:<span class="hljs-string">&#x27;DEBUG&#x27;</span>,<br>              <span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-string">&#x27;logging.StreamHandler&#x27;</span>,<br>          &#125;,<br>      &#125;,<br>      <span class="hljs-string">&#x27;loggers&#x27;</span>: &#123;<br>          <span class="hljs-string">&#x27;django.db.backends&#x27;</span>: &#123;<br>              <span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;console&#x27;</span>],<br>              <span class="hljs-string">&#x27;propagate&#x27;</span>: True,<br>              <span class="hljs-string">&#x27;level&#x27;</span>:<span class="hljs-string">&#x27;DEBUG&#x27;</span>,<br>          &#125;,<br>      &#125;<br>  &#125;<br>  <br></code></pre></td></tr></table></figure><p><img src="/2022/10/16/Django%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20221016120051765.png" alt="image-20221016120051765"></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python manage.py startapp 应用名称<br></code></pre></td></tr></table></figure><p><strong>初始化配置</strong></p><ol><li>数据库配置</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pymysql <span class="hljs-keyword">import</span> install_as_MySQLdb<br>install_as_MySQLdb()<br></code></pre></td></tr></table></figure><p><img src="/2022/10/16/Django%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20221016120442175.png" alt="image-20221016120442175"></p><ol start="2"><li>注册app</li></ol><p><img src="/2022/10/16/Django%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20221016120513355.png" alt="image-20221016120513355"></p><ol start="3"><li>url 端口映射</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> mainApp.views <span class="hljs-keyword">import</span> index,add<br><br><br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>    path(<span class="hljs-string">&quot;index/&quot;</span>,index),<br>    path(<span class="hljs-string">&quot;add/&quot;</span>,add)<br>]<br></code></pre></td></tr></table></figure><p><img src="/2022/10/16/Django%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20221016120608872.png" alt="image-20221016120608872"></p><ol start="4"><li>渲染函数映射</li></ol><p><img src="/2022/10/16/Django%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20221016120648025.png" alt="image-20221016120648025"></p><h2 id="一、配置"><a href="#一、配置" class="headerlink" title="一、配置"></a><strong>一、配置</strong></h2><p>在settings.py中保存了数据库的连接配置信息，Django默认初始配置使用sqlite数据库。</p><ol><li>使用MySQL数据库首先需要安装驱动程序</li></ol><blockquote><p>pip install PyMySQL</p></blockquote><ol start="2"><li>在Django的工程同名子目录的__init__.py文件中添加如下语句</li></ol><blockquote><p>from pymysql import install_as_MySQLdb</p><p> install_as_MySQLdb()</p></blockquote><p>作用是让Django的<a href="https://so.csdn.net/so/search?q=ORM&spm=1001.2101.3001.7020">ORM</a>能以mysqldb的方式来调用PyMySQL。</p><ol start="3"><li>修改DATABASES配置信息</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 配置数据库</span><br>DATABASES = &#123;<br>    <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>,  <span class="hljs-comment"># 选择数据库引擎</span><br>        <span class="hljs-string">&#x27;POST&#x27;</span>: <span class="hljs-number">3306</span>,<br>        <span class="hljs-string">&#x27;HOST&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>        <span class="hljs-string">&#x27;USER&#x27;</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>        <span class="hljs-string">&#x27;PASSWORD&#x27;</span>: <span class="hljs-string">&#x27;admin123&#x27;</span>,<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;film&#x27;</span>  <span class="hljs-comment"># 数据库名称</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、定义模型类"><a href="#二、定义模型类" class="headerlink" title="二、定义模型类"></a>二、定义模型类</h2><ul><li>模型类被定义在”应用&#x2F;models.py”文件中。</li><li>模型类必须继承自Model类，位于包django.db.models中。</li></ul><h3 id="定义数据库模型"><a href="#定义数据库模型" class="headerlink" title="定义数据库模型"></a>定义数据库模型</h3><p>在models.py 文件中定义模型类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(models.Model):<br>    <span class="hljs-built_in">id</span> = models.BigAutoField(primary_key= <span class="hljs-literal">True</span>)<br>    username = models.CharField(max_length=<span class="hljs-number">200</span>,verbose_name=<span class="hljs-string">&quot;用户名&quot;</span>)<br>    password = models.CharField(max_length=<span class="hljs-number">255</span>,verbose_name=<span class="hljs-string">&quot;密码&quot;</span>)<br>    sex = models.CharField(max_length=<span class="hljs-number">255</span>,verbose_name=<span class="hljs-string">&quot;性别&quot;</span>)<br>    <span class="hljs-built_in">type</span> = models.IntegerField(max_length=<span class="hljs-number">1</span>,default=<span class="hljs-number">0</span>)<br><br><br><br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&#x27;user&#x27;</span>  <span class="hljs-comment"># 指明数据库表名</span><br>        verbose_name = <span class="hljs-string">&#x27;用户表&#x27;</span>  <span class="hljs-comment"># 在admin站点中显示的名称</span><br>        verbose_name_plural = verbose_name  <span class="hljs-comment"># 显示的复数名称</span><br></code></pre></td></tr></table></figure><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><ul><li>通过如下命令进入shell</li></ul><p><code> python3 manage.py shell</code></p><ul><li>导入两个模型类，以便后续使用</li></ul><p><code> from books.models import BookInfo,HeroInfo</code></p><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p>  <strong>save方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> date<br><span class="hljs-meta">&gt;&gt;&gt; </span>book = BookInfo(<br><span class="hljs-meta">... </span>btitle=<span class="hljs-string">&#x27;西游记&#x27;</span>,<br><span class="hljs-meta">... </span>bpub_date=date(<span class="hljs-number">2000</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>),<br><span class="hljs-meta">... </span>bread=<span class="hljs-number">10</span>,<br><span class="hljs-meta">... </span>bcomment=<span class="hljs-number">10</span><br><span class="hljs-meta">... </span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>book.save()<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>hero = HeroInfo(<br><span class="hljs-meta">... </span>hname=<span class="hljs-string">&#x27;孙悟空&#x27;</span>,<br><span class="hljs-meta">... </span>hgender=<span class="hljs-number">160</span>,<br><span class="hljs-meta">... </span>hbook=book<br><span class="hljs-meta">... </span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>hero.save()<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>hero2 = HeroInfo(<br><span class="hljs-meta">... </span>hname=<span class="hljs-string">&#x27;猪八戒&#x27;</span>,<br><span class="hljs-meta">... </span>hgender=<span class="hljs-number">150</span>,<br><span class="hljs-meta">... </span>hbook_id=book.<span class="hljs-built_in">id</span><br><span class="hljs-meta">... </span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>hero2.save()<br><br></code></pre></td></tr></table></figure><p><strong>Create方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>HeroInfo.objects.create(<br><span class="hljs-meta">... </span>hname=<span class="hljs-string">&#x27;沙悟净&#x27;</span>,<br><span class="hljs-meta">... </span>hgender=<span class="hljs-number">140</span>,<br><span class="hljs-meta">... </span>hbook=book<br><span class="hljs-meta">... </span>)<br>&lt;HeroInfo: 沙悟净&gt;<br><br></code></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><ul><li><h4 id="save"><a href="#save" class="headerlink" title="save"></a>save</h4> <strong>修改模型类对象的属性，然后执行save方法</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">hero = HeroInfo.objects.get(hname=<span class="hljs-string">&#x27;猪八戒&#x27;</span>)<br>hero.hname = <span class="hljs-string">&#x27;猪悟能&#x27;</span><br>hero.save()<br><br></code></pre></td></tr></table></figure><ul><li><h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4></li></ul><p> <strong>使用模型类.objects.filter().update(),会返回受影响的行数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">HeroInfo.objects.<span class="hljs-built_in">filter</span>(hname=<span class="hljs-string">&#x27;沙悟净&#x27;</span>).update(hname=<span class="hljs-string">&#x27;沙僧&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><strong>模型类对象delete</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">hero = HerInfo.objects.get(<span class="hljs-built_in">id</span>=<span class="hljs-number">12</span>)<br>hero.save()<br><br></code></pre></td></tr></table></figure><p><strong>模型类.objects.filter().delete()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">hero = HerInfo.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=<span class="hljs-number">13</span>).delete()<br><br></code></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul><li>get查询单一结果，如果不存在会抛出模型类.DoesNotExist异常。</li><li>all查询多个结果</li><li>count查询结果数量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> books.models <span class="hljs-keyword">import</span> BookInfo,HeroInfo<br><span class="hljs-meta">&gt;&gt;&gt; </span>BookInfo.objects.<span class="hljs-built_in">all</span>()<br>&lt;QuerySet [&lt;BookInfo: 射雕英雄传&gt;, &lt;BookInfo: 天龙八部&gt;, &lt;BookInfo: 笑傲江湖&gt;, &lt;BookInfo: 雪山飞狐&gt;, &lt;BookInfo: 西游记&gt;]&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>book = BookInfo.objects.get(btitle=<span class="hljs-string">&#x27;西游记&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>book.<span class="hljs-built_in">id</span><br><span class="hljs-number">5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>BookInfo.objects.get(<span class="hljs-built_in">id</span>=<span class="hljs-number">3</span>)<br>&lt;BookInfo: 笑傲江湖&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>BookInfo.objects.get(pk=<span class="hljs-number">3</span>)<br>&lt;BookInfo: 笑傲江湖&gt;<br><br></code></pre></td></tr></table></figure><ol start="5"><li><strong>过滤查询</strong></li></ol><p>实现SQL中的where功能，包括</p><ul><li>filter过滤出多个结果</li><li>exclude排除掉符合条件剩下的结果</li><li>get过滤单一结果</li></ul><p>对于过滤条件的使用，上述三个方法相同，故仅以filter进行讲解</p><p>过滤条件的表达语法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">属性名称__比较运算符=值<br><span class="hljs-comment"># 属性名称和比较运算符间使用两个下划线，所以属性名不能包括多个下划线</span><br><br></code></pre></td></tr></table></figure><p><strong>相等</strong></p><p>exact: 表示判等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">BookInfo.objects.<span class="hljs-built_in">filter</span>(id__exact=<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">#可简写为：</span><br>BookInfo.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure><p><strong>模糊查询</strong></p><p>contains:是否包含</p><p> &#96;说明:如果要包含%无需转义，直接写即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">BookInfo.objects.<span class="hljs-built_in">filter</span>(btitle__contains=<span class="hljs-string">&#x27;传&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>startswith、endswith:以指定值开头或者结尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">BookInfo.objects.<span class="hljs-built_in">filter</span>(btitle__endswith=<span class="hljs-string">&#x27;部&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p><code>注意：以上运算符都区分大小写，在这些运算符前加上i表示不区分大小写，如iexact、icontains、istartswith、iendswith.</code></p><p><strong>空查询</strong></p><p>isnull:是否为null</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">BookInfo.objects.<span class="hljs-built_in">filter</span>(btitle_isnull=<span class="hljs-literal">False</span>)<br><br></code></pre></td></tr></table></figure><p><strong>范围查询</strong></p><p>in:是否包含在范围内。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">BookInfo.objects.<span class="hljs-built_in">filter</span>(id__in=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>])<br></code></pre></td></tr></table></figure><p><strong>比较查询</strong></p><ul><li><strong>gt</strong> 大于 (greater then)</li><li><strong>gte</strong> 大于等于 (greater then equal)</li><li><strong>lt</strong> 小于 (less then)</li><li><strong>lte</strong> 小于等于 (less then equal)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">BookInfo.objects.<span class="hljs-built_in">filter</span>(id__gt=<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p><strong>不等于的运算符，使用exclude()过滤器。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">BookInfo.objects.exclude(<span class="hljs-built_in">id</span>=<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p><strong>日期查询</strong></p><p><strong>year、month、day、week_day、hour、minute、second：对日期时间类型的属性进行运算。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">BookInfo.objects.<span class="hljs-built_in">filter</span>(bpub_date__year=<span class="hljs-number">1980</span>)<br></code></pre></td></tr></table></figure><p>查询1980年1月1日后发表的图书。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">BookInfo.objects.<span class="hljs-built_in">filter</span>(bpub_date__gt=date(<span class="hljs-number">1990</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br><br></code></pre></td></tr></table></figure><p><strong>F对象</strong></p><p><strong>之前的查询都是对象的属性与常量值比较，两个属性怎么比较呢?</strong></p><p>使用F对象，被定义在<a href="https://so.csdn.net/so/search?q=Django&spm=1001.2101.3001.7020">Django</a>.db.models。</p><p>语法如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">F(属性名)<br></code></pre></td></tr></table></figure><p>查询阅读量大于等于评论量的图书</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db.models.<span class="hljs-keyword">import</span> F<br><br>BookInfo.objects.<span class="hljs-built_in">filter</span>(bread__gte=F(<span class="hljs-string">&#x27;bcomment&#x27;</span>))<br><br></code></pre></td></tr></table></figure><p>可以在F对象上使用算数运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">BookInfo.objects.<span class="hljs-built_in">filter</span>(bread__gt = F(<span class="hljs-string">&#x27;bcomment&#x27;</span>)*<span class="hljs-number">2</span>)<br><br></code></pre></td></tr></table></figure><p><strong>Q对象</strong></p><p>多个过滤器逐个调用表示逻辑与关系，同sql语句中where部分的and关键字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">BookInfo.objects.<span class="hljs-built_in">filter</span>(bread__gt=<span class="hljs-number">20</span>,id__lt=<span class="hljs-number">3</span>)<br><br><span class="hljs-comment">#||</span><br><span class="hljs-comment"># 查询阅读量大于20，并且编号小于3的图书</span><br><br>BookInfo.objects.<span class="hljs-built_in">filter</span>(bread__gt=<span class="hljs-number">20.</span><span class="hljs-built_in">filter</span>(id__lt=<span class="hljs-number">3</span>))<br><br></code></pre></td></tr></table></figure><p><strong>如果需要实现逻辑或or的查询，需要使用Q()对象结合|运算符</strong>，Q对象被义在django.db.models中。</p><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Q(属性名__运算符=值)<br></code></pre></td></tr></table></figure><p>例：查询阅读量大于20，并且编号小于3的图书，改写为Q对象如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db.models <span class="hljs-keyword">import</span> Q<br><br>BookInfo.objects.<span class="hljs-built_in">filter</span>(Q(bread__gt=<span class="hljs-number">20</span>)|Q(id__lt=<span class="hljs-number">3</span>))<br><br></code></pre></td></tr></table></figure><p>Q对象可以使用&amp;、|连接，&amp;表示逻辑与，|表示逻辑或。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">BookInfo.objects.<span class="hljs-built_in">filter</span>(Q(bread__gt=<span class="hljs-number">20</span>) | Q(pk__lt=<span class="hljs-number">3</span>))<br><span class="hljs-comment"># 查询阅读量大于20，或编号小于3的图书，只能使用Q对象实现</span><br></code></pre></td></tr></table></figure><p>Q对象前可以使用~操作符，表示非not。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">BookInfo.objects.<span class="hljs-built_in">filter</span>(~Q(pk=<span class="hljs-number">3</span>))<br><span class="hljs-comment"># 查询编号不等于3的图书。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React学习笔记——Hooks中useStore、useDispatch和useSelector的基础介绍和使用,以及两者替代connect</title>
    <link href="/2022/10/15/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Hooks%E4%B8%ADuseStore%E3%80%81useDispatch%E5%92%8CuseSelector%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8-%E4%BB%A5%E5%8F%8A%E4%B8%A4%E8%80%85%E6%9B%BF%E4%BB%A3connect/"/>
    <url>/2022/10/15/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Hooks%E4%B8%ADuseStore%E3%80%81useDispatch%E5%92%8CuseSelector%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8-%E4%BB%A5%E5%8F%8A%E4%B8%A4%E8%80%85%E6%9B%BF%E4%BB%A3connect/</url>
    
    <content type="html"><![CDATA[<h1 id="React学习笔记——Hooks中useStore、useDispatch和useSelector的基础介绍和使用-以及两者替代connect"><a href="#React学习笔记——Hooks中useStore、useDispatch和useSelector的基础介绍和使用-以及两者替代connect" class="headerlink" title="React学习笔记——Hooks中useStore、useDispatch和useSelector的基础介绍和使用,以及两者替代connect"></a>React学习笔记——Hooks中useStore、useDispatch和useSelector的基础介绍和使用,以及两者替代connect</h1><p>在 React 的世界中，有容器组件和 UI 组件之分，在 React Hooks 出现之前，UI 组件我们可以使用函数，无状态组件来展示 UI，而对于容器组件，函数组件就显得无能为力，我们依赖于类组件来获取数据，处理数据，并向下传递参数给 UI 组件进行渲染。使用 React Hooks 相比于从前的类组件有以下几点好处：</p><ol><li>代码可读性更强，原本同一块功能的代码逻辑被拆分在了不同的生命周期函数中，容易使开发者不利于维护和迭代，通过 React Hooks 可以将功能代码聚合，方便阅读维护</li><li>组件树层级变浅，在原本的代码中，我们经常使用 HOC&#x2F;render props 等方式来复用组件的状态，增强功能等，无疑增加了组件树层数及渲染，而在 React Hooks 中，这些功能都可以通过强大的自定义的 Hooks 来实现</li></ol><p>Hook 是 React 16.8.0 版本增加的新特性，可以在<code>函数组件中使用 state</code>以及<code>其他的 React 特性</code>。<br>Hooks只能在函数式组件中使用，既无状态组件（所有钩子在用时都要先引入）</p><h2 id="1、Hook-使用规则"><a href="#1、Hook-使用规则" class="headerlink" title="1、Hook 使用规则"></a>1、Hook 使用规则</h2><p>Hook 就是JavaScript 函数，但是使用它们会有两个额外的规则：<br>1、只能在函数最外层调用 Hook。不要在循环、条件判断或者嵌套函数（子函数）中调用。<br>2、只能在 React 的函数组件中调用 Hook。不要在其他 JavaScript 函数中调用。<br>3、在多个useState()调用中，渲染之间的调用顺序必须相同。</p><h2 id="2、useDispatch"><a href="#2、useDispatch" class="headerlink" title="2、useDispatch"></a>2、useDispatch</h2><p>使用这个 hook 能<code>得到 redux store 的 dispatch 方法引用</code>，通常用于<code>“手动” dispatch action</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>()<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useDispatch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">CounterComponent</span> = (<span class="hljs-params">&#123; value &#125;</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>()<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &#x27;increment-counter&#x27; &#125;)&#125;&gt;</span><br><span class="language-xml">        Increment counter</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><p>之前在使用 connect 的时候，我们通常使用mapDispatchToProps和actionCreator封装一下dispatch action的过程，然而使用 useDispatch()的时候却需要“手动”地调用 dispatch()方法。</p><p>然而，实际上 Redux Hooks 曾经提供一个叫 useActions()的 API 起到类似于 mapDispatchToProps 和 bindActionCreators 的作用，但后来被 Dan Abramov （React和Redux的核心成员）毙掉了，主要有两个原因：</p><ul><li>避免将 actionCreator 的 dependency 也不得不加进 useActions() 中，导致代码冗长（dependency array）</li><li>在 Hooks 的世界中，直接使用 dispatch() 和 actionCreator 让代码更直接。相反，使用类似mapDispatchToProps 和 bindActionCreators 虽然看似缩短了代码量，却让开发者一定程度上丢失了对 redux 整体数据流动的视野和理解</li></ul><h2 id="3、useSelector"><a href="#3、useSelector" class="headerlink" title="3、useSelector"></a>3、useSelector</h2><p>组件可以通过<code>useSelector</code>访问store中释放的state数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Provider</span>, useSelector, useDispatch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><br><span class="hljs-keyword">const</span> initialState = &#123; <br>    <span class="hljs-attr">num</span>: <span class="hljs-number">0</span> ,<br>    val : <span class="hljs-number">100</span>,<br>    list : [&#123;<br>        <span class="hljs-attr">key</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span><br>    &#125;,&#123;<br>        <span class="hljs-attr">key</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;李四&#x27;</span><br>    &#125;,&#123;<br>        <span class="hljs-attr">key</span>: <span class="hljs-number">3</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王五&#x27;</span><br>    &#125;,]<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">state, action</span>) =&gt; &#123;<br>    <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;decrement&quot;</span>:<br>            <span class="hljs-keyword">return</span> &#123; ...state, <span class="hljs-attr">num</span>: state.<span class="hljs-property">num</span> - <span class="hljs-number">1</span> &#125;;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;increment&quot;</span>:<br>            <span class="hljs-keyword">return</span> &#123; ...state, <span class="hljs-attr">num</span>: state.<span class="hljs-property">num</span> + <span class="hljs-number">1</span> &#125;;<br>        <span class="hljs-attr">default</span>:<br>        <br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(reducer, initialState);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>---父组件---<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Child1</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child1</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> num = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;--++++--&#x27;</span>,state)<br>        <span class="hljs-keyword">return</span> state.<span class="hljs-property">num</span><br>    &#125;);<br>    <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>();<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>---子组件---<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;increment&quot; &#125;)&#125;&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            Number: &#123;num&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;decrement&quot; &#125;)&#125;&gt;-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br><br></code></pre></td></tr></table></figure><p>useSelector() 这个 hook，它的参数就是 selector 并返回 selector 的计算结果。<br>最重要的是，这个 hook 会订阅 redux store(牢记这点)，所以每次 redux state有更新，useSelector() 里的 selector 就会重新计算一次，返回新的结果，并重新渲染当前组件。（如下面展示的）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Provider</span>, useSelector, useDispatch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><br><span class="hljs-keyword">const</span> initialState = 同上<br><br><span class="hljs-keyword">const</span> reducer = 同上<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(reducer, initialState);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---父组件---&#x27;</span>),<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>---父组件---<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Child1</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child1</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> num = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> state.<span class="hljs-property">num</span><br>    &#125;);<br>    <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>();<br>    <span class="hljs-keyword">return</span> (<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---子组件---&#x27;</span>),<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>---子组件---<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;increment&quot; &#125;)&#125;&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            Number: &#123;num&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;decrement&quot; &#125;)&#125;&gt;-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br><br></code></pre></td></tr></table></figure><h2 id="4、useStore"><a href="#4、useStore" class="headerlink" title="4、useStore"></a>4、useStore</h2><p>关于这个api，我也是没怎么用过，不过上网查了一波，就如字面上的意思，useStore() 这个 Hook 直接获取到了 Redux store 的引用，所以可以使用到更“底层”的API 如：</p><ul><li><code>getState()</code></li><li><code>dispatch(action)</code></li><li><code>subscribe(listener)</code></li><li><code>replaceReducer(nextReducer)</code></li></ul><p>其中，useStore().dispatch 其实等同于 useDispatch()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>();<br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useStore</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;they are equal: &quot;</span> + (dispatch === store.<span class="hljs-property">dispatch</span>)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>store 中的 getState()方法，调用它可以得到当前 redux state，但它并不等同于 useSelector()。</p><p>最大的区别在于： getState()只会获得当前时刻的 redux state，之后state 更新并不会导致这个方法被再次调用，也不会导致重新渲染了。</p><ol><li>假如当前组件需要监听 redux state 的变化，并根据 redux state的更新而渲染不同的视图或者有不同行为—— 那么就应该使用 useSelector Hook</li><li>假如当前组件只是为了在 redux state中一次性查询某个数据&#x2F;状态，并不关心（或刻意忽略）之后的更新—— 那么就应该使用 useStore().getState()</li></ol><h2 id="5、两者替代connect"><a href="#5、两者替代connect" class="headerlink" title="5、两者替代connect"></a>5、两者替代connect</h2><p>平时我们使用redux的时候可能使用<code>HOC的</code>形式，<code>mapStateToProps</code>和<code>mapDispatchToProps</code>加强组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> actions <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../actions/actions&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mapStateToProps</span> = store =&gt; (&#123;<br>  <span class="hljs-attr">count</span>: store.<span class="hljs-property">count</span><br>&#125;);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mapDispatchToProps</span> = dispatch =&gt; (&#123;<br>  <span class="hljs-attr">increment</span>: <span class="hljs-function"><span class="hljs-params">count</span> =&gt;</span> <span class="hljs-title function_">dispatch</span>(actions.<span class="hljs-title function_">increment</span>(count)),<br>  <span class="hljs-attr">decrement</span>: <span class="hljs-function"><span class="hljs-params">count</span> =&gt;</span> <span class="hljs-title function_">dispatch</span>(actions.<span class="hljs-title function_">decrement</span>(count))<br>&#125;);<br><br>@<span class="hljs-title function_">connect</span>(mapStateToProps,mapDispatchToProps)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(props);<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123;count, increment, decrement&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>;<br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>The count is &#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> increment(count)&#125;&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> decrement(count)&#125;&gt;-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br>或不用@connect的形式，用下面这种连接<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">connect</span>(mapStateToProps, mapDispatchToProps)(<span class="hljs-title class_">App</span>);<br><br></code></pre></td></tr></table></figure><p>我们也可以使用<code>useDispatch</code>和<code>useSelector</code>来实现类似的需求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; createSelector &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;reselect&#x27;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> actions <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../actions/actions&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>();<br>  <span class="hljs-keyword">const</span> count = <span class="hljs-title function_">useSelector</span>(<span class="hljs-title function_">createSelector</span>(<span class="hljs-function"><span class="hljs-params">store</span> =&gt;</span> store.<span class="hljs-property">count</span>, <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state));<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>The count is &#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(actions.increment(count))&#125;&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(actions.decrement(count))&#125;&gt;-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br><br></code></pre></td></tr></table></figure><p>有的没有在全局引入所有action，可以<code>单独引入不同action并派发</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><span class="hljs-keyword">import</span> &#123; updateTel, updateName &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./action&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> formData = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> state<br>  &#125;)<br>  <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>()<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(&#123;formData&#125;);<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      form: <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">      姓名: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">        dispatch(updateName(e.target.value))</span><br><span class="language-xml">      &#125;&#125;/&gt;</span><br><span class="language-xml">      电话: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;tel&quot;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">        dispatch(updateTel(e.target.value))</span><br><span class="language-xml">      &#125;&#125;/&gt;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>express总结</title>
    <link href="/2022/10/12/express%E6%80%BB%E7%BB%93/"/>
    <url>/2022/10/12/express%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>Express 是一个自身功能极简，完全是由路由和中间件构成一个的 web 开发框架：从本质上来说，一个 Express 应用就是在调用各种中间件。</p><h2 id="2-express与koa的选择"><a href="#2-express与koa的选择" class="headerlink" title="2.express与koa的选择"></a>2.express与koa的选择</h2><blockquote><p>Express</p></blockquote><ul><li>Express 的优点是线性逻辑：路由和中间件完美融合，通过中间件形式把业务逻辑细分，简化，一个请求进来经过一系列中间件处理后再响应给用户，再复杂的业务也是线性了，清晰明了。</li><li>Express 是基于 callback 来组合业务逻辑。Callback 有两大硬伤，一是不可组合，二是异常不可捕获。</li><li>Express 通常会要借助 async、bluebird 等异步库。但即便有了这类异步库，当涉及到共享状态数据时，仍然不得不写出嵌套异步逻辑。</li></ul><blockquote><p>koa</p></blockquote><ul><li>借助 promise 和 generator 的能力，丢掉了 callback，完美解决异步组合问题和异步异常捕获问题。</li><li>koa 把 express 中内置的 router、view 等功能都移除了，使得框架本身更轻量化。</li></ul><blockquote><p>Express 和 Koa 最明显的差别就是 Handler 的处理方法，一个是普通的回调函数，一个是利用生成器函数（Generator Function）来作为响应器。往里头儿说就是 Express 是在同一线程上完成当前进程的所有 HTTP 请求，而 Koa 利用 co 作为底层运行框架，利用 Generator 的特性，实现“协程响应”</p></blockquote><h2 id="3-express搭建简单的本地服务示例"><a href="#3-express搭建简单的本地服务示例" class="headerlink" title="3.express搭建简单的本地服务示例"></a>3.express搭建简单的本地服务示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);           <span class="hljs-comment">//引入express</span><br><span class="hljs-keyword">var</span> app=<span class="hljs-title function_">express</span>();                        <span class="hljs-comment">//初始化app</span><br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;port&#x27;</span>,process.<span class="hljs-property">env</span>.<span class="hljs-property">PORT</span>||<span class="hljs-number">8080</span>);   <span class="hljs-comment">//设置端口号</span><br><br> <span class="hljs-comment">//处理各种请求</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/list&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)&#123;<br>    res.<span class="hljs-title function_">send</span>(req.<span class="hljs-property">url</span>);<br>&#125;)<br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/list&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)&#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;post&#x27;</span>+req.<span class="hljs-property">url</span>);<br>&#125;)<br>app.<span class="hljs-title function_">all</span>(<span class="hljs-string">&#x27;/all&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)&#123;<span class="hljs-comment">//匹配所有方法</span><br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;all&#x27;</span>+req.<span class="hljs-property">url</span>);<br>&#125;)<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)&#123;        <span class="hljs-comment">//处理404页面</span><br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;text/plain&#x27;</span>);<br>  res.<span class="hljs-title function_">status</span>(<span class="hljs-number">404</span>);<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;404-Not Found&#x27;</span>);<br>&#125;)<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">err,req,res,next</span>)&#123;    <span class="hljs-comment">//定制500页面（错误处理）</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err.<span class="hljs-property">stack</span>);<br>    res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;text/plain&#x27;</span>);<br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>);<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;500-server error&#x27;</span>);<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;port&#x27;</span>),<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;      <span class="hljs-comment">//监听端口</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;start on&#x27;</span>+app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;port&#x27;</span>));<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="4-模板解析（动态返回客户端页面，防止重复资源过多）"><a href="#4-模板解析（动态返回客户端页面，防止重复资源过多）" class="headerlink" title="4.模板解析（动态返回客户端页面，防止重复资源过多）"></a>4.模板解析（动态返回客户端页面，防止重复资源过多）</h2><ul><li><p>模板的选择<br>准则：性能（模板引擎要快）、前后两端兼容性好、可读（语法简单）</p></li><li><p><a href="https://www.jianshu.com/p/44039da063d0">ejs模板示例（express配合ejs模板引擎工作）</a></p><p> app.js</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>);<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>,<span class="hljs-string">&#x27;ejs&#x27;</span>)<span class="hljs-comment">//设置模板引擎为ejs</span><br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views&#x27;</span>,./views)<span class="hljs-comment">//设置模板引擎存放的根目录在./views文件夹下(当ejs模板存放在./views文件下时，这个设置是可以注释掉的)</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;请求地址&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">res,req</span>)&#123;<br>    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;文件地址&#x27;</span>,&#123;<span class="hljs-attr">data</span>:realData&#125;)<span class="hljs-comment">//data为绑定到模板中的动态数据（文件地址可以忽略.ejs后缀和./view前缀）</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>views&#x2F;index.ejs中ejs的语法示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;% <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;supplies.<span class="hljs-property">length</span>; i++) &#123; %&gt;  <br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>  </span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;supplies/&lt;%= supplies[i] %&gt;&#x27;</span>&gt;</span>  </span><br><span class="language-xml">                &lt;%= data[i] %&gt;  </span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>  </span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>  <br>    &lt;% &#125; %&gt; <br>&lt;% include header.<span class="hljs-property">ejs</span>%&gt;<span class="hljs-comment">//引入其他模板(组件化)</span><br></code></pre></td></tr></table></figure><h2 id="5-req请求对象"><a href="#5-req请求对象" class="headerlink" title="5.req请求对象"></a>5.req请求对象</h2><p><strong>url的组成</strong></p><ul><li>协议 ： http 、https、file 、ftp 等</li><li>域名： eg： <a href="http://www.baidu.com/">www.baidu.com</a></li><li>端口：http默认80端口、https默认443端口等</li><li>路径：&#x2F;home、index.html等</li><li>查询字符串：?test&#x3D;1&amp;name&#x3D;0（一般用encodingURIComponent()解码）</li><li>信息片段: #history(用于锚点)</li></ul><p><strong>req的属性</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1.</span> req.<span class="hljs-property">params</span>  <br>  一个数组，包含命名过的路由参数<br><span class="hljs-number">2.</span>  req.<span class="hljs-title function_">param</span>()<br>  返回命名的路由参数<br><span class="hljs-number">3.</span> req.<span class="hljs-property">query</span><br>  一个对象，包含以键值对存放的查询字符串参数<br><span class="hljs-number">4.</span> req.<span class="hljs-property">body</span><br>  一个对象，包含post请求发送的数据（需要使用body-parse中间件）<br><span class="hljs-number">5.</span> req.<span class="hljs-property">route</span><br>  关于当前匹配路由的信息<br><span class="hljs-number">6.</span> req.<span class="hljs-property">cookies</span>/req.<span class="hljs-property">signedCookies</span><br>  一个对象,包含从客户端传递过来的cookie值<br><span class="hljs-number">7.</span> req.<span class="hljs-property">headers</span><br>  从客户端接收到的请求头信息<br><span class="hljs-number">8.</span> req.<span class="hljs-title function_">accept</span>([type])<br>  一个简单的方法，用来确定客户端是否接受一个或一组指定的类型<br><span class="hljs-number">9.</span> req.<span class="hljs-property">ip</span><br>  客户端的ip地址<br><span class="hljs-number">10.</span> req.<span class="hljs-property">path</span><br>  请求路径（不包含协议主机端口或查询字符串）<br><span class="hljs-number">11.</span> req.<span class="hljs-property">host</span><br>  主机名<br><span class="hljs-number">12.</span> req.<span class="hljs-property">xhr</span><br>  请求是ajax时返回<span class="hljs-literal">true</span><br><span class="hljs-number">13.</span> req.<span class="hljs-property">secure</span><br>  判断协议是https就返回<span class="hljs-literal">true</span><br><span class="hljs-number">14.</span> req.<span class="hljs-property">url</span><br>  文件路径+查询字符串<br></code></pre></td></tr></table></figure><h2 id="6-res响应对象"><a href="#6-res响应对象" class="headerlink" title="6.res响应对象"></a>6.res响应对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1.</span> res.<span class="hljs-title function_">status</span>(code)<br>设置http的状态码，默认是<span class="hljs-number">200</span>（[状态码详解](<span class="hljs-attr">https</span>:<span class="hljs-comment">//www.jianshu.com/p/bbfbd63ac4f0)）</span><br><span class="hljs-number">2.</span> res.<span class="hljs-title function_">set</span>(name,value)<br>设置响应头，这通常不用手动设置<br><span class="hljs-number">3.</span> res.<span class="hljs-title function_">cookie</span>(name,value,[options])/res.<span class="hljs-title function_">clearCookie</span>(name,[options])<br>设置或清除cookie的值（需要中间件支持）<br><span class="hljs-number">4.</span> res.<span class="hljs-title function_">redirect</span>([status],url);<br>重定向，默认重定向代码是<span class="hljs-number">302</span>(临时重定向)<br><span class="hljs-number">5.</span> res.<span class="hljs-title function_">send</span>(body),res.<span class="hljs-title function_">send</span>(status,body)<br>向客户端发送响应及可选择的状态码。默认内容类型是text/html<br><span class="hljs-number">6.</span> res.<span class="hljs-title function_">json</span>(json),res.<span class="hljs-title function_">json</span>(status,json)<br>向客户端发送json对象或数组，及可选择的状态码<br><span class="hljs-number">7.</span> res.<span class="hljs-title function_">jsonp</span>(json),res.<span class="hljs-title function_">jsonp</span>(status,json)<br>向客户端发送jsonp，及可选择的状态码<br><span class="hljs-number">8.</span> res.<span class="hljs-title function_">type</span>(type)<br>设置content-type信息，相当于res.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;content-type&#x27;</span>,<span class="hljs-string">&#x27;type&#x27;</span>);<br><span class="hljs-number">9.</span> res.<span class="hljs-title function_">formate</span>(object)<br>根据接受的请求头不同发送不同的数据res.<span class="hljs-title function_">formate</span>(&#123;<span class="hljs-string">&#x27;text/plain&#x27;</span>:<span class="hljs-string">&#x27;hi there&#x27;</span>,<span class="hljs-string">&#x27;text/html&#x27;</span>:<span class="hljs-string">&#x27;&lt;i&gt;hi there&lt;i&gt;&#x27;</span>&#125;)<br><span class="hljs-number">10.</span> res.<span class="hljs-title function_">sendFile</span>(path,[option],callback)<br>根据路径读取指定文件，并将内容发送给客户端<br><span class="hljs-number">11.</span>res.<span class="hljs-property">local</span>，res.<span class="hljs-title function_">render</span>(view,[locals],callback)<br>res.<span class="hljs-property">locals</span>是一个对象，包含用于视图渲染的默认上下文（默认一个空对象）<br>res.<span class="hljs-property">render</span>渲染一个视图，并响应给客户端<br></code></pre></td></tr></table></figure><h3 id="7-post请求处理"><a href="#7-post请求处理" class="headerlink" title="7.post请求处理"></a>7.post请求处理</h3><p><strong>表单键值对</strong><br>form表单提交：action 地址、method 提交方式、name value键值对、submit提交按钮</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">use</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)())<br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;url&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)&#123;   <span class="hljs-comment">//www-formdata-urlencoded 形式</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">body</span>)<span class="hljs-comment">//发送的键值对</span><br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;ok&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><ol><li><strong>表单大文件（可以用 <a href="https://www.jianshu.com/p/1b7db57aeec7">formidable</a>上传）</strong></li><li><strong>ajax提交（和表单的处理方式一样）</strong></li></ol><h2 id="8-get请求处理"><a href="#8-get请求处理" class="headerlink" title="8.get请求处理"></a>8.get请求处理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;url&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">query</span>)<span class="hljs-comment">//拿到接收的参数</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">path</span>)<span class="hljs-comment">//拿到请求的路径</span><br>  <span class="hljs-comment">//根据实际情况作出响应</span><br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;ok&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="9-中间件"><a href="#9-中间件" class="headerlink" title="9.中间件"></a>9.中间件</h2><p><strong>概念</strong></p><ul><li>中间件是一种函数的封装方式，具体来说就是封装在程序中处理HTTP请求的功能，实际上，中间件是一个有三个参数的函数：一个请求对象，一个响应对象，一个next函数（还有一种4个参数的形式，用来做错误处理）</li></ul><p><strong>特点</strong></p><ol><li>每个中间件都可以控制流程是否继续进行</li><li>req,res 相同对象</li><li>如果出错了 转交错误处理中间件进行处理 next()函数调用的时候里边添加参数即可</li><li>处理错误的中间件放在最后处理 否则不起作用</li></ol><p><strong>中间件如何加载</strong></p><ul><li><p>路由处理器(app.get app.post等)被看做只处理特定HTTP谓词（GET&#x2F;POST）请求的中间件，也可以将中间件看做可以处理全部HTTP谓词（GET&#x2F;POST）谓词的的路由处理器（基本上等同于app.all，可以处理任何HTTP谓词）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;someUrl.&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;......&#125;) <br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;someUrl.&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;......&#125;) <br>app.<span class="hljs-title function_">all</span>(<span class="hljs-string">&#x27;someUrl.&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;......&#125;) <br></code></pre></td></tr></table></figure></li><li><p>路由处理器第一个参数必须是路径。如果想匹配所有的路径，只需使用 <code>/*</code>  。中间件也可以使用路径作为第一个参数，但是是可选的（如果忽略这个参数，他会匹配所有路径，就像指定了 <code>/*</code>  ）<br> <code>app.use(&#39;someUrl.&#39;,function(req,res,next)&#123;......&#125;)</code></p></li><li><p>路由处理器和中间件的参数中都有回调函数，这个函数有 2个（req，res） 、 3个（req，res，next） 、 4个参数 （err，req，res，next用于错误处理）</p></li><li><p>如果不调用next(),管道就会停止，也不会再有处理器或者中间件做后续处理。如果你不调用next()，则应该发送一个响应到客户端（res.send()、res.json() 、res.render()等）；如果不这样做，客户端会被挂起最终导致超时。</p></li><li><p>如果调用了next()，就不要再发送响应到客户端。</p></li></ul><p><strong>实例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> app=<span class="hljs-title function_">express</span>();<br><span class="hljs-comment">//中间件</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<span class="hljs-comment">//可以传路径也可以不传路径</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;all&#x27;</span>);<br>  <span class="hljs-title function_">next</span>();<span class="hljs-comment">//这里不调用next后边的中间件不会执行</span><br>&#125;)<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/a&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;/a 路由停止&#x27;</span>)<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>&#125;)<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/a&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;/a 不会调用&#x27;</span>)<br>&#125;)<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/b&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;/b 路由传递&#x27;</span>)<br>  <span class="hljs-title function_">next</span>();<br>&#125;)<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;除了a都打印&#x27;</span>);<br>  <span class="hljs-title function_">next</span>();<br>&#125;)<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/b&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;bbb&#x27;</span>);<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;b失败&#x27;</span>)<br>&#125;)<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/b&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">err,req,res,next</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b接收错误&#x27;</span>);<br>  <span class="hljs-title function_">next</span>(err);<br>&#125;)<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/c&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">err,req</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ccc&#x27;</span>);<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;c失败&#x27;</span>)<br>&#125;)<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/c&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">err,req,res,next</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;c错误传递&#x27;</span>);<br>  <span class="hljs-title function_">next</span>(err);<br>&#125;)<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">err,req,res,next</span>)&#123;<span class="hljs-comment">//用来处理上边的中间件中抛出的错误</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;服务器错误&#x27;</span>);<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-number">500</span>)<br>&#125;)<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;未找到路由&#x27;</span>);<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-number">404</span>)<br>&#125;)<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&#x27;8080&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>常用的中间件</strong></p><ol><li>body-parser</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">安装：npm install body-parser --save<br><span class="hljs-keyword">const</span> bodyParser=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<span class="hljs-comment">//引入</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">bodyParser</span>())<span class="hljs-comment">//使用</span><br></code></pre></td></tr></table></figure><ol start="2"><li>cookie-parser</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">安装：npm install cookie-parser --save<br><span class="hljs-keyword">const</span> cookieParser=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<span class="hljs-comment">//引入</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cookieParser</span>(秘钥放在这里))<span class="hljs-comment">//使用</span><br></code></pre></td></tr></table></figure><ol start="3"><li>cookie-session提供cookie存储的会话支持，一定要把他连在cookie-parser后面连入</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">安装：npm install cookie-session --save<br><span class="hljs-keyword">const</span> cookieParser=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<span class="hljs-comment">//引入</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cookieParser</span>(秘钥放在这里))<span class="hljs-comment">//使用</span><br></code></pre></td></tr></table></figure><ol start="4"><li>express-session提供会话ID（存在cookie里）的会话支持。默认存在内存里，不适用于生产环境，并且可配置为使用数据库存储。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">安装：npm install express-session --save<br><span class="hljs-keyword">const</span> expressSession=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<span class="hljs-comment">//引入</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">expressSession</span>())<span class="hljs-comment">//使用</span><br></code></pre></td></tr></table></figure><ol start="5"><li>static 返回静态文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;public&#x27;</span>))<span class="hljs-comment">//public是静态文件的根目录</span><br><span class="hljs-attr">http</span>:<span class="hljs-comment">//localhost:3000/images/kitten.jpg//请求的是public/images/kitten.jpg文件</span><br></code></pre></td></tr></table></figure><ol start="6"><li>csurf 防范跨域请求伪造（CSRF）攻击，因为它要使用会话，所以必须放在express-session中间件的后面。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">安装：npm install csurf  --save<br><span class="hljs-keyword">const</span> csurf =<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;csurf &#x27;</span>)<span class="hljs-comment">//引入</span><br>app.<span class="hljs-title function_">use</span>(csurf ())<span class="hljs-comment">//使用</span><br></code></pre></td></tr></table></figure><ol start="7"><li>morgan(提供自动日志纪录支持，所有请求都会被纪录)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">安装：npm install morgan--save<br><span class="hljs-keyword">const</span> morgan=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;morgan&#x27;</span>)<span class="hljs-comment">//引入</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">morgan</span>())<span class="hljs-comment">//使用</span><br></code></pre></td></tr></table></figure><h6 id="Connect"><a href="#Connect" class="headerlink" title="Connect"></a>Connect</h6><p>在express4.0版本之前，express捆绑了Connect，它包含了大量的中间件，使很多中间件看起来像express的一部分，显得臃肿，所以4.0以后Connect从express中移除了，所以4.0以后的中间件大部分是需要自己手动安装的。</p><ul><li>Connect中的中间件大部分是很基础的（源码很重要），现在也可以手动安装来使用<br> <code>npm install connect --save</code></li></ul><h2 id="10-路由"><a href="#10-路由" class="headerlink" title="10.路由"></a>10.路由</h2><p>路由参数（<a href="https://www.jianshu.com/p/9d7e9e965411">同vue的路由</a>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/list/:name&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br>  <span class="hljs-keyword">if</span>(req.<span class="hljs-property">params</span>.<span class="hljs-property">name</span>)&#123;<span class="hljs-comment">//拿到路径中name代表的值</span><br>    res.<span class="hljs-title function_">send</span>(req.<span class="hljs-property">params</span>.<span class="hljs-property">name</span>)<span class="hljs-comment">//把name代表的值发送给客户端</span><br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_">next</span>()<span class="hljs-comment">//如果没有name路径就往下传递</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>多个路由参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/list/:city/:name&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">params</span>.<span class="hljs-property">city</span>)<span class="hljs-comment">//拿到city参数</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">params</span>.<span class="hljs-property">name</span>)<span class="hljs-comment">//拿到name参数</span><br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-comment">//响应客户端</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>路由设计</strong></p><ul><li>原理</li></ul><ol><li>给路由处理器用命名函数</li><li>把路由放在单独的文件中（router.js）,并根据功能区把路由分开</li><li>路由组织应该是可扩展的（路由增加而不会被搞乱）</li><li>减少重复的代码（可以使用自动化的基于视图的路由处理器）</li></ol><ul><li>组织路由的方式实例</li></ul><p>app.js 服务文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> app=<span class="hljs-title function_">express</span>();<br><span class="hljs-comment">//各种需要使用的中间件</span><br><span class="hljs-keyword">const</span> router=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./controller/router&#x27;</span>)(app);   <span class="hljs-comment">//引入路由文件</span><br>...<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8082</span>);<br></code></pre></td></tr></table></figure><p>.&#x2F;controller&#x2F;router.js 路由文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> main=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./main&#x27;</span>);                  <span class="hljs-comment">//引入路由处理函数文件</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">app</span>)&#123;                  <span class="hljs-comment">//导出所有路由</span><br>  app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,main.<span class="hljs-property">showIndex</span>);<span class="hljs-comment">//首页显示静态资源文件</span><br>  app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/getAllCon&#x27;</span>,main.<span class="hljs-property">getAllCon</span>); <span class="hljs-comment">//获取首页的文章加载</span><br>  app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/getData&#x27;</span>,main.<span class="hljs-property">showdata</span>);<span class="hljs-comment">//首页显示 默认显示最新消息</span><br>  app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/showLogin&#x27;</span>,main.<span class="hljs-property">showLogin</span>);<span class="hljs-comment">//显示登录页</span><br>  app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/exit&#x27;</span>,main.<span class="hljs-property">exit</span>);<span class="hljs-comment">//退出登录</span><br>&#125;<br><br>...<br></code></pre></td></tr></table></figure><p>main.js路由处理函数文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">//各种需要使用的插件，中间件</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">showIndex</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;...&#125;;<span class="hljs-comment">//导出所有的处理函数</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">getAllCon</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;...&#125;;<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">showdata</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;...&#125;;<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">showLogin</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;...&#125;;<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">exit</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;...&#125;<br>...<br></code></pre></td></tr></table></figure><h2 id="11-REST-API-表现层状态转化-接口架构思想"><a href="#11-REST-API-表现层状态转化-接口架构思想" class="headerlink" title="11.REST API(表现层状态转化)接口架构思想"></a>11.REST API(表现层状态转化)接口架构思想</h2><p><strong>说明</strong></p><p>（1）每一个URI代表一种资源；<br>（2）客户端和服务器之间，传递这种资源的某种表现层；<br>（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</p><p><strong>规范的问题</strong></p><ul><li>因为多人开发时，会导致处理请求方式（get、post乱用），接口不统一（接口名写法千差万别），会导致各种状况都有，后期维护是个大问题，再就是请求方式也不对。</li><li>所以RESTFUL API的结构设计就诞生了</li></ul><ol><li>接口命名规范<br>域名：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//将api部署在专用域名下：</span><br><span class="hljs-attr">http</span>:<span class="hljs-comment">//api.example.com</span><br><span class="hljs-regexp">/ /</span>或者将api放在主域名下：<br><span class="hljs-attr">http</span>:<span class="hljs-comment">//www.example.com/api/</span><br></code></pre></td></tr></table></figure><p>版本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">将<span class="hljs-variable constant_">API</span>的版本号放在url中。<br><span class="hljs-attr">http</span>:<span class="hljs-comment">//www.example.com/app/1.0/</span><br><span class="hljs-attr">http</span>:<span class="hljs-comment">//www.example.com/app/1.2/</span><br></code></pre></td></tr></table></figure><p>路径：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">路径表示<span class="hljs-variable constant_">API</span>的具体网址。每个网址代表一种资源。 <br>资源作为网址，网址中不能有动词只能有名词，一般名词要与数据库的表名对应。<br>一般来说，数据库中的表都是同种记录的<span class="hljs-string">&quot;集合&quot;</span>（collection），所以<span class="hljs-variable constant_">API</span>中的名词也应该使用复数。<br><span class="hljs-attr">http</span>:<span class="hljs-comment">//www.example.com/app/1.0/lists</span><br><span class="hljs-attr">http</span>:<span class="hljs-comment">//www.example.com/app/1.0/names</span><br></code></pre></td></tr></table></figure><ol start="2"><li>使用标准的HTTP方法</li></ol><p>使用标准的HTTP方法：对于资源的具体操作类型，由HTTP动词表示。 常用的HTTP动词有四个。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">GET</span>     :从服务器取出资源（一项或多项）<br><span class="hljs-variable constant_">POST</span>    ：在服务器新建资源。<br><span class="hljs-variable constant_">PUT</span>     ：在服务器更新资源。<br><span class="hljs-variable constant_">DELETE</span>  ：从服务器删除资源。<br></code></pre></td></tr></table></figure><p>过滤信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">如果记录数量很多，服务器不可能都将它们返回给用户。<span class="hljs-variable constant_">API</span>应该提供参数，过滤返回结果。<br>eg：<br>?limit=<span class="hljs-number">10</span>：指定返回记录的数量<br>?page=<span class="hljs-number">2</span>&amp;per_page=<span class="hljs-number">100</span>：指定第几页，以及每页的记录数。<br>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。<br></code></pre></td></tr></table></figure><p><strong>示例</strong></p><ul><li>一个URI实现增删改查所有操作<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//CRUD(增删改查) 操作学生用户的接口 /rest/1.0/userinfo</span><br><br><span class="hljs-comment">//增加一个id为1的用户    </span><br>post           /rest/<span class="hljs-number">1.0</span>/userinfo           <span class="hljs-attr">data</span>: &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>&#125;<br><span class="hljs-comment">//删除id为1的用户           </span><br><span class="hljs-keyword">delete</span>         /rest/<span class="hljs-number">1.0</span>/userinfo?id=<span class="hljs-number">1</span><br><span class="hljs-comment">//修改id为1的用户           </span><br>put            /rest/<span class="hljs-number">1.0</span>/userinfo?id=<span class="hljs-number">1</span>      <span class="hljs-attr">data</span>:&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;李四&#x27;</span>&#125;<br><span class="hljs-comment">//查询所有用户           </span><br>get            /rest/<span class="hljs-number">1.0</span>/userinfo<br><span class="hljs-comment">//查询id为1的用户信息 </span><br>get            /rest/<span class="hljs-number">1.0</span>/userinfo?id=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="12-静态资源"><a href="#12-静态资源" class="headerlink" title="12.静态资源"></a>12.静态资源</h2><p>不会基于每个请求而改变的资源</p><p><strong>性能优化</strong></p><ul><li>压缩合并静态资源</li><li>静态资源托管给发布网络<a href="https://www.zhihu.com/question/37353035">CDN</a>，能够启用缓存，根据地理位置进行优化(CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。)</li><li>设置服务器缓存</li></ul><h2 id="13-缓存的几种方式"><a href="#13-缓存的几种方式" class="headerlink" title="13.缓存的几种方式"></a>13.缓存的几种方式</h2><blockquote><p>如果请求的资源 和 它最后一次修改时一样就返回 Status Code 304 Not Modified，浏览器走缓存</p></blockquote><p>last-modified 请求的静态资源最后一次修改的时间 GMT格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//取得最后修改时间</span><br>    <span class="hljs-keyword">var</span> lastModified=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(req.<span class="hljs-property">headers</span>[<span class="hljs-string">&#x27;if-modify-since&#x27;</span>]);<br>    <span class="hljs-comment">//console.log(lastModified)</span><br>    fs.<span class="hljs-title function_">stat</span>(filename,<span class="hljs-keyword">function</span>(<span class="hljs-params">err,stat</span>)&#123;<br>        <span class="hljs-comment">//判断if-modify-since的值是否跟资源的最后修改时间一致</span><br>        <span class="hljs-keyword">if</span>(stat.<span class="hljs-property">mtime</span>.<span class="hljs-title function_">getTime</span>()==lastModified.<span class="hljs-title function_">getTime</span>())&#123;<br>            <span class="hljs-comment">//console.log(lastModified.getTime(),stat.mtime.getTime())</span><br>            res.<span class="hljs-property">status</span>=<span class="hljs-number">304</span>;<br>            res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-number">200</span>,&#123;<span class="hljs-string">&#x27;Last-Modified&#x27;</span>:stat.<span class="hljs-property">mtime</span>.<span class="hljs-title function_">toGMTString</span>()&#125;);<br>            fs.<span class="hljs-title function_">createReadStream</span>(filename).<span class="hljs-title function_">pipe</span>(res);<br>        &#125;<br>    &#125;)<br></code></pre></td></tr></table></figure><p>etag 把请求的静态资源通过摘要算法计算得到的散列值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ifNoneMatch=req.<span class="hljs-property">headers</span>[<span class="hljs-string">&#x27;if-none-match&#x27;</span>];<br>   <span class="hljs-keyword">if</span>(ifNoneMatch==<span class="hljs-title function_">getHash</span>(data))&#123;<br>      res.<span class="hljs-property">status</span>=<span class="hljs-number">304</span>;<br>      res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>   &#125;<span class="hljs-keyword">else</span>&#123;<br>        res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-number">200</span>,&#123;<span class="hljs-string">&#x27;Etag&#x27;</span>:<span class="hljs-title function_">getHash</span>(data)&#125;);<br>       fs.<span class="hljs-title function_">createReadStream</span>(filename).<span class="hljs-title function_">pipe</span>(res);<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>强缓存设计两个响应首部（服务器告诉浏览器缓存一个月，那么浏览器一个月都不会发起请求，除非人为清浏览器的缓存）</p></blockquote><p>expires 静态资源过期时间 浏览器端GMT时间<br>cache-control 缓存多少秒 (单位是秒)</p><blockquote><p>后台express处理expires和Cache-Control方式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> expires=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()+<span class="hljs-number">10</span>*<span class="hljs-number">1000</span>);<br>       res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Expires&#x27;</span>,expires.<span class="hljs-title function_">toUTCString</span>());<br>       res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Cache-Control&#x27;</span>,<span class="hljs-string">&quot;max-age=10&quot;</span>);<br>       res.<span class="hljs-title function_">end</span>(data);<br></code></pre></td></tr></table></figure><h2 id="14-安全"><a href="#14-安全" class="headerlink" title="14.安全"></a>14.安全</h2><h6 id="1-协议https"><a href="#1-协议https" class="headerlink" title="1.协议https"></a>1.协议https</h6><p>https协议基于服务器上的SSL证书，端口默认443</p><h6 id="2-跨站请求伪造（CSRF）攻击（伪造登录的安全数据）"><a href="#2-跨站请求伪造（CSRF）攻击（伪造登录的安全数据）" class="headerlink" title="2.跨站请求伪造（CSRF）攻击（伪造登录的安全数据）"></a>2.跨站请求伪造（CSRF）攻击（伪造登录的安全数据）</h6><p>防范方法：给浏览器传一个唯一的令牌</p><h6 id="3-认证授权（指验证用户身份：像微信认证）"><a href="#3-认证授权（指验证用户身份：像微信认证）" class="headerlink" title="3.认证授权（指验证用户身份：像微信认证）"></a>3.认证授权（指验证用户身份：像微信认证）</h6><h6 id="4-密码强度"><a href="#4-密码强度" class="headerlink" title="4.密码强度"></a>4.密码强度</h6><h6 id="5-第三方认证（面部识别等技术）"><a href="#5-第三方认证（面部识别等技术）" class="headerlink" title="5.第三方认证（面部识别等技术）"></a>5.第三方认证（面部识别等技术）</h6>]]></content>
    
    
    <categories>
      
      <category>Node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vite TS 打包</title>
    <link href="/2022/10/08/vite-TS-%E6%89%93%E5%8C%85/"/>
    <url>/2022/10/08/vite-TS-%E6%89%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h2 id="Vite-Ts-进行打包"><a href="#Vite-Ts-进行打包" class="headerlink" title="Vite+ Ts 进行打包"></a>Vite+ Ts 进行打包</h2><p>在 ts.config 中进行配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><br>&#123;<br>  <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;ESNext&quot;</span>,<br>    <span class="hljs-string">&quot;useDefineForClassFields&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;lib&quot;</span>: [<span class="hljs-string">&quot;DOM&quot;</span>, <span class="hljs-string">&quot;DOM.Iterable&quot;</span>, <span class="hljs-string">&quot;ESNext&quot;</span>],<br>    <span class="hljs-string">&quot;baseUrl&quot;</span>: <span class="hljs-string">&quot;./&quot;</span>,  <span class="hljs-comment">// 这里需要配置</span><br>    <span class="hljs-string">&quot;paths&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;@/*&quot;</span>: [<span class="hljs-string">&quot;./src/*&quot;</span>]  <span class="hljs-comment">// 这里需要配置</span><br>    &#125;,<br>    <span class="hljs-string">&quot;allowJs&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;skipLibCheck&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;esModuleInterop&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;strict&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;module&quot;</span>: <span class="hljs-string">&quot;ESNext&quot;</span>,<br>    <span class="hljs-string">&quot;moduleResolution&quot;</span>: <span class="hljs-string">&quot;Node&quot;</span>,<br>    <span class="hljs-string">&quot;resolveJsonModule&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;isolatedModules&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;noEmit&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;jsx&quot;</span>: <span class="hljs-string">&quot;react-jsx&quot;</span><br>  &#125;,<br> <br>  <span class="hljs-string">&quot;include&quot;</span>: [<span class="hljs-string">&quot;src/**/*.ts&quot;</span>, <span class="hljs-string">&quot;src/**/*.d.ts&quot;</span>, <span class="hljs-string">&quot;src/**/*.tsx&quot;</span>, <span class="hljs-string">&quot;src/**/*.vue&quot;</span>],<br>  <span class="hljs-string">&quot;exclude&quot;</span>: [<span class="hljs-string">&quot;node_modules&quot;</span>]<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vite 跨域处理</title>
    <link href="/2022/10/08/vite-%E8%B7%A8%E5%9F%9F%E5%A4%84%E7%90%86/"/>
    <url>/2022/10/08/vite-%E8%B7%A8%E5%9F%9F%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="vite-中进行跨域处理"><a href="#vite-中进行跨域处理" class="headerlink" title="vite 中进行跨域处理"></a>vite 中进行跨域处理</h2><p>在 tsconfig.json 中进行配置</p><p>server  proxy 进行代理</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vite&quot;</span>;<br><span class="hljs-keyword">import</span> react <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vitejs/plugin-react&quot;</span>;<br><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;path&quot;</span>; <span class="hljs-comment">// 关键代码</span><br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">react</span>()],<br>  <span class="hljs-attr">base</span>: <span class="hljs-string">&quot;./&quot;</span>,<br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-comment">// 关键代码</span><br>      <span class="hljs-string">&quot;@&quot;</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;./src&quot;</span>),<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">server</span>: &#123;<br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&quot;/api&quot;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;http://pic.bizhi360.com&quot;</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">rewrite</span>: <span class="hljs-function">(<span class="hljs-params">path</span>) =&gt;</span> path.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\/api/</span>, <span class="hljs-string">&quot;&quot;</span>), <span class="hljs-comment">// 不可以省略rewrite</span><br>      &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;);<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReactHooks总结</title>
    <link href="/2022/10/06/ReactHooks%E6%80%BB%E7%BB%93/"/>
    <url>/2022/10/06/ReactHooks%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="Hook-的含义"><a href="#Hook-的含义" class="headerlink" title="Hook 的含义"></a>Hook 的含义</h2><p>Hook 这个单词的意思是”钩子”。</p><p><strong>React Hooks 的意思是，组件尽量写成纯函数，如果需要外部功能和副作用，就用钩子把外部代码”钩”进来。</strong> React Hooks 就是那些钩子。</p><p>你需要什么功能，就使用什么钩子。React 默认提供了一些常用钩子，你也可以封装自己的钩子。</p><p>所有的钩子都是为函数引入外部功能，所以 React 约定，钩子一律使用<code>use</code>前缀命名，便于识别。你要使用 xxx 功能，钩子就命名为 usexxx。</p><p><code>四个最常用的钩子。</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">useState</span>()<br><span class="hljs-title function_">useContext</span>()<br><span class="hljs-title function_">useReducer</span>()<br><span class="hljs-title function_">useEffect</span>()<br></code></pre></td></tr></table></figure><h2 id="useState-：状态钩子"><a href="#useState-：状态钩子" class="headerlink" title="useState()：状态钩子"></a>useState()：状态钩子</h2><p><code>useState()</code>用于为函数组件引入状态（state）。纯函数不能有状态，所以把状态放在钩子里面。</p><p>本文前面那个组件类，用户点击按钮，会导致按钮的文字改变，文字取决于用户是否点击，这就是状态。使用<code>useState()</code>重写如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>  <span class="hljs-title function_">Button</span>(<span class="hljs-params"></span>)  &#123;<br>  <span class="hljs-keyword">const</span>  [buttonText, setButtonText] =  <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;Click me,   please&quot;</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>)  &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">setButtonText</span>(<span class="hljs-string">&quot;Thanks, been clicked!&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>  <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span>&#123;buttonText&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>useState()</code>这个函数接受状态的初始值，作为参数，上例的初始值为按钮的文字。该函数返回一个数组，数组的第一个成员是一个变量（上例是<code>buttonText</code>），指向状态的当前值。第二个成员是一个函数，用来更新状态，约定是<code>set</code>前缀加上状态的变量名（上例是<code>setButtonText</code>）。</p><h2 id="useContext-：共享状态钩子"><a href="#useContext-：共享状态钩子" class="headerlink" title="useContext()：共享状态钩子"></a>useContext()：共享状态钩子</h2><p>如果需要在组件之间共享状态，可以使用<code>useContext()</code>。</p><p>现在有两个组件 Navbar 和 Messages，我们希望它们之间共享状态。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><br>&lt;div className=<span class="hljs-string">&quot;App&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span>/&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Messages</span>/&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>第一步就是使用 React Context API，在组件外部建立一个 Context。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">AppContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>(&#123;&#125;);<br></code></pre></td></tr></table></figure><p>组件封装代码如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">AppContext</span>.<span class="hljs-property">Provider</span> value=&#123;&#123;<br>  <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;superawesome&#x27;</span><br>&#125;&#125;&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Messages</span>/&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">AppContext</span>.<span class="hljs-property">Provider</span>&gt;<br></code></pre></td></tr></table></figure><p>上面代码中，<code>AppContext.Provider</code>提供了一个 Context 对象，这个对象可以被子组件共享。</p><p>Navbar 组件的代码如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Navbar</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; username &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">AppContext</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;navbar&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>AwesomeSite<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;username&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码中，<code>useContext()</code>钩子函数用来引入 Context 对象，从中获取<code>username</code>属性。</p><p>Message 组件的代码也类似。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Messages</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; username &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">AppContext</span>)<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;messages&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Messages<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>1 message for &#123;username&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span>useContext is awesome!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer()"></a>useReducer()</h2><p>React 本身不提供状态管理功能，通常需要使用外部库。这方面最常用的库是 Redux。</p><p>Redux 的核心概念是，组件发出 action 与状态管理器通信。状态管理器收到 action 以后，使用 Reducer 函数算出新的状态，Reducer 函数的形式是<code>(state, action) =&gt; newState</code>。</p><p><code>useReducers()</code>钩子用来引入 Reducer 功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">myReducer</span> = (<span class="hljs-params">state: any, action: any</span>) =&gt; &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;countUp&quot;</span>:<br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state,<br>        <span class="hljs-attr">count</span>: state.<span class="hljs-property">count</span> + <span class="hljs-number">1</span>,<br>      &#125;;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> state;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">export</span> &#123; myReducer &#125;;<br><br></code></pre></td></tr></table></figure><p>index.tsx</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; myReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../reducers/myReducer&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ReducersHooks</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 第一个参数 是数据  第二个参数是改变数据的方法</span><br>  <span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(myReducer, &#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;countUp&quot; &#125;)&#125;&gt;+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Count: &#123;state.count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">ReducersHooks</span>;<br><br></code></pre></td></tr></table></figure><h2 id="useEffect-：副作用钩子"><a href="#useEffect-：副作用钩子" class="headerlink" title="useEffect()：副作用钩子"></a>useEffect()：副作用钩子</h2><p><code>useEffect()</code>用来引入具有副作用的操作，最常见的就是向服务器请求数据。以前，放在<code>componentDidMount</code>里面的代码，现在可以放在<code>useEffect()</code>。</p><p><code>useEffect()</code>的用法如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">()  =&gt;</span>  &#123;<br>  <span class="hljs-comment">// Async Action</span><br>&#125;, [dependencies])<br></code></pre></td></tr></table></figure><p>上面用法中，<code>useEffect()</code>接受两个参数。第一个参数是一个函数，异步操作的代码放在里面。第二个参数是一个数组，用于给出 Effect 的依赖项，只要这个数组发生变化，<code>useEffect()</code>就会执行。第二个参数可以省略，这时每次组件渲染时，就会执行<code>useEffect()</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Person</span> = (<span class="hljs-params">&#123; personId &#125;</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [loading, setLoading] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">const</span> [person, setPerson] = <span class="hljs-title function_">useState</span>(&#123;&#125;);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">setLoading</span>(<span class="hljs-literal">true</span>); <br>    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`https://swapi.co/api/people/<span class="hljs-subst">$&#123;personId&#125;</span>/`</span>)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>        <span class="hljs-title function_">setPerson</span>(data);<br>        <span class="hljs-title function_">setLoading</span>(<span class="hljs-literal">false</span>);<br>      &#125;);<br>  &#125;, [personId])<br><br>  <span class="hljs-keyword">if</span> (loading === <span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Loading ...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You&#x27;re viewing: &#123;person.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Height: &#123;person.height&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Mass: &#123;person.mass&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建自己的-Hooks"><a href="#创建自己的-Hooks" class="headerlink" title="创建自己的 Hooks"></a>创建自己的 Hooks</h2><p>上例的 Hooks 代码还可以封装起来，变成一个自定义的 Hook，便于共享。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">usePerson</span> = (<span class="hljs-params">personId</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [loading, setLoading] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">const</span> [person, setPerson] = <span class="hljs-title function_">useState</span>(&#123;&#125;);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">setLoading</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`https://swapi.co/api/people/<span class="hljs-subst">$&#123;personId&#125;</span>/`</span>)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>        <span class="hljs-title function_">setPerson</span>(data);<br>        <span class="hljs-title function_">setLoading</span>(<span class="hljs-literal">false</span>);<br>      &#125;);<br>  &#125;, [personId]);  <br>  <span class="hljs-keyword">return</span> [loading, person];<br>&#125;;<br></code></pre></td></tr></table></figure><p>上面代码中，<code>usePerson()</code>就是一个自定义的 Hook。</p><p>Person 组件就改用这个新的钩子，引入封装的逻辑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Person</span> = (<span class="hljs-params">&#123; personId &#125;</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [loading, person] = <span class="hljs-title function_">usePerson</span>(personId);<br><br>  <span class="hljs-keyword">if</span> (loading === <span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Loading ...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You&#x27;re viewing: &#123;person.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Height: &#123;person.height&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Mass: &#123;person.mass&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="UseCallBack"><a href="#UseCallBack" class="headerlink" title="UseCallBack"></a>UseCallBack</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useCallback, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">CallBackHooks</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-comment">// 需要依赖count 的值才能变化</span><br>  <span class="hljs-keyword">const</span> handleClick = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>);<br>  &#125;, [count]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;count&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          handleClick();</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        ++</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">// React.memo  父组件更新 子组件不会更新</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">React</span>.<span class="hljs-title function_">memo</span>(<span class="hljs-title class_">CallBackHooks</span>);<br><br></code></pre></td></tr></table></figure><h2 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useMemo, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MemoHooks</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [a, setA] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> [b, setB] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> c = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>  &#125;, [a, b]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      MemoHooks</span><br><span class="language-xml">      &#123;a&#125;</span><br><span class="language-xml">      &#123;b&#125;</span><br><span class="language-xml">      &#123;c&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setA(a + 1);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        a++</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setB(b + 1);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        b++</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">MemoHooks</span>;<br><br></code></pre></td></tr></table></figure><p><img src="/2022/10/06/ReactHooks%E6%80%BB%E7%BB%93/image-20221006151738686.png" alt="image-20221006151738686"></p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hooks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Konva Vue绘画板</title>
    <link href="/2022/10/04/Konva-Vue%E7%BB%98%E7%94%BB%E6%9D%BF/"/>
    <url>/2022/10/04/Konva-Vue%E7%BB%98%E7%94%BB%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="使⽤插件-Vue-Konva-（基于Canvas的绘图库）完成基本的绘图功能"><a href="#使⽤插件-Vue-Konva-（基于Canvas的绘图库）完成基本的绘图功能" class="headerlink" title="使⽤插件 Vue-Konva （基于Canvas的绘图库）完成基本的绘图功能"></a>使⽤插件 Vue-Konva （基于Canvas的绘图库）完成基本的绘图功能</h2><ol><li>安装依赖包, main.js 中引⼊</li><li>准备 layer 图层, 模拟 写死 line 线条演⽰</li></ol><p>安装依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i vue-konva konva<br></code></pre></td></tr></table></figure><p>main.js 中引⼊</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueKonva</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-konva&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueKonva</span>)<br></code></pre></td></tr></table></figure><p>.v-stage舞台准备,事件注册</p><h3 id="draw-ts"><a href="#draw-ts" class="headerlink" title="draw.ts"></a>draw.ts</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">v-stage</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:config</span>=<span class="hljs-string">&quot;state.stageConfig&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      @<span class="hljs-attr">mousedown</span>=<span class="hljs-string">&quot;mousedownHandler&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      @<span class="hljs-attr">mouseup</span>=<span class="hljs-string">&quot;mouseupHandler&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      @<span class="hljs-attr">mousemove</span>=<span class="hljs-string">&quot;mousemoveHandler&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">v-layer</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">v-line</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(line, index) in state.lines&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">:config</span>=<span class="hljs-string">&quot;line&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">v-layer</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">v-stage</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; reactive, computed, onMounted, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; useStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useStore</span>();</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> state = <span class="hljs-title function_">reactive</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 画布配置</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">stageConfig</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">width</span>: <span class="hljs-number">800</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">height</span>: <span class="hljs-number">700</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">stroke</span>: <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> store.<span class="hljs-property">state</span>.<span class="hljs-property">draws</span>.<span class="hljs-property">checkedColor</span>),</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">strokeWidth</span>: <span class="hljs-number">5</span>,</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">lines</span>: [&#123; <span class="hljs-attr">stroke</span>: <span class="hljs-string">&quot;#ff00ff&quot;</span>, <span class="hljs-attr">strokeWidth</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">points</span>: [] <span class="hljs-keyword">as</span> any &#125;] <span class="hljs-keyword">as</span> any,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 绘画状态</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">painting</span>: <span class="hljs-literal">false</span>,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-attr">container</span>: any = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">mousedownHandler</span> = (<span class="hljs-params">e: any</span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  state.<span class="hljs-property">painting</span> = <span class="hljs-literal">true</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> newLine = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">stroke</span>: state.<span class="hljs-property">stroke</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">strokeWidth</span>: state.<span class="hljs-property">strokeWidth</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">points</span>: [e.<span class="hljs-property">evt</span>.<span class="hljs-property">layerX</span>, e.<span class="hljs-property">evt</span>.<span class="hljs-property">layerY</span>],</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  state.<span class="hljs-property">lines</span>.<span class="hljs-title function_">push</span>(newLine);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;鼠标按下了&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">mouseupHandler</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  state.<span class="hljs-property">painting</span> = <span class="hljs-literal">false</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;鼠标松开了&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">mousemoveHandler</span> = (<span class="hljs-params">e: any</span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 创建一个新线条</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// console.log(&quot;鼠标移动了&quot;);</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">if</span> (state.<span class="hljs-property">painting</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;鼠标移动了&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">let</span> lastLine = state.<span class="hljs-property">lines</span>[state.<span class="hljs-property">lines</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]; <span class="hljs-comment">//修改最后一个就好</span></span></span><br><span class="language-javascript"><span class="language-xml">    lastLine.<span class="hljs-property">points</span> = lastLine.<span class="hljs-property">points</span>.<span class="hljs-title function_">concat</span>([e.<span class="hljs-property">evt</span>.<span class="hljs-property">layerX</span>, e.<span class="hljs-property">evt</span>.<span class="hljs-property">layerY</span>]);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// console.log(container.value.offsetWidth);</span></span></span><br><span class="language-javascript"><span class="language-xml">  state.<span class="hljs-property">stageConfig</span>.<span class="hljs-property">width</span> = container.<span class="hljs-property">value</span>.<span class="hljs-property">offsetWidth</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// console.log(store.state.draws.checkedColor);</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.container</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f5f5f5</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><h3 id="index-ts"><a href="#index-ts" class="headerlink" title="index.ts"></a>index.ts</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">namespace</span>: <span class="hljs-string">&quot;true&quot;</span>,<br>  <span class="hljs-title function_">state</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">checkedColor</span>: <span class="hljs-string">&quot;#000&quot;</span>,<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">CHANGECOLOR</span>(<span class="hljs-params">state: any, val: string</span>) &#123;<br>      state.<span class="hljs-property">checkedColor</span> = val;<br>      <span class="hljs-comment">// console.log(state.checkedColor);</span><br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-title function_">changecolor</span>(<span class="hljs-params">ctx: any, val: string</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(val);<br>      ctx.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&quot;CHANGECOLOR&quot;</span>, val);<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;&#125;,<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="mian-ts"><a href="#mian-ts" class="headerlink" title="mian.ts"></a>mian.ts</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./style.css&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueKonva</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-konva&quot;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store&quot;</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueKonva</span>);<br>app.<span class="hljs-title function_">use</span>(store);<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);<br><br></code></pre></td></tr></table></figure><h3 id="vuex-管理选择的颜色"><a href="#vuex-管理选择的颜色" class="headerlink" title="vuex 管理选择的颜色"></a>vuex 管理选择的颜色</h3><p>安装vuex </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install vuex -S<br></code></pre></td></tr></table></figure><h3 id="index-ts-1"><a href="#index-ts-1" class="headerlink" title="index.ts"></a>index.ts</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;<br><span class="hljs-keyword">import</span> draws <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./modules/draws&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">createStore</span>(&#123;<br>  <span class="hljs-attr">modules</span>: &#123;<br>    draws,<br>  &#125;,<br>&#125;);<br><br></code></pre></td></tr></table></figure><h3 id="draw-ts-1"><a href="#draw-ts-1" class="headerlink" title="draw.ts"></a>draw.ts</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">namespace</span>: <span class="hljs-string">&quot;true&quot;</span>,<br>  <span class="hljs-title function_">state</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">checkedColor</span>: <span class="hljs-string">&quot;#000&quot;</span>,<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">CHANGECOLOR</span>(<span class="hljs-params">state: <span class="hljs-built_in">any</span>, val: <span class="hljs-built_in">string</span></span>) &#123;<br>      state.<span class="hljs-property">checkedColor</span> = val;<br>      <span class="hljs-comment">// console.log(state.checkedColor);</span><br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-title function_">changecolor</span>(<span class="hljs-params">ctx: <span class="hljs-built_in">any</span>, val: <span class="hljs-built_in">string</span></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(val);<br>      ctx.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&quot;CHANGECOLOR&quot;</span>, val);<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;&#125;,<br>&#125;;<br><br></code></pre></td></tr></table></figure><p><img src="/2022/10/04/Konva-Vue%E7%BB%98%E7%94%BB%E6%9D%BF/1.png"></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>konva</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Websocket io</title>
    <link href="/2022/10/04/Websocket-io/"/>
    <url>/2022/10/04/Websocket-io/</url>
    
    <content type="html"><![CDATA[<h2 id="websocket聊天室，基于socket-io"><a href="#websocket聊天室，基于socket-io" class="headerlink" title="websocket聊天室，基于socket.io"></a>websocket聊天室，基于socket.io</h2><p>传统的开发方式都是前台向后台请求，后台返回数据。</p><p>后台是一个被动者的角色，不会主动给前台去发送数据。</p><p>websocket的出现就是是后台可以主动给前台发送数据。</p><p>这里我使用的是<a href="https://so.csdn.net/so/search?q=socket.io&spm=1001.2101.3001.7020">socket.io</a>这个库来做一个简易的聊天室</p><h3 id="1、首先执行"><a href="#1、首先执行" class="headerlink" title="1、首先执行"></a>1、首先执行</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm init<br></code></pre></td></tr></table></figure><p>进行初始化（一些列的name，author，description等自己设定）</p><p>完成后项目目录下会有一个package.json的文件，里面有一些配置信息</p><h3 id="2、执行如下命令，安装socket-io库"><a href="#2、执行如下命令，安装socket-io库" class="headerlink" title="2、执行如下命令，安装socket.io库"></a>2、执行如下命令，安装socket.io库</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i socket.<span class="hljs-property">io</span> --save-dev<br></code></pre></td></tr></table></figure><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>聊天室<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>聊天室<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入socket.io 文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/socket.io/4.5.2/socket.io.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> socket = io.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;/&#x27;</span>);   <span class="hljs-comment">// 连接io服务器</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;text&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> myMessage = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 点击发送按钮</span></span><br><span class="language-javascript">        btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> mes = text.<span class="hljs-property">value</span>;   <span class="hljs-comment">// 获得输入的消息</span></span><br><span class="language-javascript">            myMessage = mes;</span><br><span class="language-javascript">            socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>);  <span class="hljs-comment">//触发信息</span></span><br><span class="language-javascript">            socket.<span class="hljs-title function_">send</span>(mes);   <span class="hljs-comment">// 把消息发送到服务器</span></span><br><span class="language-javascript">            text.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>;    <span class="hljs-comment">// 清空文本框</span></span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 当服务器广播消息时，触发message事件，消息内容在回调函数中</span></span><br><span class="language-javascript">        socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">mes</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> p = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;p&#x27;</span>);</span><br><span class="language-javascript">            p.<span class="hljs-property">innerText</span> = mes;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (myMessage == mes) &#123;   <span class="hljs-comment">// 如果是自己发送的消息接收到，则将自己发送的消息颜色改为红色，往右偏移</span></span><br><span class="language-javascript">                p.<span class="hljs-property">style</span>.<span class="hljs-property">cssText</span> = <span class="hljs-string">&#x27;color:red;margin-left:200px&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(p);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="javaScript"><a href="#javaScript" class="headerlink" title="javaScript"></a>javaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">var</span> ws = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;socket.io&#x27;</span>);  <span class="hljs-comment">// 引入socket.io</span><br><br><span class="hljs-comment">// 创建一个HTTP服务器</span><br><span class="hljs-comment">// req 请求对象</span><br><span class="hljs-comment">// res 响应对象，收到请求之后作出响应</span><br><span class="hljs-keyword">var</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">var</span> html = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;./client.html&#x27;</span>);    <span class="hljs-comment">// 通过fs同步读取文件client.html,client.html是发送给客户端的文件</span><br>    res.<span class="hljs-title function_">end</span>(html);  <span class="hljs-comment">// 将文件返回给客户端</span><br>&#125;).<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>);<br><br><span class="hljs-keyword">var</span> io = <span class="hljs-title function_">ws</span>(server);    <span class="hljs-comment">// http服务器与ws服务相关联，返回io服务实例</span><br><br><span class="hljs-comment">// 监听用户的连接事件，即当用户连接服务器时</span><br>io.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;connection&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">socket</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 用户连接io服务器时输出‘有新用户进入房间’</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;有新用户进入房间&#x27;</span>);<br><br>    <span class="hljs-comment">// 当有用户发送消息时，接收该消息</span><br>    socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">obj</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 输出该消息（可以不要，这里只是为了方便查看）</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj);<br>        <span class="hljs-comment">// 将接收到的消息发送给所有客户端</span><br>        io.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;message&#x27;</span>, obj);<br>    &#125;);<br><br>    socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);  <span class="hljs-comment">//接受信息</span><br>    &#125;);<br>&#125;)<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WebSocket</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>websocket实现聊天室</title>
    <link href="/2022/10/04/websocket%E5%AE%9E%E7%8E%B0%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
    <url>/2022/10/04/websocket%E5%AE%9E%E7%8E%B0%E8%81%8A%E5%A4%A9%E5%AE%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="初识websocket"><a href="#初识websocket" class="headerlink" title="初识websocket"></a>初识websocket</h2><p>​        在简单了解websocket后，我觉得与http请求类似，不过websocket可以实现在客服端向服务器发一次请求之后，就会建立一个不会中断的通讯，这样实现聊天室就不需要像http请求那样，你需要隔一段时间就向服务器发一次请求，询问是否有发给我的消息。</p><h2 id="H5中使用websocket"><a href="#H5中使用websocket" class="headerlink" title="H5中使用websocket"></a>H5中使用websocket</h2><p> H5中提供了websocket的API，我们可以直接使用。</p><p>主要就是四部曲:</p><p>1、创建websocket（这里有一个问题，我参考资料中websocket服务地址使用的是ws:&#x2F;&#x2F;echo.websocket.org，但我使用的时候报了个错，貌似是被拦截器拦截了，没有找到解决办法，所以直接使用的自己本地创建的websocket的服务地址，本篇后面也会介绍如何创建一个简单的本地的websocket服务）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1、创建websocket</span><br>    <span class="hljs-comment">// 参数：websocket的服务地址</span><br>    <span class="hljs-keyword">var</span> socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&quot;ws://localhost:3000&quot;</span>);<br></code></pre></td></tr></table></figure><p>2、注册一个open事件，在连接创建时触发的事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">// 2、open：当和websocket的服务器连接成功时触发</span><br>      socket.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;open&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">// 将服务器连接成功的信息打印到div中</span><br>        div.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;服务器连接成功了！&quot;</span>;<br>      &#125;);<br></code></pre></td></tr></table></figure><p>3、注册一个send事件，发送数据给服务器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">// 3、 send：发送数据给服务器</span><br>      button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">// 获取输入框中的数据</span><br>        <span class="hljs-keyword">var</span> value = input.<span class="hljs-property">value</span>;<br>        <span class="hljs-comment">// 调用send方法将数据发送给服务器</span><br>        socket.<span class="hljs-title function_">send</span>(value);<br>      &#125;);<br></code></pre></td></tr></table></figure><p>4、注册一个message事件，接收服务器数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">// 4、message：接收服务器数据</span><br>      socket.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 将接收到的数据显示出来</span><br>        div.<span class="hljs-property">innerHTML</span> = e.<span class="hljs-property">data</span>;<br>      &#125;);<br></code></pre></td></tr></table></figure><h2 id="搭建一个本地的websocket服务"><a href="#搭建一个本地的websocket服务" class="headerlink" title="搭建一个本地的websocket服务"></a>搭建一个本地的websocket服务</h2><p>1、首先我们需要安装nodejs-websocket的依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install nodejs-websocket<br></code></pre></td></tr></table></figure><p>2、创建一个server.js,引入nodejs-websocket包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">// 1、 导入nodejs-websocket包</span><br><span class="hljs-keyword">const</span> ws = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;nodejs-WebSocket&quot;</span>);<br></code></pre></td></tr></table></figure><p>3、创建一个server</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建一个server</span><br><span class="hljs-keyword">const</span> server = ws.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">conn</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;有用户连接上来了！&quot;</span>);<br>    <span class="hljs-comment">// 接收到客户端发送的数据时触发</span><br>    conn.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">broadcast</span>(data);<br>    &#125;);<br>    <span class="hljs-comment">// 连接断开时触发</span><br>    conn.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;close&quot;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">broadcast</span>(data);<br>    &#125;);<br>    <span class="hljs-comment">// 异常时触发</span><br>    conn.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;发生异常！&quot;</span>);<br>    &#125;);<br>  &#125;).<span class="hljs-title function_">listen</span>(<span class="hljs-variable constant_">PORT</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;websocket服务器动起来了！监听了端口：&quot;</span> + <span class="hljs-variable constant_">PORT</span>);<br>  &#125;);<br></code></pre></td></tr></table></figure><p><font color="#0000FF">这里有一个需要注意的地方，注册close事件时，也需要将error事件注册，因为发生close事件时，会发生异常，若没有注册error事件，服务器就会停止运行。</font></p><p>4、将接收到的数据发送给所有人（广播）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 广播方法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">broadcast</span>(<span class="hljs-params">msg</span>) &#123;<br>  server.<span class="hljs-property">connections</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    item.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(msg));<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 显示内容 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 输入内容 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入要发送的内容&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 发送按钮 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;input&quot;</span>);</span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;button&quot;</span>);</span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;div&quot;</span>);</span><br><span class="language-javascript"> </span><br><span class="language-javascript">      <span class="hljs-comment">// 1、创建websocket</span></span><br><span class="language-javascript">      <span class="hljs-comment">// 参数：websocket的服务地址</span></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&quot;ws://localhost:3000&quot;</span>);</span><br><span class="language-javascript">      <span class="hljs-comment">// 2、open：当和websocket的服务器连接成功时触发</span></span><br><span class="language-javascript">      socket.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;open&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">        div.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;服务器连接成功了！&quot;</span>;</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">      <span class="hljs-comment">// 3、 send：发送数据给服务器</span></span><br><span class="language-javascript">      button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> value = input.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">        socket.<span class="hljs-title function_">send</span>(value);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">      <span class="hljs-comment">// 4、message：接收服务器数据</span></span><br><span class="language-javascript">      socket.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">        div.<span class="hljs-property">innerHTML</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(e.<span class="hljs-property">data</span>);</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="server-js"><a href="#server-js" class="headerlink" title="server.js"></a>server.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1、 导入nodejs-websocket包</span><br><span class="hljs-keyword">const</span> ws = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;nodejs-WebSocket&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PORT</span> = <span class="hljs-number">3000</span>;<br> <br><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 创建一个server</span><br><span class="hljs-keyword">const</span> server = ws<br>  .<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">conn</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;有用户连接上来了！&quot;</span>);<br>    count++;<br>    conn.<span class="hljs-property">userName</span> = <span class="hljs-string">&quot;用户&quot;</span> + count;<br> <br>    <span class="hljs-title function_">broadcast</span>(conn.<span class="hljs-property">userName</span> + <span class="hljs-string">&quot;进入了聊天室&quot;</span>);<br> <br>    <span class="hljs-comment">// 接收到客户端发送的数据时触发</span><br>    conn.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">broadcast</span>(data);<br>    &#125;);<br>    <span class="hljs-comment">// 连接断开时触发</span><br>    conn.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;close&quot;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>      count--;<br>      <span class="hljs-title function_">broadcast</span>(data);<br>    &#125;);<br>    <span class="hljs-comment">// 异常时触发</span><br>    conn.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;发生异常！&quot;</span>);<br>    &#125;);<br>  &#125;)<br>  .<span class="hljs-title function_">listen</span>(<span class="hljs-variable constant_">PORT</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;websocket服务器动起来了！监听了端口：&quot;</span> + <span class="hljs-variable constant_">PORT</span>);<br>  &#125;);<br> <br><span class="hljs-comment">// 广播方法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">broadcast</span>(<span class="hljs-params">msg</span>) &#123;<br>  server.<span class="hljs-property">connections</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    item.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(msg));<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WebSocket</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vue3+vite2中使用mock</title>
    <link href="/2022/10/03/vue3-vite2%E4%B8%AD%E4%BD%BF%E7%94%A8mock/"/>
    <url>/2022/10/03/vue3-vite2%E4%B8%AD%E4%BD%BF%E7%94%A8mock/</url>
    
    <content type="html"><![CDATA[<p>技术栈：vue3+vite2<br>前言：在vite中使用mock模拟数据，需要借助vite-plugin-mock，分为开发环境和生产环境使用</p><h2 id="一、安装vite-plugin-mock"><a href="#一、安装vite-plugin-mock" class="headerlink" title="一、安装vite-plugin-mock"></a>一、安装vite-plugin-mock</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i mockjs -D<br>npm i vite-plugin-mock -D<br></code></pre></td></tr></table></figure><h2 id="二、创建test-ts"><a href="#二、创建test-ts" class="headerlink" title="二、创建test.ts"></a>二、创建test.ts</h2><p>在src&#x2F;mock&#x2F;source文件夹下新建test.ts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MockMethod</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite-plugin-mock&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [<br>  &#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/api/getUserInfo&#x27;</span>, <span class="hljs-comment">// 注意，这里只能是string格式</span><br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>    <span class="hljs-attr">response</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello world and get mockData&#x27;</span><br>    &#125;<br>  &#125;<br>] <span class="hljs-keyword">as</span> <span class="hljs-title class_">MockMethod</span>[] <span class="hljs-comment">// 这里其实就是定义数据格式的，不了解的同学可以参考typescript的官方文档</span><br></code></pre></td></tr></table></figure><h2 id="三、开发环境的配置"><a href="#三、开发环境的配置" class="headerlink" title="三、开发环境的配置"></a>三、开发环境的配置</h2><p>如果只需要本地开发环境时使用，配置完此处后直接跳到【五、在页面中使用】即可<br>在vite.config.ts中进行配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; viteMockServe &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite-plugin-mock&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">viteMockServe</span>(&#123;<br>      <span class="hljs-attr">mockPath</span>: <span class="hljs-string">&quot;./src/mock/source&quot;</span>, <span class="hljs-comment">// 解析，路径可根据实际变动</span><br>      <span class="hljs-attr">localEnabled</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 此处可以手动设置为true，也可以根据官方文档格式</span><br>    &#125;)<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="四、生产环境的配置"><a href="#四、生产环境的配置" class="headerlink" title="四、生产环境的配置"></a>四、生产环境的配置</h2><p>如果需要npm run build打包后还能使用，则在开发环境配置的基础上增加以下内容<br>1、在src&#x2F;mock下新建index.ts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//  mockProdServer.ts</span><br><span class="hljs-keyword">import</span> &#123; createProdMockServer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite-plugin-mock/es/createProdMockServer&#x27;</span><br><br><span class="hljs-comment">// 逐一导入您的mock.ts文件</span><br><span class="hljs-comment">// 如果使用vite.mock.config.ts，只需直接导入文件</span><br><span class="hljs-comment">// 可以使用 import.meta.glob功能来进行全部导入</span><br><span class="hljs-keyword">import</span> testModule <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./source/login&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">setupProdMockServer</span>(<span class="hljs-params"></span>) &#123; <br><span class="hljs-title function_">createProdMockServer</span>([...testModule]) <br>&#125;<br></code></pre></td></tr></table></figure><p>2、在main.ts里进行注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; setupProdMockServer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/mock&#x27;</span>;<br><span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>  <span class="hljs-title function_">setupProdMockServer</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>3、vite.config.ts个人配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; resolve &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span><br><span class="hljs-keyword">import</span> &#123; viteMockServe &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite-plugin-mock&#x27;</span><br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">viteMockServe</span>(&#123;<br>      <span class="hljs-attr">mockPath</span>: <span class="hljs-string">&quot;./src/mock/source&quot;</span>, <span class="hljs-comment">// 解析，路径可根据实际变动</span><br>      <span class="hljs-attr">localEnabled</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 开发环境</span><br>      <span class="hljs-attr">prodEnabled</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 生产环境设为true，也可以根据官方文档格式</span><br>      <span class="hljs-attr">injectCode</span>: <br>      <span class="hljs-string">` import &#123; setupProdMockServer &#125; from &#x27;./src/mock&#x27;;</span><br><span class="hljs-string">        setupProdMockServer(); `</span>,<br>      <span class="hljs-attr">watchFiles</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 监听文件内容变更</span><br>      <span class="hljs-attr">injectFile</span>: <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;src/main.ts&quot;</span>), <span class="hljs-comment">// 在main.ts注册后需要在此处注入，否则可能报找不到setupProdMockServer的错误</span><br>    &#125;)<br>  ]<br>&#125;)<br><br></code></pre></td></tr></table></figure><h2 id="五、在页面中使用"><a href="#五、在页面中使用" class="headerlink" title="五、在页面中使用"></a>五、在页面中使用</h2><p>在任意一个vue文件中的挂载生命周期里使用即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script lang=<span class="hljs-string">&quot;ts&quot;</span> setup&gt;<br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; onMounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/getUserInfo&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res); &#125;);<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="六、其他内容补充"><a href="#六、其他内容补充" class="headerlink" title="六、其他内容补充"></a>六、其他内容补充</h2><p>个人在vite.config.ts中是使用defineConfig来配置的，所以手动对localEnabled和prodEnabled设置true和false，当然更完善有两种解决方案<br>1、需要安装 <code>npm install cross-env -D</code> 然后更改打包命令为 <code>&quot;dev&quot;: &quot;cross-env USE_MOCK=true vite&quot;</code>，此处不做扩展，有能力的可以尝试下<br>2、按照官方文档的格式，使用UserConfigExport和ConfigEnv，如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; viteMockServe &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite-plugin-mock&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UserConfigExport</span>, <span class="hljs-title class_">ConfigEnv</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (&#123; command &#125;: <span class="hljs-title class_">ConfigEnv</span>): <span class="hljs-function"><span class="hljs-params">UserConfigExport</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// 根据项目配置。可以配置在.env文件</span><br>  <span class="hljs-keyword">let</span> prodMock = <span class="hljs-literal">true</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">plugins</span>: [<br>      <span class="hljs-title function_">viteMockServe</span>(&#123;<br>        <span class="hljs-attr">mockPath</span>: <span class="hljs-string">&#x27;mock&#x27;</span>,<br>        <span class="hljs-attr">localEnabled</span>: command === <span class="hljs-string">&#x27;serve&#x27;</span>,<br>        <span class="hljs-attr">prodEnabled</span>: command !== <span class="hljs-string">&#x27;serve&#x27;</span> &amp;&amp; prodMock,<br>        <span class="hljs-comment">//  这样可以控制关闭mock的时候不让mock打包到最终代码内</span><br>        <span class="hljs-attr">injectCode</span>: <span class="hljs-string">`</span><br><span class="hljs-string">          import &#123; setupProdMockServer &#125; from &#x27;./mockProdServer&#x27;;</span><br><span class="hljs-string">          setupProdMockServer();</span><br><span class="hljs-string">        `</span>,<br>      &#125;),<br>    ],<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="参考链接地址"><a href="#参考链接地址" class="headerlink" title="参考链接地址"></a>参考链接地址</h2><p><a href="https://blog.csdn.net/sinat_35082096/article/details/124470571">打包问题解决参考文档</a></p><p><a href="https://www.jianshu.com/p/8ce94077af2a">其他思路补充参考文档</a></p><p><a href="https://github.com/vbenjs/vite-plugin-mock/blob/main/README.zh_CN.md">vite-plugin-mock官方文档</a></p><p><img src="/2022/10/03/vue3-vite2%E4%B8%AD%E4%BD%BF%E7%94%A8mock/index.png"></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mock</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot+md5实现加密解密登录注册</title>
    <link href="/2022/10/02/springboot-md5%E5%AE%9E%E7%8E%B0%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C/"/>
    <url>/2022/10/02/springboot-md5%E5%AE%9E%E7%8E%B0%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="采用springboot-mybiats-md5实现简单登录注册"><a href="#采用springboot-mybiats-md5实现简单登录注册" class="headerlink" title="采用springboot +mybiats +md5实现简单登录注册"></a>采用springboot +mybiats +md5实现简单登录注册</h2><p>首先pom文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependencies&gt;<br>       &lt;dependency&gt;<br>           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>           &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;<br>       &lt;/dependency&gt;<br><br>       &lt;dependency&gt;<br>           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>           &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>           &lt;scope&gt;test&lt;/scope&gt;<br>       &lt;/dependency&gt;<br><br>       &lt;dependency&gt;<br>           &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;<br>           &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;<br>           &lt;version&gt;<span class="hljs-number">3.6</span>&lt;/version&gt;<br>       &lt;/dependency&gt;<br><br>       &lt;dependency&gt;<br>           &lt;groupId&gt;mysql&lt;/groupId&gt;<br>           &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>           &lt;version&gt;<span class="hljs-number">5.1</span><span class="hljs-number">.47</span>&lt;/version&gt;<br>       &lt;/dependency&gt;<br>       &lt;!--springboot对lombok做支持--&gt;<br>       &lt;dependency&gt;<br>           &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>           &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>           &lt;version&gt;<span class="hljs-number">1.18</span><span class="hljs-number">.6</span>&lt;/version&gt;<br>       &lt;/dependency&gt;<br><br>       &lt;dependency&gt;<br>           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>           &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;<br>       &lt;/dependency&gt;<br><br>       &lt;dependency&gt;<br>           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>           &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>       &lt;/dependency&gt;<br><br>       &lt;dependency&gt;<br>           &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;<br>           &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;<br>           &lt;version&gt;<span class="hljs-number">1.3</span><span class="hljs-number">.0</span>&lt;/version&gt;<br>       &lt;/dependency&gt;<br>   &lt;/dependencies&gt;<br></code></pre></td></tr></table></figure><h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br>#mysql连接<br>spring.datasource.url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/test</span><br>spring.datasource.username=root<br>spring.datasource.password=<span class="hljs-number">123456</span><br>spring.datasource.driver-class-name=com.mysql.jdbc.Driver<br> <br> <br> <br>#编码格式<br>spring.http.encoding.force=<span class="hljs-literal">true</span><br>spring.http.encoding.charset=UTF-<span class="hljs-number">8</span><br>spring.http.encoding.enabled=<span class="hljs-literal">true</span><br> <br> <br> <br>spring.thymeleaf.prefix=classpath:/templates/<br>spring.thymeleaf.suffix=.html<br>spring.thymeleaf.mode=HTML5<br>spring.webflux.<span class="hljs-keyword">static</span>-path-pattern=classpath:/templates/index.html<br>spring.resources.<span class="hljs-keyword">static</span>-locations=classpath:/resources/,classpath:/<span class="hljs-keyword">static</span>/,classpath:/templates/,classpath:/config/<br>mybaits.type-aliases-<span class="hljs-keyword">package</span>=com.kd.springboot_md5<br>mybaits.mapper-locations=classpath:com.kd.springboot_md5.dao<br>spirng.mvc:<span class="hljs-keyword">default</span>-servlet-handler<br>#将themilef的默认缓存禁用，热加载生效<br>spring.thymeleaf.cache=<span class="hljs-literal">false</span><br> <br>#开启驼峰命名<br>mybatis.configuration.mapUnderscoreToCamelCase=<span class="hljs-literal">true</span><br>#引入配置文件<br>mybatis.configuration.map-underscore-to-camel-<span class="hljs-keyword">case</span>=<span class="hljs-literal">true</span><br>#打印sql<br>mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl<br></code></pre></td></tr></table></figure><h2 id="MD5工具类"><a href="#MD5工具类" class="headerlink" title="MD5工具类"></a>MD5工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kd.springboot_md5.common;<br> <br><span class="hljs-keyword">import</span> org.springframework.util.DigestUtils;<br> <br><span class="hljs-keyword">import</span> java.security.MessageDigest;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Kodak</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2019/08/04/10:30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MD5Util</span> &#123;<br><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * MD5加码 生成32位md5码</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">string2MD5</span><span class="hljs-params">(String inStr)</span> &#123;<br><span class="hljs-type">MessageDigest</span> <span class="hljs-variable">md5</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>md5 = MessageDigest.getInstance(<span class="hljs-string">&quot;MD5&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>System.out.println(e.toString());<br>e.printStackTrace();<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><span class="hljs-type">char</span>[] charArray = inStr.toCharArray();<br><span class="hljs-type">byte</span>[] byteArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[charArray.length];<br> <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; charArray.length; i++) &#123;<br>byteArray[i] = (<span class="hljs-type">byte</span>) charArray[i];<br>&#125;<br><span class="hljs-type">byte</span>[] md5Bytes = md5.digest(byteArray);<br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">hexValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; md5Bytes.length; i++) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> ((<span class="hljs-type">int</span>) md5Bytes[i]) &amp; <span class="hljs-number">0xff</span>;<br><span class="hljs-keyword">if</span> (val &lt; <span class="hljs-number">16</span>)&#123;<br>hexValue.append(<span class="hljs-string">&quot;0&quot;</span>);<br>&#125;<br>hexValue.append(Integer.toHexString(val));<br>&#125;<br><span class="hljs-keyword">return</span> hexValue.toString();<br> <br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 加密解密算法 执行一次加密，两次解密</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">convertMD5</span><span class="hljs-params">(String inStr)</span> &#123;<br> <br><span class="hljs-type">char</span>[] a = inStr.toCharArray();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>a[i] = (<span class="hljs-type">char</span>) (a[i] ^ <span class="hljs-string">&#x27;t&#x27;</span>);<br>&#125;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(a);<br><span class="hljs-keyword">return</span> s;<br> <br>&#125;<br> <br><span class="hljs-comment">// 测试主函数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Kodak&quot;</span>;<br>System.out.println(<span class="hljs-string">&quot;原始：&quot;</span> + s);<br>System.out.println(<span class="hljs-string">&quot;MD5后：&quot;</span> + string2MD5(s));<br>System.out.println(<span class="hljs-string">&quot;加密的：&quot;</span> + convertMD5(s));<br>System.out.println(<span class="hljs-string">&quot;解密的：&quot;</span> + convertMD5(convertMD5(s)));<br>&#125;<br> <br> <br> <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kd.springboot_md5.controller;<br> <br><span class="hljs-keyword">import</span> com.kd.springboot_md5.common.MD5Util;<br><span class="hljs-keyword">import</span> com.kd.springboot_md5.dao.UserInfoDao;<br><span class="hljs-keyword">import</span> com.kd.springboot_md5.entity.UserInfo;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br> <br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Kodak</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2019/08/04/10:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;<br><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> UserInfoDao userInfoDao;<br> <br><span class="hljs-meta">@RequestMapping(&quot;register&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">register</span><span class="hljs-params">(UserInfo userInfo)</span>&#123;<br>String pwd=MD5Util.string2MD5(userInfo.getPassword());<br>userInfo.setPassword(pwd);<br>userInfoDao.insertUser(userInfo);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>&#125;<br><span class="hljs-meta">@GetMapping(&quot;toregister&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toregister</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;register.html&quot;</span>;<br>&#125;<br> <br><span class="hljs-meta">@RequestMapping(&quot;login&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(UserInfo userInfo)</span>&#123;<br>String pwd=MD5Util.convertMD5(MD5Util.convertMD5(userInfo.getPassword()));<br>userInfo.setPassword(pwd);<br>userInfoDao.queryUser(userInfo);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="entity实体bean-使用了lombok插件生成get-x2F-set方法"><a href="#entity实体bean-使用了lombok插件生成get-x2F-set方法" class="headerlink" title="entity实体bean 使用了lombok插件生成get&#x2F;set方法"></a>entity实体bean 使用了lombok插件生成get&#x2F;set方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kd.springboot_md5.entity;<br> <br><span class="hljs-keyword">import</span> lombok.Data;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Kodak</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2019/08/04/11:27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><span class="hljs-keyword">private</span> String username;<br><span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="dao-层"><a href="#dao-层" class="headerlink" title="dao 层"></a>dao 层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kd.springboot_md5.dao;<br> <br><span class="hljs-keyword">import</span> com.kd.springboot_md5.entity.UserInfo;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Insert;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br> <br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Kodak</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2019/08/04/11:29</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserInfoDao</span> &#123;<br><span class="hljs-meta">@Select(&quot;select * from user_info where username=#&#123;username&#125; and password=#&#123;password&#125;&quot;)</span><br><span class="hljs-keyword">public</span> List&lt;UserInfo&gt; <span class="hljs-title function_">queryUser</span><span class="hljs-params">(UserInfo userInfo)</span>;<br> <br><span class="hljs-meta">@Insert(&quot;insert into user_info values(null,#&#123;username&#125;,#&#123;password&#125;)&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">(UserInfo userInfo)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot 跨域</title>
    <link href="/2022/10/02/SpringBoot-%E8%B7%A8%E5%9F%9F/"/>
    <url>/2022/10/02/SpringBoot-%E8%B7%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="Configuration-进行跨域处理"><a href="#Configuration-进行跨域处理" class="headerlink" title="@Configuration 进行跨域处理"></a>@Configuration 进行跨域处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .allowedOrigins(<span class="hljs-string">&quot;*&quot;</span>).<br>                allowedMethods(<span class="hljs-string">&quot;*&quot;</span>)<br>                .maxAge(<span class="hljs-number">3600</span>)<br>                .allowCredentials(<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>axios二次封装</title>
    <link href="/2022/10/02/axios%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/"/>
    <url>/2022/10/02/axios%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="安装-axios"><a href="#安装-axios" class="headerlink" title="安装 axios"></a>安装 axios</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i axios<br></code></pre></td></tr></table></figure><p>创建 http 目录</p><p>创建 http.ts 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Qs</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;qs&quot;</span>;   <span class="hljs-comment">//post 方法的参数 QS进行转换</span><br><br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">withCredentials</span> = <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">const</span> http = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;http://127.0.0.1:8080&quot;</span>,<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">6000</span>,<br>  <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//允许跨域</span><br>&#125;);<br><br><span class="hljs-comment">// 响应拦截器</span><br>http.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function">(<span class="hljs-params">response: any</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (response.<span class="hljs-property">status</span> == <span class="hljs-number">200</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(response);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(response);<br>    &#125;<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">error: any</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> error;<br>  &#125;<br>);<br><br><span class="hljs-comment">// 请求拦截</span><br>http.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (config.<span class="hljs-property">method</span> == <span class="hljs-string">&quot;post&quot;</span>) &#123;<br>    config[<span class="hljs-string">&quot;headers&quot;</span>] = &#123;<br>      <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded;charset=utf-8&quot;</span>,<br>    &#125;;<br><br>    <span class="hljs-keyword">return</span> config;<br>  &#125;<br>  <span class="hljs-keyword">return</span> config;<br>&#125;);<br><br><span class="hljs-comment">// 封装GET POST 方法  Promise 异步封装</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">get</span> = (<span class="hljs-params">url: string, params: any</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">reslove: any, reject: any</span>) =&gt;</span> &#123;<br>    http<br>      .<span class="hljs-title function_">get</span>(url, &#123; ...params &#125;)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">reslove</span>(res);<br>      &#125;)<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(err);<br>      &#125;);<br>  &#125;);<br>&#125;;<br><br><span class="hljs-comment">// 封装POST 方法</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">post</span> = (<span class="hljs-params">url: string, data: any = &#123;&#125;</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    http<br>      .<span class="hljs-title function_">post</span>(url, <span class="hljs-title class_">Qs</span>.<span class="hljs-title function_">stringify</span>(&#123; ...data &#125;))<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">resolve</span>(res);<br>      &#125;)<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(err);<br>      &#125;);<br>  &#125;);<br>&#125;;<br><br><br><span class="hljs-comment">//post get 方法的二次封装 </span><br><br><span class="hljs-keyword">export</span> &#123; get, post &#125;;<br><br></code></pre></td></tr></table></figure><p>index.ts文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; get, post &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./http&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">userLogin</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">username: string, password: string</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/user/login&quot;</span>, &#123; username, password &#125;);<br>&#125;;<br><br><span class="hljs-keyword">export</span> &#123; userLogin &#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>封装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flask上传文件</title>
    <link href="/2022/09/25/Flask%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <url>/2022/09/25/Flask%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="Flask上传文件"><a href="#Flask上传文件" class="headerlink" title="Flask上传文件"></a>Flask上传文件</h2><p>在static 文件夹下创建uploads 文件夹 后面上传的文件都放在这个文件夹下面</p><p>使用werkzeug 库，判断文件名是否安全 例如防止文件名是 ..&#x2F;..&#x2F;..&#x2F;a.png</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install werkzeug<br></code></pre></td></tr></table></figure><p>编写上传文件的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os  <span class="hljs-comment">#引入输入输出流</span><br><span class="hljs-keyword">from</span> werkzeug.utils <span class="hljs-keyword">import</span> secure_filename  <span class="hljs-comment"># 文件名称</span><br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request,Response,jsonify<br><span class="hljs-keyword">import</span> requests  <span class="hljs-comment">#模拟浏览器请求</span><br><br><span class="hljs-comment"># 配置 文件上传目录</span><br>app.config[<span class="hljs-string">&quot;UPLOAD_FOLDER&quot;</span>]=<span class="hljs-string">&#x27;static/uploads/&#x27;</span><br><br><span class="hljs-comment"># 配置文件的支持格式</span><br>app.config[<span class="hljs-string">&#x27;ALLOWED_EXTENSIONS&#x27;</span>] = &#123;<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;jpeg&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>&#125;  <span class="hljs-comment">#集合类型</span><br><br><br><span class="hljs-comment"># 判断文件是否支持我们的格式</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">allow_file</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-keyword">in</span> filename <span class="hljs-keyword">and</span> filename.rsplit(<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-number">1</span>)[<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> app.config[<span class="hljs-string">&#x27;ALLOWED_EXTENSIONS&#x27;</span>]   <span class="hljs-comment"># 判断是否有. 或者是否在允许的格式中</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span>,methods=[<span class="hljs-string">&#x27;post&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>():<br>    upload_file = request.files[<span class="hljs-string">&quot;file&quot;</span>]  <span class="hljs-comment"># 获取上传的文件</span><br>    <span class="hljs-comment"># print(upload_file)</span><br>    <span class="hljs-keyword">if</span> upload_file <span class="hljs-keyword">and</span> allow_file(upload_file.filename):  <span class="hljs-comment">#如果上传的文件不为空或者上传的文件的格式允许</span><br>        <span class="hljs-comment"># 文件的名字</span><br>        filename = secure_filename(upload_file.filename)<br>    <span class="hljs-comment"># 保存到指定的目录</span><br>        upload_file.save(os.path.join(app.root_path,app.config[<span class="hljs-string">&quot;UPLOAD_FOLDER&quot;</span>],filename))<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;info is&#x27;</span>+request.form.get(<span class="hljs-string">&#x27;info&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)+<span class="hljs-string">&#x27;. success&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;failed&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/2022/09/25/Flask%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/2.png"></p>]]></content>
    
    
    <categories>
      
      <category>Flask</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript学习</title>
    <link href="/2022/09/14/TypeScript%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/09/14/TypeScript%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="TypeScript-基本类型"><a href="#TypeScript-基本类型" class="headerlink" title="TypeScript 基本类型"></a>TypeScript 基本类型</h2><table><thead><tr><th>数据类型</th><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>数字类型</td><td>number</td><td>双精度 64 位浮点值。它可以用来表示整数和分数。 let binaryLiteral: number &#x3D; 0b1010; &#x2F;&#x2F; 二进制 let octalLiteral: number &#x3D; 0o744;    &#x2F;&#x2F; 八进制 let decLiteral: number &#x3D; 6;    &#x2F;&#x2F; 十进制 let hexLiteral: number &#x3D; 0xf00d;    &#x2F;&#x2F; 十六进制</td></tr><tr><td>任意类型</td><td>any</td><td>声明为 any 的变量可以赋予任意类型的值。</td></tr><tr><td>布尔类型</td><td>boolean</td><td>表示逻辑值：true 和 false。 let flag: boolean &#x3D; true;</td></tr><tr><td>数组类型</td><td>无</td><td>声明变量为数组。 &#x2F;&#x2F; 在元素类型后面加上[] let arr: number[] &#x3D; [1, 2];  &#x2F;&#x2F; 或者使用数组泛型 let arr: Array<number> &#x3D; [1, 2];</number></td></tr><tr><td>元组</td><td>无</td><td>元组类型用来表示已知元素数量和类型的数组，各元素的类型不必相同，对应位置的类型需要相同。 let x: [string, number]; x &#x3D; [‘Runoob’, 1];    &#x2F;&#x2F; 运行正常 x &#x3D; [1, ‘Runoob’];    &#x2F;&#x2F; 报错 console.log(x[0]);    &#x2F;&#x2F; 输出 Runoob</td></tr><tr><td>枚举</td><td>enum</td><td>枚举类型用于定义数值集合。 enum Color {Red, Green, Blue}; let c: Color &#x3D; Color.Blue; console.log(c);    &#x2F;&#x2F; 输出 2</td></tr><tr><td>viod</td><td>viod</td><td>用于标识方法返回值的类型，表示该方法没有返回值。<code>function hello(): void &#123;    alert(&quot;Hello Runoob&quot;); &#125;</code></td></tr><tr><td>null</td><td>null</td><td>表示对象值缺失。</td></tr><tr><td>undefined</td><td>undefined</td><td>用于初始化变量为一个未定义的值</td></tr><tr><td>never</td><td>never</td><td>never 是其它类型（包括 null 和 undefined）的子类型，代表从不会出现的值。</td></tr></tbody></table><p><strong>注意：</strong>TypeScript 和 JavaScript 没有整数类型。</p><h3 id="任意值是-TypeScript-针对编程时类型不明确的变量使用的一种数据类型，它常用于以下三种情况。"><a href="#任意值是-TypeScript-针对编程时类型不明确的变量使用的一种数据类型，它常用于以下三种情况。" class="headerlink" title="任意值是 TypeScript 针对编程时类型不明确的变量使用的一种数据类型，它常用于以下三种情况。"></a>任意值是 TypeScript 针对编程时类型不明确的变量使用的一种数据类型，它常用于以下三种情况。</h3><p>1、变量的值会动态改变时，比如来自用户的输入，任意值类型可以让这些变量跳过编译阶段的类型检查，示例代码如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">let x: any = <span class="hljs-number">1</span>;    <span class="hljs-regexp">//</span> 数字类型<br>x = <span class="hljs-string">&#x27;I am who I am&#x27;</span>;    <span class="hljs-regexp">//</span> 字符串类型<br>x = false;    <span class="hljs-regexp">//</span> 布尔类型<br></code></pre></td></tr></table></figure><p>改写现有代码时，任意值允许在编译时可选择地包含或移除类型检查，示例代码如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">let</span> x: any = <span class="hljs-number">4</span>;<br>x.<span class="hljs-keyword">if</span><span class="hljs-constructor">ItExists()</span>;    <span class="hljs-comment">// 正确，ifItExists方法在运行时可能存在，但这里并不会检查</span><br>x.<span class="hljs-keyword">to</span><span class="hljs-constructor">Fixed()</span>;    <span class="hljs-comment">// 正确</span><br></code></pre></td></tr></table></figure><p>定义存储各种类型数据的数组时，示例代码如下：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs prolog">let arrayList: any[] = [<span class="hljs-number">1</span>, false, <span class="hljs-string">&#x27;fine&#x27;</span>];<br>arrayList[<span class="hljs-number">1</span>] = <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><h3 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h3><h4 id="null"><a href="#null" class="headerlink" title="null"></a>null</h4><p>在 JavaScript 中 null 表示 “什么都没有”。</p><p>null是一个只有一个值的特殊类型。表示一个空对象引用。</p><p>用 typeof 检测 null 返回是 object。</p><h4 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h4><p>在 JavaScript 中, undefined 是一个没有设置值的变量。</p><p>typeof 一个没有值的变量会返回 undefined。</p><p>Null 和 Undefined 是其他任何类型（包括 void）的子类型，可以赋值给其它类型，如数字类型，此时，赋值后的类型会变成 null 或 undefined。而在TypeScript中启用严格的空校验（–strictNullChecks）特性，就可以使得null 和 undefined 只能被赋值给 void 或本身对应的类型，示例代码如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 启用 --strictNullChecks<br>let x: number;<br>x = <span class="hljs-number">1</span>; <span class="hljs-regexp">//</span> 编译正确<br>x = undefined;    <span class="hljs-regexp">//</span> 编译错误<br>x = null;    <span class="hljs-regexp">//</span> 编译错误<br></code></pre></td></tr></table></figure><p>上面的例子中变量 x 只能是数字类型。如果一个类型可能出现 null 或 undefined， 可以用 | 来支持多种类型，示例代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 启用 --strictNullChecks</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span> | <span class="hljs-literal">null</span> | <span class="hljs-literal">undefined</span>;<br>x = <span class="hljs-number">1</span>; <span class="hljs-comment">// 编译正确</span><br>x = <span class="hljs-literal">undefined</span>;    <span class="hljs-comment">// 编译正确</span><br>x = <span class="hljs-literal">null</span>;    <span class="hljs-comment">// 编译正确</span><br></code></pre></td></tr></table></figure><p>never 是其它类型（包括 null 和 undefined）的子类型，代表从不会出现的值。这意味着声明为 never 类型的变量只能被 never 类型所赋值，在函数中它通常表现为抛出异常或无法执行到终止点（例如无限循环），示例代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">x</span>: <span class="hljs-built_in">never</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span>;<br><br><span class="hljs-comment">// 编译错误，数字类型不能转为 never 类型</span><br>x = <span class="hljs-number">123</span>;<br><br><span class="hljs-comment">// 运行正确，never 类型可以赋值给 never类型</span><br>x = (<span class="hljs-function">()=&gt;</span>&#123; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;exception&#x27;</span>)&#125;)();<br><br><span class="hljs-comment">// 运行正确，never 类型可以赋值给 数字类型</span><br>y = (<span class="hljs-function">()=&gt;</span>&#123; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;exception&#x27;</span>)&#125;)();<br><br><span class="hljs-comment">// 返回值为 never 的函数可以是抛出异常的情况</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">error</span>(<span class="hljs-params">message: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">never</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(message);<br>&#125;<br><br><span class="hljs-comment">// 返回值为 never 的函数可以是无法被执行到的终止点的情况</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loop</span>(<span class="hljs-params"></span>): <span class="hljs-built_in">never</span> &#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><p>变量使用前必须先声明，我们可以使用 var 来声明变量。</p><p>我们可以使用以下四种方式来声明变量：</p><p>声明变量的类型及初始值：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">var</span> <span class="hljs-selector-attr">[变量名]</span> : [类型] = 值;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">var</span> uname:<span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;Runoob&quot;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> uname:string = <span class="hljs-string">&quot;Runoob&quot;</span>;<br><span class="hljs-keyword">var</span> score1:<span class="hljs-built_in">number</span> = <span class="hljs-number">50</span>;<br><span class="hljs-keyword">var</span> score2:<span class="hljs-built_in">number</span> = <span class="hljs-number">42.50</span><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">sum</span> = score1 + score2<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;名字: &quot;</span>+uname)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;第一个科目成绩: &quot;</span>+score1)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;第二个科目成绩: &quot;</span>+score2)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;总成绩: &quot;</span>+<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><h3 id="类型断言（Type-Assertion）"><a href="#类型断言（Type-Assertion）" class="headerlink" title="类型断言（Type Assertion）"></a>类型断言（Type Assertion）</h3><p>类型断言可以用来手动指定一个值的类型，即允许变量从一种类型更改为另一种类型。</p><p>语法格式：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">&lt;类型&gt;值 或 值 <span class="hljs-keyword">as</span> 类型<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;1&#x27;</span> <br><span class="hljs-keyword">var</span> str2:<span class="hljs-built_in">number</span> = &lt;<span class="hljs-built_in">number</span>&gt; &lt;<span class="hljs-built_in">any</span>&gt; str   <span class="hljs-comment">//str、str2 是 string 类型</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str2)<br></code></pre></td></tr></table></figure><h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h3><p>当类型没有给出时，TypeScript 编译器利用类型推断来推断类型。</p><p>如果由于缺乏声明而不能推断出类型，那么它的类型被视作默认的动态 any 类型。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> num = <span class="hljs-number">2</span>;    <span class="hljs-comment">// 类型推断为 number</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;num 变量的值为 &quot;</span>+num); <br>num = <span class="hljs-string">&quot;12&quot;</span>;    <span class="hljs-comment">// 编译错误</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num);<br></code></pre></td></tr></table></figure><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>变量作用域指定了变量定义的位置。</p><p>程序中变量的可用性由变量作用域决定。</p><p>TypeScript 有以下几种作用域：</p><ul><li><strong>全局作用域</strong> − 全局变量定义在程序结构的外部，它可以在你代码的任何位置使用。</li><li><strong>类作用域</strong> − 这个变量也可以称为 <strong>字段</strong>。类变量声明在一个类里头，但在类的方法外面。 该变量可以通过类的对象来访问。类变量也可以是静态的，静态的变量可以通过类名直接访问。</li><li><strong>局部作用域</strong> − 局部变量，局部变量只能在声明它的一个代码块（如：方法）中使用。</li></ul><p> 以下实例说明了三种作用域的使用：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> global_num = <span class="hljs-number">12</span>          <span class="hljs-comment">// 全局变量</span><br>class Numbers &#123; <br>   num_val = <span class="hljs-number">13</span>;             <span class="hljs-comment">// 实例变量</span><br>   static sval = <span class="hljs-number">10</span>;         <span class="hljs-comment">// 静态变量</span><br>   <br>   storeNum():<span class="hljs-keyword">void</span> &#123; <br>      <span class="hljs-keyword">var</span> local_num = <span class="hljs-number">14</span>;    <span class="hljs-comment">// 局部变量</span><br>   &#125; <br>&#125; <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;全局变量为: &quot;</span>+global_num)  <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Numbers.sval)   <span class="hljs-comment">// 静态变量</span><br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> Numbers(); <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;实例变量: &quot;</span>+obj.num_val)<br></code></pre></td></tr></table></figure><p>以上代码使用 tsc 命令编译为 JavaScript 代码为：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> global_num = <span class="hljs-number">12</span>; <span class="hljs-comment">// 全局变量</span><br><span class="hljs-keyword">var</span> Numbers = <span class="hljs-comment">/** @class */</span> (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Numbers</span>(<span class="hljs-params"></span>) &#123;<br>        this.num_val = <span class="hljs-number">13</span>; <span class="hljs-comment">// 实例变量</span><br>    &#125;<br>    Numbers.prototype.storeNum = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> local_num = <span class="hljs-number">14</span>; <span class="hljs-comment">// 局部变量</span><br>    &#125;;<br>    Numbers.sval = <span class="hljs-number">10</span>; <span class="hljs-comment">// 静态变量</span><br>    <span class="hljs-keyword">return</span> Numbers;<br>&#125;());<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;全局变量为: &quot;</span> + global_num);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Numbers.sval); <span class="hljs-comment">// 静态变量</span><br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> Numbers();<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;实例变量: &quot;</span> + obj.num_val);<br></code></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="typeof-运算符"><a href="#typeof-运算符" class="headerlink" title="typeof 运算符"></a>typeof 运算符</h3><p>typeof 是一元运算符，返回操作数的数据类型。</p><p>查看以下实例:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> num = <span class="hljs-number">12</span> <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">typeof</span> num);   <span class="hljs-comment">//输出结果: number</span><br></code></pre></td></tr></table></figure><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>instanceof 运算符用于判断对象是否为指定的类型</p><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><p>联合类型（Union Types）可以通过管道(|)将变量设置多种类型，赋值时可以根据设置的类型来赋值。</p><p><strong>注意</strong>：只能赋值指定的类型，如果赋值其它类型就会报错。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">Type1|<span class="hljs-type">Type2</span>|<span class="hljs-type">Type3</span> <br></code></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>声明一个联合类型：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> val:string|<span class="hljs-built_in">number</span> <br>val = <span class="hljs-number">12</span> <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;数字为 &quot;</span>+ val) <br>val = <span class="hljs-string">&quot;Runoob&quot;</span> <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;字符串为 &quot;</span> + val)<br></code></pre></td></tr></table></figure><p>也可以将联合类型作为函数参数使用：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">disp</span>(<span class="hljs-params">name:string|string[]</span>) &#123; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">typeof</span> name == <span class="hljs-string">&quot;string&quot;</span>) &#123; <br>                <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(name) <br>        &#125; <span class="hljs-keyword">else</span> &#123; <br>                <span class="hljs-keyword">var</span> i; <br>                <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;name.<span class="hljs-built_in">length</span>;i++) &#123; <br>                <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(name[i])<br>                &#125; <br>        &#125; <br>&#125; <br>disp(<span class="hljs-string">&quot;Runoob&quot;</span>) <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;输出数组....&quot;</span>) <br>disp([<span class="hljs-string">&quot;Runoob&quot;</span>,<span class="hljs-string">&quot;Google&quot;</span>,<span class="hljs-string">&quot;Taobao&quot;</span>,<span class="hljs-string">&quot;Facebook&quot;</span>])<br></code></pre></td></tr></table></figure><h3 id="联合类型数组"><a href="#联合类型数组" class="headerlink" title="联合类型数组"></a>联合类型数组</h3><p>我们也可以将数组声明为联合类型：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr:<span class="hljs-built_in">number</span>[]|string[]; <br><span class="hljs-keyword">var</span> i:<span class="hljs-built_in">number</span>; <br>arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>] <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;**数字数组**&quot;</span>)  <br> <br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-built_in">length</span>;i++) &#123; <br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr[i]) <br>&#125;  <br> <br>arr = [<span class="hljs-string">&quot;Runoob&quot;</span>,<span class="hljs-string">&quot;Google&quot;</span>,<span class="hljs-string">&quot;Taobao&quot;</span>] <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;**字符串数组**&quot;</span>)  <br> <br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-built_in">length</span>;i++) &#123; <br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr[i]) <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口是一系列抽象方法的声明，是一些方法特征的集合，这些方法都应该是抽象的，需要由具体的类去实现，然后第三方就可以通过这组抽象方法调用，让具体的类执行具体的方法。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">interface</span> <span class="hljs-symbol">interface_name</span> &#123; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>以下实例中，我们定义了一个接口 IPerson，接着定义了一个变量 customer，它的类型是 IPerson。</p><p>customer 实现了接口 IPerson 的属性和方法。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arcade">interface IPerson &#123; <br>    <span class="hljs-attr">firstName</span>:string, <br>    <span class="hljs-attr">lastName</span>:string, <br>    <span class="hljs-attr">sayHi</span>: <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>string <br>&#125; <br> <br><span class="hljs-keyword">var</span> customer:IPerson = &#123; <br>    <span class="hljs-attr">firstName</span>:<span class="hljs-string">&quot;Tom&quot;</span>,<br>    <span class="hljs-attr">lastName</span>:<span class="hljs-string">&quot;Hanks&quot;</span>, <br>    <span class="hljs-attr">sayHi</span>: ():<span class="hljs-function"><span class="hljs-params">string</span> =&gt;</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hi there&quot;</span>&#125; <br>&#125; <br> <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;Customer 对象 &quot;</span>) <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(customer.firstName) <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(customer.lastName) <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(customer.sayHi())  <br> <br><span class="hljs-keyword">var</span> employee:IPerson = &#123; <br>    <span class="hljs-attr">firstName</span>:<span class="hljs-string">&quot;Jim&quot;</span>,<br>    <span class="hljs-attr">lastName</span>:<span class="hljs-string">&quot;Blakes&quot;</span>, <br>    <span class="hljs-attr">sayHi</span>: ():<span class="hljs-function"><span class="hljs-params">string</span> =&gt;</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello!!!&quot;</span>&#125; <br>&#125; <br> <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;Employee  对象 &quot;</span>) <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(employee.firstName) <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(employee.lastName)<br></code></pre></td></tr></table></figure><h3 id="联合类型和接口"><a href="#联合类型和接口" class="headerlink" title="联合类型和接口"></a>联合类型和接口</h3><p>以下实例演示了如何在接口中使用联合类型：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arcade">interface RunOptions &#123; <br>    <span class="hljs-attr">program</span>:string; <br>    commandline:string[]|string|<span class="hljs-function">(<span class="hljs-params">(</span>)=&gt;</span>string); <br>&#125; <br> <br><span class="hljs-comment">// commandline 是字符串</span><br><span class="hljs-keyword">var</span> options:RunOptions = &#123;<span class="hljs-attr">program</span>:<span class="hljs-string">&quot;test1&quot;</span>,<span class="hljs-attr">commandline</span>:<span class="hljs-string">&quot;Hello&quot;</span>&#125;; <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(options.commandline)  <br> <br><span class="hljs-comment">// commandline 是字符串数组</span><br>options = &#123;<span class="hljs-attr">program</span>:<span class="hljs-string">&quot;test1&quot;</span>,<span class="hljs-attr">commandline</span>:[<span class="hljs-string">&quot;Hello&quot;</span>,<span class="hljs-string">&quot;World&quot;</span>]&#125;; <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(options.commandline[<span class="hljs-number">0</span>]); <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(options.commandline[<span class="hljs-number">1</span>]);  <br> <br><span class="hljs-comment">// commandline 是一个函数表达式</span><br>options = &#123;<span class="hljs-attr">program</span>:<span class="hljs-string">&quot;test1&quot;</span>,<span class="hljs-attr">commandline</span>:<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;**Hello World**&quot;</span>;&#125;&#125;; <br> <br><span class="hljs-keyword">var</span> fn:<span class="hljs-built_in">any</span> = options.commandline; <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(fn());<br></code></pre></td></tr></table></figure><h3 id="接口和数组"><a href="#接口和数组" class="headerlink" title="接口和数组"></a>接口和数组</h3><p>接口中我们可以将数组的索引值和元素设置为不同类型，索引值可以是数字或字符串。</p><p>设置元素为字符串类型：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">interface namelist &#123; <br>   [index:number]:string <br>&#125; <br> <br><span class="hljs-regexp">//</span> 类型一致，正确<br>var list2:namelist = [<span class="hljs-string">&quot;Google&quot;</span>,<span class="hljs-string">&quot;Runoob&quot;</span>,<span class="hljs-string">&quot;Taobao&quot;</span>]<br><span class="hljs-regexp">//</span> 错误元素 <span class="hljs-number">1</span> 不是 string 类型<br><span class="hljs-regexp">//</span> var list2:namelist = [<span class="hljs-string">&quot;Runoob&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;Taobao&quot;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">interface ages &#123; <br>   [index:string]:number <br>&#125; <br> <br>var agelist:ages; <br> <span class="hljs-regexp">//</span> 类型正确 <br>agelist[<span class="hljs-string">&quot;runoob&quot;</span>] = <span class="hljs-number">15</span>  <br> <br><span class="hljs-regexp">//</span> 类型错误，输出  error TS2322: Type <span class="hljs-string">&#x27;&quot;google&quot;&#x27;</span> is not assignable to type <span class="hljs-string">&#x27;number&#x27;</span>.<br><span class="hljs-regexp">//</span> agelist[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;google&quot;</span><br></code></pre></td></tr></table></figure><h3 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h3><p>接口继承就是说接口可以通过其他接口来扩展自己。</p><p>Typescript 允许接口继承多个接口。</p><p>继承使用关键字 <strong>extends</strong>。</p><p>单接口继承语法格式：</p><h3 id="单继承实例"><a href="#单继承实例" class="headerlink" title="单继承实例"></a>单继承实例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123; <br>   <span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span> <br>&#125; <br> <br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Musician</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123; <br>   <span class="hljs-attr">instrument</span>:<span class="hljs-built_in">string</span> <br>&#125; <br> <br><span class="hljs-keyword">var</span> drummer = &lt;<span class="hljs-title class_">Musician</span>&gt;&#123;&#125;; <br>drummer.<span class="hljs-property">age</span> = <span class="hljs-number">27</span> <br>drummer.<span class="hljs-property">instrument</span> = <span class="hljs-string">&quot;Drums&quot;</span> <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;年龄:  &quot;</span>+drummer.<span class="hljs-property">age</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;喜欢的乐器:  &quot;</span>+drummer.<span class="hljs-property">instrument</span>)<br></code></pre></td></tr></table></figure><h3 id="多继承实例"><a href="#多继承实例" class="headerlink" title="多继承实例"></a>多继承实例</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IParent1</span> </span>&#123; <br>    v1:<span class="hljs-type">number </span><br>&#125; <br> <br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IParent2</span> </span>&#123; <br>    v2:<span class="hljs-type">number </span><br>&#125; <br> <br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Child</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span> <span class="hljs-type">IParent1</span></span>, <span class="hljs-title">IParent2</span> </span>&#123; &#125; <br><span class="hljs-keyword">var</span> Iobj:<span class="hljs-type">Child </span>= &#123; v1:<span class="hljs-type">12</span>, v2:<span class="hljs-type">23</span>&#125; <br>console.log(<span class="hljs-string">&quot;value 1: &quot;</span>+Iobj.v1+<span class="hljs-string">&quot; value 2: &quot;</span>+Iobj.v2)<br></code></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>TypeScript 是面向对象的 JavaScript。</p><p>类描述了所创建的对象共同的属性和方法。</p><p>TypeScript 支持面向对象的所有特性，比如 类、接口等。</p><p>TypeScript 类定义方式如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">class_name</span> &#123; <br>    <span class="hljs-comment">// 类作用域</span><br>&#125;<br></code></pre></td></tr></table></figure><p>定义类的关键字为 class，后面紧跟类名，类可以包含以下几个模块（类的数据成员）：</p><ul><li><strong>字段</strong> − 字段是类里面声明的变量。字段表示对象的有关数据。</li><li><strong>构造函数</strong> − 类实例化时调用，可以为类的对象分配内存。</li><li><strong>方法</strong> − 方法为对象要执行的操作。</li></ul><p>实例</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Person</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建类的数据成员"><a href="#创建类的数据成员" class="headerlink" title="创建类的数据成员"></a>创建类的数据成员</h3><p>以下实例我们声明了类 Car，包含字段为 engine，构造函数在类实例化后初始化字段 engine。</p><p>this 关键字表示当前类实例化的对象。注意构造函数的参数名与字段名相同，this.engine 表示类的字段。</p><p>此外我们也在类中定义了一个方法 disp()。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123; <br>    <span class="hljs-comment">// 字段 </span><br>    <span class="hljs-attr">engine</span>:<span class="hljs-built_in">string</span>; <br> <br>    <span class="hljs-comment">// 构造函数 </span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">engine:<span class="hljs-built_in">string</span></span>) &#123; <br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">engine</span> = engine <br>    &#125;  <br> <br>    <span class="hljs-comment">// 方法 </span><br>    <span class="hljs-title function_">disp</span>():<span class="hljs-built_in">void</span> &#123; <br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;发动机为 :   &quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">engine</span>) <br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实例化对象"><a href="#实例化对象" class="headerlink" title="实例化对象"></a>实例化对象</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123; <br>   <span class="hljs-comment">// 字段</span><br>   <span class="hljs-attr">engine</span>:<span class="hljs-built_in">string</span>; <br>   <br>   <span class="hljs-comment">// 构造函数</span><br>   <span class="hljs-title function_">constructor</span>(<span class="hljs-params">engine:<span class="hljs-built_in">string</span></span>) &#123; <br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">engine</span> = engine <br>   &#125;  <br>   <br>   <span class="hljs-comment">// 方法</span><br>   <span class="hljs-title function_">disp</span>():<span class="hljs-built_in">void</span> &#123; <br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;函数中显示发动机型号  :   &quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">engine</span>) <br>   &#125; <br>&#125; <br> <br><span class="hljs-comment">// 创建一个对象</span><br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;XXSY1&quot;</span>)<br> <br><span class="hljs-comment">// 访问字段</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;读取发动机型号 :  &quot;</span>+obj.<span class="hljs-property">engine</span>)  <br> <br><span class="hljs-comment">// 访问方法</span><br>obj.<span class="hljs-title function_">disp</span>()<br></code></pre></td></tr></table></figure><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><p>TypeScript 支持继承类，即我们可以在创建类的时候继承一个已存在的类，这个已存在的类称为父类，继承它的类称为子类。</p><p>类继承使用关键字 <strong>extends</strong>，子类除了不能继承父类的私有成员(方法和属性)和构造函数，其他的都可以继承。</p><p>TypeScript 一次只能继承一个类，不支持继承多个类，但 TypeScript 支持多重继承（A 继承 B，B 继承 C）。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">child_class_name</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">parent_class_name</span></span><br></code></pre></td></tr></table></figure><p>实例</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> </span>&#123; <br>   <span class="hljs-type">Area</span>:number <br>   <br>   constructor(a:number) &#123; <br>      <span class="hljs-keyword">this</span>.<span class="hljs-type">Area</span> = a <br>   &#125; <br>&#125; <br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123; <br>   disp():void &#123; <br>      console.log(<span class="hljs-string">&quot;圆的面积:  &quot;</span>+<span class="hljs-keyword">this</span>.<span class="hljs-type">Area</span>) <br>   &#125; <br>&#125;<br>  <br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-type">Circle</span>(<span class="hljs-number">223</span>); <br>obj.disp()<br></code></pre></td></tr></table></figure><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Root</span> </span>&#123; <br>   str:string; <br>&#125; <br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Root</span> </span>&#123;&#125; <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Leaf</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Child</span> </span>&#123;&#125; <span class="hljs-comment">// 多重继承，继承了 Child 和 Root 类</span><br> <br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-type">Leaf</span>(); <br>obj.str =<span class="hljs-string">&quot;hello&quot;</span> <br>console.log(obj.str)<br></code></pre></td></tr></table></figure><h3 id="继承类的方法重写"><a href="#继承类的方法重写" class="headerlink" title="继承类的方法重写"></a>继承类的方法重写</h3><p>类继承后，子类可以对父类的方法重新定义，这个过程称之为方法的重写。</p><p>其中 super 关键字是对父类的直接引用，该关键字可以引用父类的属性和方法。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrinterClass</span> </span>&#123; <br>   doPrint():void &#123;<br>      console.log(<span class="hljs-string">&quot;父类的 doPrint() 方法。&quot;</span>) <br>   &#125; <br>&#125; <br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringPrinter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">PrinterClass</span> </span>&#123; <br>   doPrint():void &#123; <br>      <span class="hljs-keyword">super</span>.doPrint() <span class="hljs-comment">// 调用父类的函数</span><br>      console.log(<span class="hljs-string">&quot;子类的 doPrint()方法。&quot;</span>)<br>   &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h3><p>static 关键字用于定义类的数据成员（属性和方法）为静态的，静态成员可以直接通过类名调用。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaticMem</span> </span>&#123;  <br>   <span class="hljs-keyword">static</span> <span class="hljs-built_in">num</span>:number; <br>   <br>   <span class="hljs-keyword">static</span> disp():<span class="hljs-keyword">void</span> &#123; <br>      console.log(<span class="hljs-string">&quot;num 值为 &quot;</span>+ StaticMem.<span class="hljs-built_in">num</span>) <br>   &#125; <br>&#125; <br> <br>StaticMem.<span class="hljs-built_in">num</span> = <span class="hljs-number">12</span>     <span class="hljs-comment">// 初始化静态变量</span><br>StaticMem.disp()       <span class="hljs-comment">// 调用静态方法</span><br></code></pre></td></tr></table></figure><h3 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h3><p>instanceof 运算符用于判断对象是否是指定的类型，如果是返回 true，否则返回 false。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123; &#125; <br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-type">Person</span>() <br><span class="hljs-keyword">var</span> isPerson = obj instanceof Person; <br>console.log(<span class="hljs-string">&quot;obj 对象是 Person 类实例化来的吗？ &quot;</span> + isPerson);<br></code></pre></td></tr></table></figure><h3 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h3><p>TypeScript 中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。TypeScript 支持 3 种不同的访问权限。</p><ul><li><strong>public（默认）</strong> : 公有，可以在任何地方被访问。</li><li><strong>protected</strong> : 受保护，可以被其自身以及其子类访问。</li><li><strong>private</strong> : 私有，只能被其定义所在的类访问。</li></ul><p>以下实例定义了两个变量 str1 和 str2，str1 为 public，str2 为 private，实例化后可以访问 str1，如果要访问 str2 则会编译错误。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Encapsulate</span> &#123; <br>   <span class="hljs-attr">str1</span>:<span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;hello&quot;</span> <br>   <span class="hljs-keyword">private</span> <span class="hljs-attr">str2</span>:<span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;world&quot;</span> <br>&#125;<br> <br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Encapsulate</span>() <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">str1</span>)     <span class="hljs-comment">// 可访问 </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">str2</span>)   <span class="hljs-comment">// 编译错误， str2 是私有的</span><br></code></pre></td></tr></table></figure><h3 id="类和接口"><a href="#类和接口" class="headerlink" title="类和接口"></a>类和接口</h3><p>类可以实现接口，使用关键字 implements，并将 interest 字段作为类的属性使用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ILoan</span> &#123; <br>   <span class="hljs-attr">interest</span>:<span class="hljs-built_in">number</span> <br>&#125; <br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AgriLoan</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILoan</span> &#123; <br>   <span class="hljs-attr">interest</span>:<span class="hljs-built_in">number</span> <br>   <span class="hljs-attr">rebate</span>:<span class="hljs-built_in">number</span> <br>   <br>   <span class="hljs-comment">//构造函数</span><br>   <span class="hljs-title function_">constructor</span>(<span class="hljs-params">interest:<span class="hljs-built_in">number</span>,rebate:<span class="hljs-built_in">number</span></span>) &#123; <br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">interest</span> = interest <br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">rebate</span> = rebate <br>   &#125; <br>&#125; <br> <br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AgriLoan</span>(<span class="hljs-number">10</span>,<span class="hljs-number">1</span>) <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;利润为 : &quot;</span>+obj.<span class="hljs-property">interest</span>+<span class="hljs-string">&quot;，抽成为 : &quot;</span>+obj.<span class="hljs-property">rebate</span> )<br></code></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>对象是包含一组键值对的实例。 值可以是标量、函数、数组、对象等，如下实例：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> sites = &#123; <br>   <span class="hljs-attr">site1</span>:<span class="hljs-string">&quot;Runoob&quot;</span>, <br>   <span class="hljs-attr">site2</span>:<span class="hljs-string">&quot;Google&quot;</span> <br>&#125;; <br><span class="hljs-comment">// 访问对象的值</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(sites.site1) <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(sites.site2)<br></code></pre></td></tr></table></figure><h3 id="类型模板"><a href="#类型模板" class="headerlink" title="类型模板"></a>类型模板</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts">var <span class="hljs-attr">sites</span> <span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span> <br><span class="hljs-symbol">   site1:</span><span class="hljs-string">&quot;Runoob&quot;</span>, <br><span class="hljs-symbol">   site2:</span><span class="hljs-string">&quot;Google&quot;</span> <br><span class="hljs-punctuation">&#125;;</span><br></code></pre></td></tr></table></figure><p>对象也可以作为一个参数传递给函数</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> sites = &#123; <br>    <span class="hljs-attr">site1</span>:<span class="hljs-string">&quot;Runoob&quot;</span>, <br>    <span class="hljs-attr">site2</span>:<span class="hljs-string">&quot;Google&quot;</span>,<br>&#125;; <br><span class="hljs-keyword">var</span> invokesites = <span class="hljs-keyword">function</span>(<span class="hljs-params">obj: &#123; site1:string, site2 :string &#125;</span>) &#123; <br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;site1 :&quot;</span>+obj.site1) <br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;site2 :&quot;</span>+obj.site2) <br>&#125; <br>invokesites(sites)<br></code></pre></td></tr></table></figure><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>命名空间一个最明确的目的就是解决重名问题。</p><p>假设这样一种情况，当一个班上有两个名叫小明的学生时，为了明确区分它们，我们在使用名字之外，不得不使用一些额外的信息，比如他们的姓（王小明，李小明），或者他们父母的名字等等。</p><p>命名空间定义了标识符的可见范围，一个标识符可在多个名字空间中定义，它在不同名字空间中的含义是互不相干的。这样，在一个新的名字空间中可定义任何标识符，它们不会与任何已有的标识符发生冲突，因为已有的定义都处于其他名字空间中。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">namespace</span> <span class="hljs-symbol">SomeNameSpaceName</span> &#123; <br>   export <span class="hljs-keyword">interface</span> <span class="hljs-symbol">ISomeInterfaceName</span> &#123;      &#125;  <br>   export <span class="hljs-keyword">class</span> <span class="hljs-symbol">SomeClassName</span> &#123;      &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>以上定义了一个命名空间 SomeNameSpaceName，如果我们需要在外部可以调用 SomeNameSpaceName 中的类和接口，则需要在类和接口添加 <strong>export</strong> 关键字。</p><p>要在另外一个命名空间调用语法格式为：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">SomeNameSpaceName.SomeClassName<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>如果一个命名空间在一个单独的 TypeScript 文件中，则应使用三斜杠 &#x2F;&#x2F;&#x2F; 引用它，语法格式如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-regexp">/ &lt;reference path = &quot;SomeFileName.ts&quot; /</span>&gt;<br></code></pre></td></tr></table></figure><p>实例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">Drawing</span> &#123; <br>    <span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IShape</span> &#123; <br>        <span class="hljs-title function_">draw</span>(); <br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/// &lt;reference path = &quot;IShape.ts&quot; /&gt; </span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">Drawing</span> &#123; <br>    <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IShape</span> &#123; <br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">draw</span>(<span class="hljs-params"></span>) &#123; <br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Circle is drawn&quot;</span>); <br>        &#125;  <br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/// &lt;reference path = &quot;IShape.ts&quot; /&gt; </span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">Drawing</span> &#123; <br>    <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IShape</span> &#123; <br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">draw</span>(<span class="hljs-params"></span>) &#123; <br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Triangle is drawn&quot;</span>); <br>        &#125; <br>    &#125; <br>&#125;<br><br>调用<br><span class="hljs-comment">/// &lt;reference path = &quot;IShape.ts&quot; /&gt;   </span><br><span class="hljs-comment">/// &lt;reference path = &quot;Circle.ts&quot; /&gt; </span><br><span class="hljs-comment">/// &lt;reference path = &quot;Triangle.ts&quot; /&gt;  </span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">drawAllShapes</span>(<span class="hljs-params">shape:Drawing.IShape</span>) &#123; <br>    shape.<span class="hljs-title function_">draw</span>(); <br>&#125; <br><span class="hljs-title function_">drawAllShapes</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Drawing</span>.<span class="hljs-title class_">Circle</span>());<br><span class="hljs-title function_">drawAllShapes</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Drawing</span>.<span class="hljs-title class_">Triangle</span>());<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>规范化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BetterScroll</title>
    <link href="/2022/09/13/BetterScroll/"/>
    <url>/2022/09/13/BetterScroll/</url>
    
    <content type="html"><![CDATA[<h2 id="better-scroll-是什么"><a href="#better-scroll-是什么" class="headerlink" title="better-scroll 是什么"></a>better-<a href="https://so.csdn.net/so/search?q=scroll&spm=1001.2101.3001.7020">scroll</a> 是什么</h2><p>better-scroll 是一款重点解决移动端（已支持 PC）各种滚动场景需求的插件。它的核心是借鉴的 iscroll 的实现，它的 API 设计基本兼容 iscroll，在 iscroll 的基础上又扩展了一些 feature 以及做了一些性能优化。</p><p>better-scroll 是基于原生 JS 实现的，不依赖任何框架。它编译后的代码大小是 63kb，压缩后是 35kb，gzip 后仅有 9kb，是一款非常轻量的 JS lib。</p><h2 id="滚动原理"><a href="#滚动原理" class="headerlink" title="滚动原理"></a>滚动原理</h2><p>不能滚动是现象，我们得搞清楚这其中的根本原因。在这之前，我们先来看一下浏览器的滚动原理： 浏览器的滚动条大家都会遇到，当页面内容的高度超过视口高度的时候，会出现纵向滚动条；当页面内容的宽度超过视口宽度的时候，会出现横向滚动条。也就是当我们的视口展示不下内容的时候，会通过滚动条的方式让用户滚动屏幕看到剩余的内容。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>better-scroll 托管在 Npm 上，执行如下命令安装：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">npm install better-<span class="hljs-keyword">scroll</span> --<span class="hljs-keyword">save</span><br></code></pre></td></tr></table></figure><p>接下来就可以在代码中引入了，<a href="https://webpack.js.org/">webpack</a> 等构建工具都支持从 node_modules 里引入代码：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> BScroll <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;better-scroll&#x27;</span><br></code></pre></td></tr></table></figure><p>如果是 ES5 的语法，如下：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">var</span> <span class="hljs-variable">BScroll</span> = <span class="hljs-function"><span class="hljs-title">require</span>(<span class="hljs-string">&#x27;better-scroll&#x27;</span>)</span><br></code></pre></td></tr></table></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleClick&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in 100&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span></span><br><span class="language-xml">          </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">item</span> &#125;&#125;</span><span class="language-xml">...</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 这里可以放一些其它的 DOM，但不会影响滚动 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; onMounted, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">BScroll</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;better-scroll&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-attr">wrapper</span>: any = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;点击事件&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">let</span> scroll = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BScroll</span>(wrapper.<span class="hljs-property">value</span>, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">probeType</span>: <span class="hljs-number">2</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">pullUpLoad</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 上拉</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">click</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//允许点击</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  scroll.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;pullingUp&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;上拉加載&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.wrapper</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">background-color</span>: lightblue;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">overflow</span>: hidden;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><ul><li><p>probeType</p><p>  类型：Number</p><p>    默认值：0</p><p>    可选值：1、2、3</p><p>作用：有时候我们需要知道滚动的位置。</p><p>当 probeType 为 1 的时候，会非实时（屏幕滑动超过一定时间后）派发scroll 事件；</p><p>当 probeType 为 2 的时候，会在屏幕滑动的过程中实时的派发 scroll 事件；（在手指滚动的过程中侦测，手指离开后的惯性滚动过程中不侦测。）</p><p>当 probeType 为 3 的时候，不仅在屏幕滑动的过程中，而且在 momentum 滚动动画运行过程中实时派发 scroll 事件。( 就是我们用手用力滑动的时候，手放开之后，屏幕还在滑动，这就叫momentum 滚动动画 )</p><p>如果没有设置该值，其默认值为 0，即不派发 scroll 事件。</p></li><li><p>BetterScroll 默认会阻止浏览器的原生 click 事件。当设置为 true，BetterScroll 会派发一个 click 事件，我们会给派发的 event 参数加一个私有属性 <code>_constructed</code>，值为 true。</p></li><li><p>pullUpLoad: true,   开启后允许上拉</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rem移动端适配</title>
    <link href="/2022/09/13/Rem%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/"/>
    <url>/2022/09/13/Rem%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<ul><li>rem单位：rem是一个只相对于浏览器的根元素（HTML元素）的font-size的来确定的单位。默认情况下，html元素的font-size为12px</li><li>通过rem来实现适配：rem单位都是相对于根元素html的font-size来决定大小的,根元素的font-size相当于提供了一个基准，当页面的宽度发生变化时，只需要改变font-size的值，那么以rem为固定单位的元素的大小也会发生响应的变化。需要先动态设置html根元素的font-size,再计算出其他页面元素以rem为固定单位的值</li></ul><p>控制font-size的js代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> deviceWidth = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientWidth</span>;</span><br><span class="language-javascript">        deviceWidth = deviceWidth &lt; <span class="hljs-number">320</span> ? <span class="hljs-number">320</span> : deviceWidth &gt; <span class="hljs-number">640</span> ? <span class="hljs-number">640</span> : deviceWidth;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = deviceWidth / <span class="hljs-number">7.5</span> + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="language-javascript">    &#125;)();</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的js代码中deviceWidth&#x2F;7.5，表示font-size用deviceWidth&#x2F;7.5的值来表示，1rem的值就是deviceWidth&#x2F;7.5，当视口容器发生变化时就可以动态设置font-size的大小，不论页面宽度变大还是缩小，视口宽度都会被等分为7.5份，每一份就是1rem,从而1rem在不同的视觉容器中表示不同的大小，但在视口总宽度中的占比是不变的，实现了等比适配。</p><p>这个7.5在这里并不是一个固定的值，也可以设置为其他值，因为设计稿一般是根据iphone6&#x2F;7&#x2F;8的宽度来设计，一般为375或者750,所以为了方便计算，在这里取7.5，能够被整除方便后面的计算。</p><p>元素的rem值计算</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.div</span>&#123;<br>        <span class="hljs-attribute">display</span>: flex;<br>        <span class="hljs-attribute">align-items</span>: center;<br>        <span class="hljs-attribute">justify-content</span>: center;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">2rem</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">0.96rem</span>;<br>        <span class="hljs-attribute">background</span>:<span class="hljs-number">#aaa</span>;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.24rem</span>;<br>        <br>    &#125;<br></code></pre></td></tr></table></figure><p>假定一个div的宽度为100px,那么在计算时，根据设置的1rem &#x3D; 50px，所以100px&#x3D;2rem，其他所有的属性值都可以类似这样计算。font-size一般情况下还是使用px,因为在rem中，只要使用了rem单位都会被转换，那么在转换的时候，会出现不能被整除或者出现小数的情况比如10.333333px，那么在显示时就可能出现一些偏差。而且如果期望在小屏幕下面显示跟大屏幕同等量的字体，但是由于rem的等比缩放，在小屏幕下就会存在小屏幕字体更小的情况，所以对于字体的适配更好的做法就是使用px和媒体查询来进行适配。</p><p>优点：</p><ul><li>rem单位是根据根元素font-size决定大小，只要改变font-size的值，以rem为固定单位的元素大小也会发生响应式的改变</li></ul><p>缺点：</p><ul><li>必须通过一段js代码控制font-size的大小</li><li>控制font-size的js代码必须放在在页面第一次加载完成之前，并且放在引入的css样式代码之前。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>适配</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vite中postcss-px-to-viewport的使用</title>
    <link href="/2022/09/13/vite%E4%B8%ADpostcss-px-to-viewport%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/09/13/vite%E4%B8%ADpostcss-px-to-viewport%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Vite-中移动端适配"><a href="#Vite-中移动端适配" class="headerlink" title="Vite 中移动端适配"></a>Vite 中移动端适配</h2><h3 id="安装postcss-px-to-viewport-插件"><a href="#安装postcss-px-to-viewport-插件" class="headerlink" title="安装postcss-px-to-viewport 插件"></a>安装postcss-px-to-viewport 插件</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm <span class="hljs-selector-tag">i</span> postcss-px-<span class="hljs-selector-tag">to</span>-viewport<br></code></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>因为vite中已经内联了postcss，所以并不需要额外的创建 postcss.config.js文件，<a href="https://blog.csdn.net/">vite关于css.postcss</a> 我们只需要在 vite.config.ts中进行配置即可：具体配置如下:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs awk">import &#123; defineConfig &#125; from <span class="hljs-string">&#x27;vite&#x27;</span> <br>import vue from <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span> <br>import postcsspxtoviewport from <span class="hljs-string">&#x27;postcss-px-to-viewport&#x27;</span> <br> <br>export default defineConfig(&#123; <br>  plugins: [ <br>    vue() <br>  ], <br>  css: &#123; <br>    postcss: &#123; <br>      plugins: [ <br>        postcsspxtoviewport(&#123; <br>          unitToConvert: <span class="hljs-string">&#x27;px&#x27;</span>, <span class="hljs-regexp">//</span> 要转化的单位 <br>          viewportWidth: <span class="hljs-number">750</span>, <span class="hljs-regexp">//</span> UI设计稿的宽度 <br>          unitPrecision: <span class="hljs-number">6</span>, <span class="hljs-regexp">//</span> 转换后的精度，即小数点位数 <br>          propList: [<span class="hljs-string">&#x27;*&#x27;</span>], <span class="hljs-regexp">//</span> 指定转换的css属性的单位，*代表全部css属性的单位都进行转换 <br>          viewportUnit: <span class="hljs-string">&#x27;vw&#x27;</span>, <span class="hljs-regexp">//</span> 指定需要转换成的视窗单位，默认vw <br>          fontViewportUnit: <span class="hljs-string">&#x27;vw&#x27;</span>, <span class="hljs-regexp">//</span> 指定字体需要转换成的视窗单位，默认vw <br>          selectorBlackList: [<span class="hljs-string">&#x27;ignore-&#x27;</span>], <span class="hljs-regexp">//</span> 指定不转换为视窗单位的类名， <br>          minPixelValue: <span class="hljs-number">1</span>, <span class="hljs-regexp">//</span> 默认值<span class="hljs-number">1</span>，小于或等于<span class="hljs-number">1</span>px则不进行转换 <br>          mediaQuery: true, <span class="hljs-regexp">//</span> 是否在媒体查询的css代码中也进行转换，默认false <br>          replace: true, <span class="hljs-regexp">//</span> 是否转换后直接更换属性值 <br>          <span class="hljs-regexp">//</span> exclude: [<span class="hljs-regexp">/node_modules/</span>], <span class="hljs-regexp">//</span> 设置忽略文件，用正则做目录名匹配 <br>          exclude: [], <br>          landscape: false <span class="hljs-regexp">//</span> 是否处理横屏情况 <br>        &#125;) <br>      ] <br>    &#125; <br>  &#125; <br>&#125;) <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>适配</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react-router-dom 路由重定向</title>
    <link href="/2022/09/11/react-router-dom-%E8%B7%AF%E7%94%B1%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <url>/2022/09/11/react-router-dom-%E8%B7%AF%E7%94%B1%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h2 id="React-router-dom-路由重定向"><a href="#React-router-dom-路由重定向" class="headerlink" title="React-router-dom 路由重定向"></a>React-router-dom 路由重定向</h2><p>使用 <code>import &#123; useRoutes, Navigate &#125; from &quot;react-router-dom&quot;;</code></p><p>重定向的路由要放在 定义的路由前面</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; lazy, Suspense &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; useRoutes, Navigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br>const Home = lazy(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../pages/Home/Home&quot;</span>));<br>const Center = lazy(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../pages/Center/Center&quot;</span>));<br>const Cinema = lazy(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../pages/Cinema/Cinema&quot;</span>));<br>const Infomation = lazy(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../pages/Information/Information&quot;</span>));<br>const Film = lazy(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../pages/Film/Film&quot;</span>));<br>const NowPlaying = lazy(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../pages/Film/NowPlaying/NowPlaying&quot;</span>));<br>const ComingSoon = lazy(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../pages/Film/ComingSoon/ComingSoon&quot;</span>));<br><br>function Routers() &#123;<br><br>    const lazyLoad = <span class="hljs-function"><span class="hljs-params">(child)</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> &lt;Suspense Suspense fallback=&#123;&lt;div&gt; Loading...&lt;/div &gt;&#125;&gt;<br>            &#123;child&#125;<br>        &lt;/Suspense &gt;;<br>    &#125;;<br><br>    const routers = useRoutes([<br>        &#123;  <span class="hljs-regexp">//</span> 重定向<br>            path: <span class="hljs-string">&quot;/&quot;</span>,<br>            element: &lt;Navigate to=<span class="hljs-string">&quot;/films/nowPlaying&quot;</span> /&gt;<br>        &#125;,<br>        &#123;<br>            path: <span class="hljs-string">&quot;/&quot;</span>,<br>            element: &lt;Home /&gt;,<br>            children: [<br>                &#123;<br>                    path: <span class="hljs-string">&quot;films&quot;</span>,<br>                    element: lazyLoad(&lt;Film /&gt;),<br>                    children: [<br>                        &#123;<br>                            path: <span class="hljs-string">&quot;comingSoon&quot;</span>,<br>                            element: lazyLoad(&lt;ComingSoon /&gt;)<br>                        &#125;, &#123;<br>                            path: <span class="hljs-string">&quot;nowPlaying&quot;</span>,<br>                            element: lazyLoad(&lt;NowPlaying /&gt;)<br>                        &#125;<br>                    ]<br>                &#125;<br>            ]<br>        &#125;,<br>    ]);<br><br>    <span class="hljs-keyword">return</span> (<br>        routers<br>    );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Routers;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>react中redux和react-redux使用</title>
    <link href="/2022/09/11/react%E4%B8%ADredux%E5%92%8Creact-redux%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/09/11/react%E4%B8%ADredux%E5%92%8Creact-redux%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Redux-和-React-redux-安装"><a href="#Redux-和-React-redux-安装" class="headerlink" title="Redux 和 React-redux 安装"></a>Redux 和 React-redux 安装</h2><p>npm 安装</p><p><code>npm i react-redux redux</code></p><h2 id="创建Store目录及文件"><a href="#创建Store目录及文件" class="headerlink" title="创建Store目录及文件"></a>创建Store目录及文件</h2><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createStore, combineReducers &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux&quot;</span>;<br><span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./reducers/Add&quot;</span>;<br><span class="hljs-comment">// import action from &#x27;./action/Add&#x27;;</span><br><br><span class="hljs-comment">//此时store.subscribe(）就会被触发，通过store.getState()就可以拿到store内的state值</span><br><br><span class="hljs-comment">// 提交行为</span><br><span class="hljs-comment">// store.dispatch(action);</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(reducer);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br><br></code></pre></td></tr></table></figure><h3 id="action-x2F-Add-js"><a href="#action-x2F-Add-js" class="headerlink" title="action&#x2F;Add.js"></a>action&#x2F;Add.js</h3><p>创建action 进行状态修改</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-comment">// 创建一个修改num 的行为</span><br><br>const <span class="hljs-built_in">action</span> = &#123;<br>    <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;ADD_TODO&#x27;</span>,<br>    value: <span class="hljs-number">2</span><br>&#125;;<br>export <span class="hljs-keyword">default</span> <span class="hljs-built_in">action</span>;<br></code></pre></td></tr></table></figure><h3 id="reducers-x2F-Add-js"><a href="#reducers-x2F-Add-js" class="headerlink" title="reducers&#x2F;Add.js"></a>reducers&#x2F;Add.js</h3><p>创建reducer 进行状态管理</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">const</span> STATEINIt = &#123;<br>    num: <span class="hljs-number">0</span><br>&#125;;<br><br>// <span class="hljs-keyword">state</span> 是状态<br>// action 修改状态的方式<br><span class="hljs-keyword">const</span> reducer = (<span class="hljs-keyword">state</span> = STATEINIt, action) =&gt; &#123;<br>    // console.<span class="hljs-keyword">log</span>(<span class="hljs-keyword">state</span>);<br>    switch (action.type) &#123;<br>        case <span class="hljs-string">&quot;ADD_TODO&quot;</span>:<br>            return &#123;<br>                num: <span class="hljs-keyword">state</span>.num + action.value<br>            &#125;;<br>        <span class="hljs-keyword">default</span>:<br>            return <span class="hljs-keyword">state</span>;<br>    &#125;<br>&#125;;<br><br><br>export <span class="hljs-keyword">default</span> reducer;<br></code></pre></td></tr></table></figure><h2 id="Main-js-进行provider-注入"><a href="#Main-js-进行provider-注入" class="headerlink" title="Main.js 进行provider 注入"></a>Main.js 进行provider 注入</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom/client&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Provider</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span>;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)).<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span><br>);<br><br></code></pre></td></tr></table></figure><h3 id="Index-js-整合组建"><a href="#Index-js-整合组建" class="headerlink" title="Index.js 整合组建"></a>Index.js 整合组建</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-comment">// import Add from &quot;./components/Add/Add.jsx&quot;;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Num</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Num/Num&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Add</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Add/Add&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-comment">// console.log(props);</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>App</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Add</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;num&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Num</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (<span class="hljs-title class_">App</span>);<br></code></pre></td></tr></table></figure><h2 id="Add组建进行状态修改"><a href="#Add组建进行状态修改" class="headerlink" title="Add组建进行状态修改"></a>Add组建进行状态修改</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AddAction</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../store/action/Add.js&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Add</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-comment">// console.log(props);</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>        props.<span class="hljs-title function_">addNum</span>();<br>    &#125;;<br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">                handleClick();</span><br><span class="language-xml">            &#125;&#125;&gt;Add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mapDispatchToProps</span> = (<span class="hljs-params">dispatch, ownProps</span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">addNum</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-title function_">dispatch</span>(<span class="hljs-title class_">AddAction</span>);<br>        &#125;<br>    &#125;;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">connect</span>(<span class="hljs-literal">null</span>, mapDispatchToProps)(<span class="hljs-title class_">Add</span>);<br><br></code></pre></td></tr></table></figure><h2 id="Num-组建进行状态展示"><a href="#Num-组建进行状态展示" class="headerlink" title="Num 组建进行状态展示"></a>Num 组建进行状态展示</h2><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pf">import React <span class="hljs-keyword">from</span> &#x27;react&#x27;;<br>import &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><br>function Num(<span class="hljs-keyword">state</span>) &#123;<br>    return (<br>        <span class="hljs-variable">&lt;div&gt;</span>Num---&#123;<span class="hljs-keyword">state</span>.num&#125;&lt;/div&gt;<br>    );<br>&#125;<br><br><span class="hljs-keyword">const</span> mapStateToProps = (<span class="hljs-keyword">state</span>) =&gt; &#123;<br>    return <span class="hljs-keyword">state</span>;<br>&#125;;<br><br>export <span class="hljs-keyword">default</span> connect(mapStateToProps, null)(Num);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>状态管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react hooks 路由</title>
    <link href="/2022/09/10/react-hooks-%E8%B7%AF%E7%94%B1/"/>
    <url>/2022/09/10/react-hooks-%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<h1 id="React-hooks-路由"><a href="#React-hooks-路由" class="headerlink" title="React hooks 路由"></a>React hooks 路由</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>npm i react-router-dom</code></p><h2 id="App-jsx"><a href="#App-jsx" class="headerlink" title="App.jsx"></a>App.jsx</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Index</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router/Index.jsx&quot;</span>;<br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Index</span> /&gt;</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Main-jsx"><a href="#Main-jsx" class="headerlink" title="Main.jsx"></a>Main.jsx</h2><p>需要用<code>BrowserRouter</code> 或者<code>HashRouter</code> 包住</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom/client&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BrowserRouter</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">Router</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)).<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Router</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Router</span>&gt;</span></span><br><br>);<br><br></code></pre></td></tr></table></figure><p>创建router文件夹</p><p>创建<code>Index.jsx</code> 文件</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; lazy, Suspense &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; useRoutes &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/Home/Home.jsx&quot;</span>;<br>const User = lazy(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../pages/User/User.jsx&quot;</span>));<br>const Center = lazy(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../pages/Center/Center.jsx&quot;</span>));<br>const LayOut = lazy(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../pages/LayOut/LayOut.jsx&quot;</span>));<br>const Detail = lazy(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../pages/Detail/Detail.jsx&quot;</span>));<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> function Index() &#123;<br><br>    const lazyLoad = <span class="hljs-function"><span class="hljs-params">(child)</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> &lt;Suspense Suspense fallback=&#123;&lt;div&gt; Loading...&lt;/div &gt;&#125;&gt;<br>            &#123;child&#125;<br>        &lt;/Suspense &gt;;<br><br>    &#125;;<br><br>    const routers = useRoutes([<br>        &#123;<br>            path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>            element: &lt;LayOut /&gt;,<br>            children: [<br>                &#123;<br>                    index: <span class="hljs-literal">true</span>,<br>                    element: lazyLoad(&lt;Home /&gt;)<br>                &#125;,<br>                &#123;<br>                    path: <span class="hljs-string">&quot;/user&quot;</span>,<br>                    element: lazyLoad(&lt;User /&gt;),<br>                    meta: &#123;<br>                        isLogin: <span class="hljs-literal">false</span><br>                    &#125;<br>                &#125;,<br>                &#123;<br>                    path: <span class="hljs-string">&quot;/center&quot;</span>,<br>                    element: lazyLoad(&lt;Center /&gt;)<br>                &#125;, &#123;<br>                    path: <span class="hljs-string">&quot;/detail/:id&quot;</span>,<br>                    element: lazyLoad(&lt;Detail /&gt;)<br>                &#125;<br>            ]<br>        &#125;,<br>    ]);<br><br><br><br>    <span class="hljs-keyword">return</span> (<br>        routers<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="params参数传递处理"><a href="#params参数传递处理" class="headerlink" title="params参数传递处理"></a>params参数传递处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; useParams &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Detail</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> params = <span class="hljs-title function_">useParams</span>();<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Detail----&#123;params.id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="query-参数处理"><a href="#query-参数处理" class="headerlink" title="query 参数处理"></a>query 参数处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; useLocation, useMatch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Center</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> location = <span class="hljs-title function_">useLocation</span>();<br>    <span class="hljs-comment">// console.log(location);</span><br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Center   &#123;location.state.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Center</span>;<br></code></pre></td></tr></table></figure><h2 id="Outlet-路由展示"><a href="#Outlet-路由展示" class="headerlink" title="Outlet 路由展示"></a>Outlet 路由展示</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Outlet</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">LayOut</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span>LayOut</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">LayOut</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>路由</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React Router</title>
    <link href="/2022/09/09/React-Router/"/>
    <url>/2022/09/09/React-Router/</url>
    
    <content type="html"><![CDATA[<h3 id="一、React-router-基本方法"><a href="#一、React-router-基本方法" class="headerlink" title="一、React-router 基本方法"></a>一、React-router 基本方法</h3><p><strong>npm</strong> <code>npm install react-router-dom@6</code></p><p><strong>yarn</strong> <code>yarn add react-router-dom@6</code></p><h3 id="二、使用方法"><a href="#二、使用方法" class="headerlink" title="二、使用方法"></a>二、使用方法</h3> <figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">React-Router本身在React开发中就是一个组件，因此在使用时基本遵循组件开发相关原则。这里采用<span class="hljs-keyword">create</span>-react-app来创建一个基础的demo工程演示使用过程。<br></code></pre></td></tr></table></figure><h4 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h4><ul><li><strong>使用vite 的方式安装</strong>  <code>npm create vite</code> </li><li><strong>使用脚手架的方式安装</strong> <code>create-react-app my-first-react</code></li></ul><h4 id="启用全局路由模式"><a href="#启用全局路由模式" class="headerlink" title="启用全局路由模式"></a>启用全局路由模式</h4><p>全局路由有常用两种路由模式可选：HashRouter 和 BrowserRouter HashRouter：URL中采用的是hash(#)部分去创建路由</p><h4 id="index-jsx"><a href="#index-jsx" class="headerlink" title="index.jsx"></a>index.jsx</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom/client&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BrowserRouter</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">Router</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)).<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Router</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Router</span>&gt;</span></span><br>);<br><br></code></pre></td></tr></table></figure><p>这样我们在yarn start 或者 npm run start的时候访问&#x2F;就可以访问这个组件了</p><h3 id="三、路由功能-React-Router-V6版本常用路由组件和hooks"><a href="#三、路由功能-React-Router-V6版本常用路由组件和hooks" class="headerlink" title="三、路由功能 React-Router V6版本常用路由组件和hooks"></a>三、路由功能 React-Router V6版本常用路由组件和hooks</h3><table><thead><tr><th><strong>组件名</strong></th><th><strong>作用</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><Routers></Routers></td><td>一组路由</td><td>代替原有<code>&lt;Switch&gt;</code>，所有子路由都用基础的Router children来表示</td></tr><tr><td><Router></Router></td><td>基础路由</td><td>Router是可以嵌套的，解决原有V5中严格模式，后面与V5区别会详细介绍</td></tr><tr><td><Link></Link></td><td>导航组件</td><td>在实际页面中跳转使用</td></tr><tr><td><Outlet></Outlet></td><td>自适应渲染组件</td><td>根据实际路由url自动选择组件</td></tr></tbody></table><table><thead><tr><th><strong>hooks名</strong></th><th><strong>作用</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>useParams</td><td>返回当前参数</td><td>根据路径读取参数</td></tr><tr><td>useNavigate</td><td>返回当前路由</td><td>代替原有V5中的 useHistory</td></tr><tr><td>useOutlet</td><td>返回根据路由生成的element</td><td></td></tr><tr><td>useLocation</td><td>返回当前的location 对象</td><td></td></tr><tr><td>useRoutes</td><td>同Routers组件一样，只不过是在js中使用</td><td></td></tr><tr><td>useSearchParams</td><td>用来匹配URL中?后面的搜索参数</td><td></td></tr></tbody></table><h4 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a><strong>App.js</strong></h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">这里创建了两个组件Home和<span class="hljs-keyword">About</span>，然后分别注册/和<span class="hljs-keyword">about</span>，在每个页面还有Link来进行导航<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./App.css&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Routes</span>, <span class="hljs-title class_">Route</span>, <span class="hljs-title class_">Link</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App-header&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Home</span> /&gt;</span>&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/about&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">About</span> /&gt;</span>&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Home</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Welcome to the homepage<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>about<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">About</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Welcome to the about page<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>home<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>about<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br><br></code></pre></td></tr></table></figure><h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><p>嵌套路由是V6版本对之前版本一个较大的升级，采用嵌套路由会智能的识别</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Users</span> /&gt;</span>&#125;&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;:id&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">UserDetail</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;create&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">NewUser</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>如果只是内部组件修改，也可以采用<code>&lt;Outlet/&gt;</code>来直接实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Users</span> /&gt;</span>&#125;&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;:id&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">UserDetail</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;create&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">NewUser</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span></span><br>  );<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Users</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Users<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><p>index路由</p><p>index属性解决当嵌套路由有多个子路由但本身无法确认默认渲染哪个子路由的时候，可以增加index属性来指定默认路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Layout</span> /&gt;</span>&#125;&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">index</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">About</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">User</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;about&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">About</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><p>路由通配符</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">整个react-router支持以下几种通配符<br><br>/groups<br><span class="hljs-regexp">/groups/</span>admin<br><span class="hljs-regexp">/users/</span>:id<br><span class="hljs-regexp">/users/</span>:id/messages<br><span class="hljs-regexp">/files/</span>*<br><span class="hljs-regexp">/files/</span>:id/*<br></code></pre></td></tr></table></figure><p>关于NotFound类路由，可以用<code>*</code>来代替</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Home</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;dashboard&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Dashboard</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">NotFound</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><p>获取参数 useParams 和useSearchParams</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br> <span class="hljs-keyword">return</span> (<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Users</span> /&gt;</span>&#125;&gt;</span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;:id&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">UserDetail</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;create&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">NewUser</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span></span><br> );<br>&#125;<br><br></code></pre></td></tr></table></figure><p>那么在UserDetail内部需要用useParams来获取对应的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useParams &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">UserDetail</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> params = <span class="hljs-title function_">useParams</span>();<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>User: &#123;params.id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>useSearchParams相对复杂，他返回的是一个当前值和set方法</p><p>let [searchParams, setSearchParams] &#x3D; useSearchParams();</p><p>使用时可以用<code>searchParams.get(&quot;id&quot;)</code>来获取参数，同时页面内也可以setSearchParams({“id”:2})来改变路由，这样当访问 <a href="https://link.juejin.cn/?target=http://URL/user?id=111">http://URL/user?id=111</a> 时就可以获取和设置路径</p><p>useNavigate</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade">declare <span class="hljs-keyword">function</span> <span class="hljs-title function_">useNavigate</span>(<span class="hljs-params"></span>): <span class="hljs-title function_">NavigateFunction</span>;<br><br><span class="hljs-title function_">interface</span> <span class="hljs-title function_">NavigateFunction</span> &#123;<br>  (<br>    to: To,<br>    options?: &#123; <span class="hljs-built_in">replace</span>?: <span class="hljs-built_in">boolean</span>; state?: State &#125;<br>  ): <span class="hljs-keyword">void</span>;<br>  (delta: <span class="hljs-built_in">number</span>): <span class="hljs-keyword">void</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-comment">//js写法</span><br> <span class="hljs-keyword">let</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&quot;/home&quot;</span>);<br> &#125;<br> <span class="hljs-comment">//组件写法</span><br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">replace</span> <span class="hljs-attr">state</span>=<span class="hljs-string">&#123;state&#125;</span> /&gt;</span></span>;<br> &#125;<br> <span class="hljs-comment">//替代原有的go goBack和goForward</span><br>&lt;button onClick=&#123;<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">navigate</span>(-<span class="hljs-number">2</span>)&#125;&gt;<br>   <span class="hljs-title class_">Go</span> <span class="hljs-number">2</span> pages back<br> &lt;/button&gt;<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> navigate(-1)&#125;&gt;Go back<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> navigate(1)&#125;&gt;</span><br><span class="language-xml">   Go forward</span><br><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> navigate(2)&#125;&gt;</span><br><span class="language-xml">   Go 2 pages forward</span><br><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>Redirect.js </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Redirect</span>(<span class="hljs-params">&#123; to &#125;</span>) &#123;<br>    <span class="hljs-keyword">let</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br>    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">navigate</span>(to);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vue适配PC端屏幕自适应</title>
    <link href="/2022/09/08/vue%E9%80%82%E9%85%8DPC%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E9%80%82%E5%BA%94/"/>
    <url>/2022/09/08/vue%E9%80%82%E9%85%8DPC%E7%AB%AF%E5%B1%8F%E5%B9%95%E8%87%AA%E9%80%82%E5%BA%94/</url>
    
    <content type="html"><![CDATA[<h2 id="vue适配PC端屏幕自适应"><a href="#vue适配PC端屏幕自适应" class="headerlink" title="vue适配PC端屏幕自适应"></a>vue适配PC端屏幕自适应</h2><p>１.下载<a href="https://so.csdn.net/so/search?q=postcss&spm=1001.2101.3001.7020">postcss</a>-px2rem和px2rem-loader</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i postcss-px2rem px2rem-loader<br></code></pre></td></tr></table></figure><p>2.src目录下新建utils文件夹，下面建rem.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// rem等比适配配置文件</span><br><span class="hljs-comment">// 基准大小</span><br><span class="hljs-keyword">const</span> baseSize = <span class="hljs-number">16</span><br>    <span class="hljs-comment">// 设置 rem 函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setRem</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 当前页面宽度相对于 1920宽的缩放比例，可根据自己需要修改。</span><br>    <span class="hljs-keyword">const</span> scale = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientWidth</span> / <span class="hljs-number">1920</span>    <span class="hljs-comment">//当前设计稿为1920  如果是750则 替换为 750</span><br>        <span class="hljs-comment">// 设置页面根节点字体大小（“Math.min(scale, 2)” 指最高放大比例为2，可根据实际业务需求调整）</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = baseSize * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(scale, <span class="hljs-number">2</span>) + <span class="hljs-string">&#x27;px&#x27;</span><br>&#125;<br><span class="hljs-comment">// 初始化</span><br><span class="hljs-title function_">setRem</span>()<br>    <span class="hljs-comment">// 改变窗口大小时重新设置 rem</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setRem</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>3.main.js里面做引入</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./utils/rem&#x27;</span><br></code></pre></td></tr></table></figure><p>4.根目录下新建vue.config.js</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 引入等比适配插件</span><br><span class="hljs-type">const</span> <span class="hljs-variable">px2rem</span> <span class="hljs-operator">=</span> require(<span class="hljs-string">&#x27;postcss-px2rem&#x27;</span>)<br><br><span class="hljs-comment">// 配置基本大小</span><br><span class="hljs-type">const</span> <span class="hljs-variable">postcss</span> <span class="hljs-operator">=</span> px2rem(&#123;<br>    <span class="hljs-comment">// 基准大小 baseSize，需要和rem.js中相同</span><br>    remUnit: <span class="hljs-number">16</span><br>&#125;)<br><br><span class="hljs-comment">// 使用等比适配插件</span><br><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>    lintOnSave: <span class="hljs-literal">false</span>,<br>    css: &#123;<br>        loaderOptions: &#123;<br>            postcss: &#123;<br>                plugins: [<br>                    postcss<br>                ]<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>git学习</title>
    <link href="/2022/08/26/git%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/08/26/git%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="Git-创建仓库"><a href="#Git-创建仓库" class="headerlink" title="Git 创建仓库"></a>Git 创建仓库</h2><h3 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h3><p>git 使用  <strong>git init</strong> 命令来初始化一个git 仓库，git 的很多命令都需要在git 的仓库中运行,所以 <strong>git init</strong> 是使用git 的第一个命令，在执行完 <strong>git init</strong> 命令后，git 仓库会生成一个git 仓库会生成一个git 仓库</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p><code>初始化仓库</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git init<br></code></pre></td></tr></table></figure><p>执行完后会在当前的目录生成一个**.git**目录</p><p>使用我们指定目录作为git 仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git init newrepo<br></code></pre></td></tr></table></figure><p>初始化后，会在 newrepo 目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。</p><p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git add *.c<br>$ git add README<br>$ git commit -m &#x27;初始化项目版本&#x27;<br></code></pre></td></tr></table></figure><p>以上命令将目录下以 .c 结尾及 README 文件提交到仓库中。</p><blockquote><p><strong>注：</strong> 在 Linux 系统中，commit 信息使用单引号 **’**，Windows 系统，commit 信息使用双引号 **”**。</p><p>所以在 git bash 中 <strong>git commit -m ‘提交说明’</strong> 这样是可以的，在 Windows 命令行中就要使用双引号 **git commit -m “提交说明”**。</p></blockquote><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><p>我们使用 <strong>git clone</strong> 从现有 Git 仓库中拷贝项目（类似 <strong>svn checkout</strong>）。</p><p>克隆仓库的命令格式为：</p><blockquote><p>git clone <repo></repo></p></blockquote><p>如果我们需要克隆到指定的目录，可以使用以下命令格式：</p><blockquote><p>git clone <repo> <directory></directory></repo></p></blockquote><h4 id="参考说明"><a href="#参考说明" class="headerlink" title="参考说明"></a>参考说明</h4><ul><li><strong>repo</strong> :git 仓库</li><li><strong>directory</strong> : 本地目录</li></ul><p>比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git clone git://github.com/schacon/grit.git<br></code></pre></td></tr></table></figure><p>执行该命令后，会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录。</p><p>如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：</p><blockquote><p>$ git clone git:&#x2F;&#x2F;github.com&#x2F;schacon&#x2F;grit.git mygrit</p></blockquote><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>git 的设置使用 <strong>git config</strong> 命令。</p><p>显示当前的 git 配置信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git config --list<br>credential.helper=osxkeychain<br>core.repositoryformatversion=0<br>core.filemode=true<br>core.bare=false<br>core.logallrefupdates=true<br>core.ignorecase=true<br>core.precomposeunicode=true<br></code></pre></td></tr></table></figure><p>编辑git 配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git config -e    # 针对当前仓库 <br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git config -e --global   # 针对系统上所有仓库<br></code></pre></td></tr></table></figure><p>设置提交代码时的用户信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git config --global user.name &quot;runoob&quot;<br>$ git config --global user.email test@runoob.com<br></code></pre></td></tr></table></figure><p>如果去掉 <strong>–global</strong> 参数只对当前仓库有效</p><h2 id="git-基本操作"><a href="#git-基本操作" class="headerlink" title="git 基本操作"></a>git 基本操作</h2><p>Git 常用的是以下 6 个命令：<strong>git clone</strong>、<strong>git push</strong>、<strong>git add</strong> 、<strong>git commit</strong>、<strong>git checkout</strong>、<strong>git pull</strong></p><ul><li>workspace: 工作区</li><li>staging area: 暂存区&#x2F;缓存区</li><li>local repository: 版本库或本地仓库</li><li>remote repository: 远程仓库</li></ul><p>简单操作步骤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git init    - 初始化仓库<br>$ git add .    - 添加文件到暂存区<br>$ git commit   -将暂存去的内容添加到仓库中<br></code></pre></td></tr></table></figure><h4 id="创建仓库命令"><a href="#创建仓库命令" class="headerlink" title="创建仓库命令"></a>创建仓库命令</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git init</td><td>初始化仓库</td></tr><tr><td>git clone</td><td>拷贝一份远程仓库，也就是下载一个项目</td></tr></tbody></table><h4 id="提交与修改"><a href="#提交与修改" class="headerlink" title="提交与修改"></a>提交与修改</h4><p>Git 的工作就是创建和保存你的项目的快照及与之后的快照进行对比。</p><p>下表列出了有关创建与提交你的项目的快照的命令：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git add</td><td>添加文件到暂存区</td></tr><tr><td>git status</td><td>查看仓库当前的状态。，显示有变更的文件</td></tr><tr><td>git diff</td><td>比较文件的不同，即暂存去和工作区的差异</td></tr><tr><td>git commit</td><td>提交暂存区到本地仓库</td></tr><tr><td>git reset</td><td>回退版本</td></tr><tr><td>git rm</td><td>将文件从暂存区和工作区中删除</td></tr><tr><td>git mv</td><td>移出或者重命名工作区文件</td></tr></tbody></table><h4 id="提交日志"><a href="#提交日志" class="headerlink" title="提交日志"></a>提交日志</h4><table><thead><tr><th align="left">命令</th><th>说明</th></tr></thead><tbody><tr><td align="left">git log</td><td>查看历史提交记录</td></tr><tr><td align="left">git blame<file></file></td><td>以列表的形式查看指定文件的历史修改记录</td></tr></tbody></table><h4 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git remote</td><td>远程仓库操作</td></tr><tr><td>git fetch</td><td>从远处获取代码库</td></tr><tr><td>git pull</td><td>下载远程代码并合并</td></tr><tr><td>git push</td><td>上传远程代码并且合并</td></tr></tbody></table><h2 id="git-分支管理"><a href="#git-分支管理" class="headerlink" title="git 分支管理"></a>git 分支管理</h2><p>Git 分支实际上是指向更改快照的指针。</p><p>有人把 Git 的分支模型称为<strong>必杀技特性</strong>，而正是因为它，将 <strong>Git</strong> 从版本控制系统家族里区分出来。</p><p>创建分支命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git branch (branchname)<br></code></pre></td></tr></table></figure><p>切换分支命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git checkout (branchname)<br></code></pre></td></tr></table></figure><p>当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。</p><p>合并分支命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git merge<br></code></pre></td></tr></table></figure><p>你可以多次合并到统一分支， 也可以选择在合并之后直接删除被并入的分支。</p><p>开始前我们先创建一个测试目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs git">$ mkdir gitdemo<br>$ cd gitdemo/<br>$ git init<br>Initialized empty Git repository...<br>$ touch README<br>$ git add README<br>$ git commit -m &#x27;第一次版本提交&#x27;<br>[master (root-commit) 3b58100] 第一次版本提交<br> 1 file changed, 0 insertions(+), 0 deletions(-)<br> create mode 100644 README<br></code></pre></td></tr></table></figure><h3 id="git-分支管理-1"><a href="#git-分支管理-1" class="headerlink" title="git 分支管理"></a>git 分支管理</h3><h4 id="列出分支"><a href="#列出分支" class="headerlink" title="列出分支"></a>列出分支</h4><p>列出基本命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git branch<br></code></pre></td></tr></table></figure><p>没有参数, <strong>git branch</strong> 会列出你在本地的分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git branch<br>* master<br></code></pre></td></tr></table></figure><p> 此例的意思就是，我们有一个叫做 <strong>master</strong> 的分支，并且该分支是当前分支。</p><p>当你执行 <strong>git init</strong> 的时候，默认情况下 Git 就会为你创建 <strong>master</strong> 分支。</p><p>如果我们要手动创建一个分支。执行 <strong>git branch (branchname)</strong> 即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git branch testing<br>$ git branch<br>* master<br>  testing<br></code></pre></td></tr></table></figure><p>现在我们可以看到，有了一个新分支 <strong>testing</strong>。</p><p>当你以此方式在上次提交更新之后创建了新分支，如果后来又有更新提交， 然后又切换到了 <strong>testing</strong> 分支，Git 将还原你的工作目录到你创建分支时候的样子。</p><p>接下来我们将演示如何切换分支，我们用 git checkout (branch) 切换到我们要修改的分支。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs git">$ ls<br>README<br>$ echo &#x27;runoob.com&#x27; &gt; test.txt<br>$ git add .<br>$ git commit -m &#x27;add test.txt&#x27;<br>[master 3e92c19] add test.txt<br> 1 file changed, 1 insertion(+)<br> create mode 100644 test.txt<br>$ ls<br>README        test.txt<br>$ git checkout testing<br>Switched to branch &#x27;testing&#x27;<br>$ ls<br>README<br></code></pre></td></tr></table></figure><p>当我们切换到 <strong>testing</strong> 分支的时候，我们添加的新文件 test.txt 被移除了。切换回 <strong>master</strong> 分支的时候，它们又重新出现了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git checkout master<br>Switched to branch &#x27;master&#x27;<br>$ ls<br>README        test.txt<br></code></pre></td></tr></table></figure><p>我们也可以使用 git checkout -b (branchname) 命令来创建新分支并立即切换到该分支下，从而在该分支中操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git checkout -b newtest<br>Switched to a new branch &#x27;newtest&#x27;<br>$ git rm test.txt <br>rm &#x27;test.txt&#x27;<br>$ ls<br>README<br>$ touch runoob.php<br>$ git add .<br>$ git commit -am &#x27;removed test.txt、add runoob.php&#x27;<br>[newtest c1501a2] removed test.txt、add runoob.php<br> 2 files changed, 1 deletion(-)<br> create mode 100644 runoob.php<br> delete mode 100644 test.txt<br>$ ls<br>README        runoob.php<br>$ git checkout master<br>Switched to branch &#x27;master&#x27;<br>$ ls<br>README        test.txt<br></code></pre></td></tr></table></figure><p>我们创建了一个分支，在该分支上移除了一些文件 test.txt，并添加了 runoob.php 文件，然后切换回我们的主分支，删除的 test.txt 文件又回来了，且新增加的 runoob.php 不存在主分支中。</p><p>使用分支将工作切分开来，从而让我们能够在不同开发环境中做事，并来回切换。</p><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><p>删除分支命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git branch -d (branchname)<br></code></pre></td></tr></table></figure><p>例如我们要删除 testing 分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git branch<br>* master<br>  testing<br>$ git branch -d testing<br>Deleted branch testing (was 85fc7e7).<br>$ git branch<br>* master<br></code></pre></td></tr></table></figure><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><p>一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git merge<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git branch<br>* master<br>  newtest<br>$ ls<br>README        test.txt<br>$ git merge newtest<br>Updating 3e92c19..c1501a2<br>Fast-forward<br> runoob.php | 0<br> test.txt   | 1 -<br> 2 files changed, 1 deletion(-)<br> create mode 100644 runoob.php<br> delete mode 100644 test.txt<br>$ ls<br>README        runoob.php<br></code></pre></td></tr></table></figure><p>以上实例中我们将 newtest 分支合并到主分支去，test.txt 文件被删除。</p><p>合并完后就可以删除分支:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git branch -d newtest<br>Deleted branch newtest (was c1501a2).<br></code></pre></td></tr></table></figure><p>删除后，就只剩下master 分支了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git branch<br>* master<br></code></pre></td></tr></table></figure><h4 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h4><p>合并并不仅仅是简单的文件添加、移除的操作，Git 也会合并修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git branch<br>* master<br>$ cat runoob.php<br></code></pre></td></tr></table></figure><p>首先，我们创建一个叫做 change_site 的分支，切换过去，我们将 runoob.php 内容改为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">&lt;?php<br>echo &#x27;runoob&#x27;;<br>?&gt;<br></code></pre></td></tr></table></figure><p>创建 change_site 分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git checkout -b change_site<br>Switched to a new branch &#x27;change_site&#x27;<br>$ vim runoob.php<br>$ head -3 runoob.php<br>&lt;?php<br>echo &#x27;runoob&#x27;;<br>?&gt;<br>$ git commit -am &#x27;changed the runoob.php&#x27;<br>[change_site 7774248] changed the runoob.php<br> 1 file changed, 3 insertions(+)<br></code></pre></td></tr></table></figure><p>将修改的内容提交到 change_site 分支中。 现在，假如切换回 master 分支我们可以看内容恢复到我们修改前的(空文件，没有代码)，我们再次修改 runoob.php 文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git checkout master<br>Switched to branch &#x27;master&#x27;<br>$ cat runoob.php<br>$ vim runoob.php    # 修改内容如下<br>$ cat runoob.php<br>&lt;?php<br>echo 1;<br>?&gt;<br>$ git diff<br>diff --git a/runoob.php b/runoob.php<br>index e69de29..ac60739 100644<br>--- a/runoob.php<br>+++ b/runoob.php<br>@@ -0,0 +1,3 @@<br>+&lt;?php<br>+echo 1;<br>+?&gt;<br>$ git commit -am &#x27;修改代码&#x27;<br>[master c68142b] 修改代码<br> 1 file changed, 3 insertions(+)<br></code></pre></td></tr></table></figure><p>现在这些改变已经记录到我的 “master” 分支了。接下来我们将 “change_site” 分支合并过来。****</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git merge change_site<br>Auto-merging runoob.php<br>CONFLICT (content): Merge conflict in runoob.php<br>Automatic merge failed; fix conflicts and then commit the result.<br><br>$ cat runoob.php     # 打开文件，看到冲突内容<br>&lt;?php<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br>echo 1;<br>=======<br>echo &#x27;runoob&#x27;;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; change_site<br>?&gt;<br></code></pre></td></tr></table></figure><p>我们将前一个分支合并到 master 分支，一个合并冲突就出现了，接下来我们需要手动去修改它。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs git">$ vim runoob.php <br>$ cat runoob.php<br>&lt;?php<br>echo 1;<br>echo &#x27;runoob&#x27;;<br>?&gt;<br>$ git diff<br>diff --cc runoob.php<br>index ac60739,b63d7d7..0000000<br>--- a/runoob.php<br>+++ b/runoob.php<br>@@@ -1,3 -1,3 +1,4 @@@<br>  &lt;?php<br> +echo 1;<br>+ echo &#x27;runoob&#x27;;<br>  ?&gt;<br></code></pre></td></tr></table></figure><p>在 Git 中，我们可以用 git add 要告诉 Git 文件冲突已经解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git status -s<br>UU runoob.php<br>$ git add runoob.php<br>$ git status -s<br>M  runoob.php<br>$ git commit<br>[master 88afe0e] Merge branch &#x27;change_site&#x27;<br></code></pre></td></tr></table></figure><p>现在我们成功解决了合并中的冲突，并提交了结果。</p><h2 id="git-提交历史"><a href="#git-提交历史" class="headerlink" title="git 提交历史"></a>git 提交历史</h2><p>Git 提交历史一般常用两个命令：</p><ul><li>git log -查看历史提交记录</li><li>git blame<file>- 以列表的形式查看指定文件的历史修改记录</file></li></ul><h3 id="git-blog"><a href="#git-blog" class="headerlink" title="git blog"></a>git blog</h3><ul><li><p>在使用 Git 提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，我们可以使用 <strong>git log</strong> 命令查看。</p></li><li><p>针对我们前一章节的操作，使用 <strong>git log</strong> 命令列出历史提交记录如下：</p></li><li><pre><code class="git">$ git logcommit d5e9fc2c811e0ca2b2d28506ef7dc14171a207d9 (HEAD -&gt; master)Merge: c68142b 7774248Author: runoob &lt;test@runoob.com&gt;Date:   Fri May 3 15:55:58 2019 +0800    Merge branch &#39;change_site&#39;commit c68142b562c260c3071754623b08e2657b4c6d5bAuthor: runoob &lt;test@runoob.com&gt;Date:   Fri May 3 15:52:12 2019 +0800    修改代码commit 777424832e714cf65d3be79b50a4717aea51ab69 (change_site)Author: runoob &lt;test@runoob.com&gt;Date:   Fri May 3 15:49:26 2019 +0800    changed the runoob.phpcommit c1501a244676ff55e7cccac1ecac0e18cbf6cb00Author: runoob &lt;test@runoob.com&gt;Date:   Fri May 3 15:35:32 2019 +0800<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><br>- 我们可以用 --oneline 选项来查看历史记录的简洁的版本。<br><br>- ```git<br>  $ git <span class="hljs-built_in">log</span> --oneline<br>  $ git <span class="hljs-built_in">log</span> --oneline<br>  d5e9fc2 (HEAD -&gt; master) Merge branch &#x27;change_site&#x27;<br>  c68142b 修改代码<br>  <span class="hljs-number">7774248</span> (change_site) changed the runoob.php<br>  c1501a2 removed test.txt、add runoob.php<br>  3e92c19 add test.txt<br>  <span class="hljs-number">3b58100</span> 第一次版本提交<br></code></pre></td></tr></table></figure></code></pre></li><li><ul><li><p>这告诉我们的是，此项目的开发历史。</p></li><li><p>我们还可以用 –graph 选项，查看历史中什么时候出现了分支、合并。以下为相同的命令，开启了拓扑图选项：</p></li><li><p>&#96;&#96;&#96;git</p><ul><li>d5e9fc2 (HEAD -&gt; master) Merge branch ‘change_site’<br>|\<br>| * 7774248 (change_site) changed the runoob.php</li><li>| c68142b 修改代码<br>|&#x2F;  </li><li>c1501a2 removed test.txt、add runoob.php</li><li>3e92c19 add test.txt</li><li>3b58100 第一次版本提交<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><br>- - 现在我们可以更清楚明了地看到何时工作分叉、又何时归并。<br><br>  - 你也可以用 **--<span class="hljs-built_in">reverse</span>** 参数来逆向显示所有日志。<br><br>  - ```git<br>    $ git <span class="hljs-built_in">log</span> --<span class="hljs-built_in">reverse</span> --oneline<br>    <span class="hljs-number">3b58100</span> 第一次版本提交<br>    3e92c19 add test.txt<br>    c1501a2 removed test.txt、add runoob.php<br>    <span class="hljs-number">7774248</span> (change_site) changed the runoob.php<br>    c68142b 修改代码<br>    d5e9fc2 (HEAD -&gt; master) Merge branch &#x27;change_site&#x27;<br></code></pre></td></tr></table></figure></li></ul><ul><li><p>如果只想查找指定用户的提交日志可以使用命令：git log –author , 例如，比方说我们要找 Git 源码中 Linus 提交的部分：</p></li><li><pre><code class="git">$ git log --author=Linus --oneline -581b50f3 Move &#39;builtin-*&#39; into a &#39;builtin/&#39; subdirectory3bb7256 make &quot;index-pack&quot; a built-in377d027 make &quot;git pack-redundant&quot; a built-inb532581 make &quot;git unpack-file&quot; a built-in112dd51 make &quot;mktag&quot; a built-in<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>- - 如果你要指定日期，可以执行几个选项：<span class="hljs-comment">--since 和 --before，但是你也可以用 --until 和 --after。</span><br><br>  - 例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了 <span class="hljs-comment">--no-merges 选项以隐藏合并提交）：</span><br><br>  - ```git<br>    $ git <span class="hljs-keyword">log</span> <span class="hljs-comment">--oneline --before=&#123;3.weeks.ago&#125; --after=&#123;2010-04-18&#125; --no-merges</span><br>    <span class="hljs-number">5469e2</span>d Git <span class="hljs-number">1.7</span><span class="hljs-number">.1</span>-rc2<br>    d43427d Documentation/remote-helpers: Fix typos <span class="hljs-keyword">and</span> improve <span class="hljs-keyword">language</span><br>    <span class="hljs-number">272</span>a36b Fixup: Second argument may be <span class="hljs-keyword">any</span> arbitrary string<br>    b6c8d2d Documentation/remote-helpers: <span class="hljs-keyword">Add</span> invocation section<br>    <span class="hljs-number">5</span>ce4f4e Documentation/urls: Rewrite <span class="hljs-keyword">to</span> accomodate transport::address<br>    <span class="hljs-number">00</span>b84e9 Documentation/remote-helpers: Rewrite description<br>    <span class="hljs-number">03</span>aa87e Documentation: Describe other situations <span class="hljs-keyword">where</span> -z affects git diff<br>    <span class="hljs-number">77</span>bc694 rebase-interactive: silence <span class="hljs-built_in">warning</span> <span class="hljs-keyword">when</span> <span class="hljs-keyword">no</span> commits rewritten<br>    <span class="hljs-number">636</span>db2c t3301: <span class="hljs-keyword">add</span> tests <span class="hljs-keyword">to</span> use <span class="hljs-comment">--format=&quot;%N&quot;</span><br></code></pre></td></tr></table></figure>- ### git blame- 如果要查看指定文件的修改记录可以使用 git blame 命令，格式如下：- ```git  git blame &lt;file&gt;  <figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><br>- git blame 命令是以列表形式显示修改记录，如下实例：<br><br>- ```git<br>  $ git blame README <br>  ^d2097aa (tianqixin 2020<span class="hljs-string">-08</span><span class="hljs-string">-25</span> 14:59:25 <span class="hljs-string">+0800</span> 1) # Runoob Git 测试<br>  db9315b0 (runoob    2020<span class="hljs-string">-08</span><span class="hljs-string">-25</span> 16:00:23 <span class="hljs-string">+0800</span> 2) # 菜鸟教程 <br></code></pre></td></tr></table></figure>- ## git 标签- ### 创建标签- ```git  [root@Git git]# git tag v1.0  <figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><br>- <span class="hljs-meta">### 查看已有标签</span><br><br>- ```git<br>  [root<span class="hljs-symbol">@Git</span> git]<span class="hljs-meta"># git tag</span><br>  v1<span class="hljs-number">.0</span><br>  [root<span class="hljs-symbol">@Git</span> git]<span class="hljs-meta"># git tag v1.1</span><br>  [root<span class="hljs-symbol">@Git</span> git]<span class="hljs-meta"># git tag</span><br>  v1<span class="hljs-number">.0</span><br>  v1<span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure>- ### 删除标签- ```git  [root@Git git]# git tag -d v1.1  Deleted tag ‘v1.1’ (was 91388f0)  [root@Git git]# git tag  v1.0  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>- ### 查看此版本所修改的内容<br><br>- ```git<br>  [root@Git git]# git <span class="hljs-keyword">show</span> v1<span class="hljs-number">.0</span><br>  <span class="hljs-keyword">commit</span> <span class="hljs-number">91388</span>f0883903ac9014e006611944f6688170ef4<br>  Author: &quot;syaving&quot; &lt;&quot;819044347@qq.com&quot;&gt;<br>  <span class="hljs-type">Date</span>: Fri <span class="hljs-type">Dec</span> <span class="hljs-number">16</span> <span class="hljs-number">02</span>:<span class="hljs-number">32</span>:<span class="hljs-number">05</span> <span class="hljs-number">2016</span> +<span class="hljs-number">0800</span><br>  <span class="hljs-keyword">commit</span> dir<br>  diff –git a/readme b/readme<br>  <span class="hljs-keyword">index</span> <span class="hljs-number">7</span>a3d711..bfecb47 <span class="hljs-number">100644</span><br>  — a/readme<br>  +++ b/readme<br>  @@ <span class="hljs-number">-1</span>,<span class="hljs-number">2</span> +<span class="hljs-number">1</span>,<span class="hljs-number">3</span> @@<br>  <span class="hljs-type">text</span><br>  hello git<br>  +use <span class="hljs-keyword">commit</span><br>  [root@Git git]# git <span class="hljs-keyword">log</span> –oneline<br>  <span class="hljs-number">91388</span>f0 <span class="hljs-keyword">commit</span> dir<br>  e435fe8 <span class="hljs-keyword">add</span> readme<br>  <span class="hljs-number">2525062</span> <span class="hljs-keyword">add</span> readme<br></code></pre></td></tr></table></figure>- ## git gitee- 我们在本地库上使用命令 **git remote add** 把它和 Gitee 的远程库关联：- ```git  git remote add origin git@gitee.com:imnoob/runoob-test.git  <figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><br><span class="hljs-bullet">-</span> <span class="hljs-string">之后，就可以正常地用 git push 和 git pull 推送了！</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">如果在使用命令 git remote add 时报错：</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">```git</span><br>  git remote add origin git@gitee.com:imnoob/runoob-test.git<br>  <span class="hljs-attribute">fatal</span><span class="hljs-punctuation">:</span> <span class="hljs-string">remote origin already exists.</span><br></code></pre></td></tr></table></figure>- 这说明本地库已经关联了一个名叫 origin 的远程库，此时，可以先用 **git remote -v** 查看远程库信息：- ```git  git remote -v  origin    git@github.com:tianqixin/runoob.git (fetch)  origin    git@github.com:tianqixin/runoob.git (push)  <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-bullet">- </span>可以看到，本地库已经关联了 origin 的远程库，并且，该远程库指向 GitHub。<br><br><span class="hljs-bullet">- </span>我们可以删除已有的 GitHub 远程库：<br><br><span class="hljs-bullet">- </span><span class="hljs-code">```git</span><br><span class="hljs-code">  git remote rm origin</span><br></code></pre></td></tr></table></figure>- 再关联 Gitee 的远程库（注意路径中需要填写正确的用户名）：- ```git  git remote add origin git@gitee.com:imnoob/runoob-test.git  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><br>- 此时，我们再查看远程库信息：<br><br>- ```git<br>  git remote -v<br>  origin    git<span class="hljs-keyword">@gitee</span>.<span class="hljs-attribute">com</span>:imnoob/runoob-test.git (fetch)<br>  origin    git<span class="hljs-keyword">@gitee</span>.<span class="hljs-attribute">com</span>:imnoob/runoob-test.git (push)<br></code></pre></td></tr></table></figure>- 现在可以看到，origin 已经被关联到 Gitee 的远程库了。- 通过 git push 命令就可以把本地库推送到 Gitee 上。- 有的小伙伴又要问了，一个本地库能不能既关联 GitHub，又关联 Gitee 呢？- 答案是肯定的，因为 git 本身是分布式版本控制系统，可以同步到另外一个远程库，当然也可以同步到另外两个远程库。- 使用多个远程库时，我们要注意，git 给远程库起的默认名称是 origin，如果有多个远程库，我们需要用不同的名称来标识不同的远程库。- 仍然以 runoob-test 本地库为例，我们先删除已关联的名为 origin 的远程库：- ```git  git remote rm origin  <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-bullet">- </span>然后，先关联 GitHub 的远程库：<br><br><span class="hljs-bullet">- </span><span class="hljs-code">```git</span><br><span class="hljs-code">  git remote add github git@github.com:tianqixin/runoob-git-test.git</span><br></code></pre></td></tr></table></figure>- 同样注意，远程库的名称叫 gitee，不叫 origin。- 现在，我们用 git remote -v 查看远程库信息，可以看到两个远程库：- ```git  git remote -v  gitee    git@gitee.com:imnoob/runoob-test.git (fetch)  gitee    git@gitee.com:imnoob/runoob-test.git (push)  github    git@github.com:tianqixin/runoob.git (fetch)  github    git@github.com:tianqixin/runoob.git (push)  <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-bullet">- </span>如果要推送到 GitHub，使用命令：<br><br><span class="hljs-bullet">- </span><span class="hljs-code">```git</span><br><span class="hljs-code">  git push github master</span><br></code></pre></td></tr></table></figure>- 如果要推送到 Gitee，使用命令：- ```git  git push gitee master</code></pre></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
